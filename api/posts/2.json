{"total":35,"pageSize":12,"pageCount":3,"data":[{"title":"Windows动态反调试技术（一）","uid":"744ee437e256eacc7e89be203fb836fd","slug":"Windows动态反调试技术（一）","date":"2022-07-09T13:39:34.000Z","updated":"2025-06-09T21:55:47.591Z","comments":true,"path":"api/articles/Windows动态反调试技术（一）.json","keywords":null,"cover":[],"text":"异常SetUnhandledExceptionFilter()进程中发生异常时，若SEH未处理或注册的SEH根本不存在，此时会调用执行系统的kernel32!U...","permalink":"/post/Windows动态反调试技术（一）","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"Windows动态反调试技术","slug":"Windows动态反调试技术","count":2,"path":"api/tags/Windows动态反调试技术.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Windows静态反调试技术（三）","uid":"0f5e7a00cb9e0d76fb61aefba4cb6bf5","slug":"Windows静态反调试技术（三）","date":"2022-06-25T13:18:17.000Z","updated":"2025-06-09T21:41:41.029Z","comments":true,"path":"api/articles/Windows静态反调试技术（三）.json","keywords":null,"cover":null,"text":"TLS回调函数由于TLS回调函数会先于EP代码执行，可以在回调函数内部使用IsDebuggerPresent()等函数判断调试与否，再决定是否继续运行程序。 E...","permalink":"/post/Windows静态反调试技术（三）","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"Windows静态反调试技术","slug":"Windows静态反调试技术","count":3,"path":"api/tags/Windows静态反调试技术.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Windows静态反调试技术（二）","uid":"4d2341767a6c86040d957eae87d1ec51","slug":"Windows静态反调试技术（二）","date":"2022-06-22T13:16:13.000Z","updated":"2025-06-09T21:41:20.984Z","comments":true,"path":"api/articles/Windows静态反调试技术（二）.json","keywords":null,"cover":[],"text":"NtQueryInformationProcess()NtQueryInformationProcess定义通过NtQueryInformationProces...","permalink":"/post/Windows静态反调试技术（二）","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"Windows静态反调试技术","slug":"Windows静态反调试技术","count":3,"path":"api/tags/Windows静态反调试技术.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Windows静态反调试技术（一）","uid":"cfe529b139f3ec3d5a0094d71b2823b9","slug":"Windows静态反调试技术（一）","date":"2022-06-20T13:12:54.000Z","updated":"2025-06-09T21:41:11.315Z","comments":true,"path":"api/articles/Windows静态反调试技术（一）.json","keywords":null,"cover":[],"text":"PEB利用PEB结构体信息可以判断当前进程是否处于被调试状态。回顾下PEB结构体的成员： Win7 x86中： 123456789101112131415161...","permalink":"/post/Windows静态反调试技术（一）","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"Windows静态反调试技术","slug":"Windows静态反调试技术","count":3,"path":"api/tags/Windows静态反调试技术.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Windows动态反调试技术（二）","uid":"bd414604d17df76b597f4081d3f02f14","slug":"Windows动态反调试技术（二）","date":"2022-06-11T13:05:26.000Z","updated":"2025-06-09T21:56:01.906Z","comments":true,"path":"api/articles/Windows动态反调试技术（二）.json","keywords":null,"cover":[],"text":"单步执行TF值设置为1时，CPU将进入单步执行（Single Step）模式。单步执行模式中，CPU执行1条指令后即触发1个EXCEPTION_SINGLE_S...","permalink":"/post/Windows动态反调试技术（二）","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"Windows动态反调试技术","slug":"Windows动态反调试技术","count":2,"path":"api/tags/Windows动态反调试技术.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"IDA添加结构体","uid":"d90627d53e222069704f901ed1b80995","slug":"IDA添加结构体","date":"2022-06-09T08:49:43.000Z","updated":"2025-06-09T10:16:41.620Z","comments":true,"path":"api/articles/IDA添加结构体.json","keywords":null,"cover":[],"text":"导入头文件方法①首先菜单栏选择File -> Load File -> Parse C Header file（Ctrl+F9）然后导入结构体文件（xxx.h）...","permalink":"/post/IDA添加结构体","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"IDA使用","slug":"IDA使用","count":1,"path":"api/tags/IDA使用.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"UPX脱壳实战——结合逆向工程核心原理","uid":"d804751ae060ee6bddee780d4be7bc78","slug":"UPX脱壳实战——结合逆向工程核心原理","date":"2022-05-11T03:23:55.000Z","updated":"2025-06-05T15:24:37.476Z","comments":true,"path":"api/articles/UPX脱壳实战——结合逆向工程核心原理.json","keywords":null,"cover":[],"text":"用《逆向工程核心原理》这本书中的notepad_upx.exe来实验 未加壳的oep 单步跟踪法脱壳的方法有很多，先来讲脱壳方法中最基础的单步跟踪法。单步跟踪法...","permalink":"/post/UPX脱壳实战——结合逆向工程核心原理","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"逆向工程核心原理","slug":"逆向工程核心原理","count":7,"path":"api/tags/逆向工程核心原理.json"},{"name":"加壳与脱壳","slug":"加壳与脱壳","count":1,"path":"api/tags/加壳与脱壳.json"},{"name":"iat修复","slug":"iat修复","count":1,"path":"api/tags/iat修复.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"PE文件——基址重定位","uid":"79cf73108f662b9d6b8f237086d2463b","slug":"PE文件——基址重定位","date":"2022-05-03T14:33:53.000Z","updated":"2025-06-09T08:38:09.203Z","comments":true,"path":"api/articles/PE文件——基址重定位.json","keywords":null,"cover":[],"text":"当链接器生成一个PE文件时，会假设这个文件在执行时被装载到默认的基地址处，并把code和data的相关地址都写入PE文件。如果载入时将默认的值作为基地址载入，则...","permalink":"/post/PE文件——基址重定位","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"PE文件","slug":"PE文件","count":3,"path":"api/tags/PE文件.json"},{"name":"基址重定位","slug":"基址重定位","count":1,"path":"api/tags/基址重定位.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"编译器扩展的SEH","uid":"aa231c03641d31bfb6874bcdc873cd1e","slug":"编译器扩展的SEH","date":"2022-04-25T13:28:03.000Z","updated":"2025-06-08T15:42:15.590Z","comments":true,"path":"api/articles/编译器扩展的SEH.json","keywords":null,"cover":[],"text":"注：vc6++的异常处理函数为except_handler3，visual stdio的异常处理函数为except_handler4（具体见基于Visual S...","permalink":"/post/编译器扩展的SEH","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[],"tags":[{"name":"Windows异常处理机制","slug":"Windows异常处理机制","count":2,"path":"api/tags/Windows异常处理机制.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"SEH","uid":"b42df1b10b510ae71ca0bc4d234a8f72","slug":"SEH","date":"2022-04-20T08:19:17.000Z","updated":"2025-06-08T15:26:30.339Z","comments":true,"path":"api/articles/SEH.json","keywords":null,"cover":[],"text":"SEH是Windows操作系统提供的异常处理机制，在程序源代码中使用__try、__except、__finally关键字来具体实现。 初识SEH下面将通过一个...","permalink":"/post/SEH","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"Windows异常处理机制","slug":"Windows异常处理机制","count":2,"path":"api/tags/Windows异常处理机制.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"TLS回调函数","uid":"66da80b7dfd28e13d279b8154dbcb5eb","slug":"TLS回调函数","date":"2022-04-15T07:23:02.000Z","updated":"2025-06-08T15:26:19.727Z","comments":true,"path":"api/articles/TLS回调函数.json","keywords":null,"cover":[],"text":"TLS回调函数TLS（Thread Local Storage，线程局部存储）回调函数常用于反调试 TLSTLS是各线程的独立的数据存储空间。使用TLS技术可在...","permalink":"/post/TLS回调函数","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"TLS回调函数","slug":"TLS回调函数","count":1,"path":"api/tags/TLS回调函数.json"},{"name":"PE结构","slug":"PE结构","count":1,"path":"api/tags/PE结构.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"认识PEB","uid":"716452a8f7139876fcd7d9fc7c5bbc0e","slug":"认识PEB","date":"2022-04-09T14:10:54.000Z","updated":"2025-06-08T15:18:01.815Z","comments":true,"path":"api/articles/认识PEB.json","keywords":null,"cover":[],"text":"PEB（Process Environment Block，进程环境块） PEB存放进程信息的结构体。 PEB 结构体的定义PEB结构体成员使用Windbg调试...","permalink":"/post/认识PEB","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"PEB","slug":"PEB","count":1,"path":"api/tags/PEB.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}