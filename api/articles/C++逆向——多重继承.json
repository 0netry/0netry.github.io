{"title":"C++逆向——多重继承","uid":"9301d0d9fdad61b6c1164e4bbd50c3da","slug":"C++逆向——多重继承","date":"2023-02-17T07:22:42.000Z","updated":"2025-06-07T18:30:39.668Z","comments":true,"path":"api/articles/C++逆向——多重继承.json","keywords":null,"cover":[],"content":"<p>当子类拥有多个父类（如类C继承自类A同时也继承自类B）时，便构成了多重继承关系。在多重继承的情况下，子类继承的父类变为多个，但其结构与单一继承相似。</p>\n<h1 id=\"多重继承类的定义\"><a href=\"#多重继承类的定义\" class=\"headerlink\" title=\"多重继承类的定义\"></a>多重继承类的定义</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#pragma warning(disable : 4996)</span><br><span class=\"line\"></span><br><span class=\"line\">class Sofa &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSofa() &#123;</span><br><span class=\"line\">\t\tcolor = 2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Sofa() &#123; // 沙发类虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;virtual ~Sofa()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getColor() &#123; // 获取沙发颜色</span><br><span class=\"line\">\t\treturn color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sitDown() &#123; // 沙发可以坐下休息</span><br><span class=\"line\">\t\treturn printf(&quot;Sit down and rest your legs\\r\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint color; // 沙发类成员变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//定义床类</span><br><span class=\"line\">class Bed &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tBed() &#123;</span><br><span class=\"line\">\t\tlength = 4;</span><br><span class=\"line\">\t\twidth = 5;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Bed() &#123; //床类虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;virtual ~Bed()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getArea() &#123; //获取床面积</span><br><span class=\"line\">\t\treturn length * width;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sleep() &#123; //床可以用来睡觉</span><br><span class=\"line\">\t\treturn printf(&quot;go to sleep\\r\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint length; //床类成员变量</span><br><span class=\"line\">\tint width;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//子类沙发床定义，派生自Sofa类和Bed类</span><br><span class=\"line\">class SofaBed : public Sofa, public Bed &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSofaBed() &#123;</span><br><span class=\"line\">\t\theight = 6;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~SofaBed() &#123; //沙发床类的虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;virtual ~SofaBed()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sitDown() &#123; //沙发可以坐下休息</span><br><span class=\"line\">\t\treturn printf(&quot;Sit down on the sofa bed\\r\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sleep() &#123; //床可以用来睡觉</span><br><span class=\"line\">\t\treturn printf(&quot;go to sleep on the sofa bed\\r\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getHeight() &#123;</span><br><span class=\"line\">\t\treturn height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint height;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main(int argc, char* argv[]) &#123;</span><br><span class=\"line\">\tSofaBed sofabed;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中定义了两个父类：沙发类和床类，通过多重继承，以它们为父类派生出沙发类，它们拥有各自的属性及方法。main()函数中定义了子类SofaBed的对象，其中包含两个父类的数据成员，，此时SofaBed在内存中占多少字节呢？</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/SofaBed%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E7%9A%84%E5%A4%A7%E5%B0%8F.png\" alt=\"对象SofaBed占用内存空间的大小\"></p>\n<p>由上图可知，对象SofaBed占用的内存空间大小为0x18字节。</p>\n<p>这些数据的内容是什么？它们又是如何存放在内存中的？具体如下图：</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/SofaBed%E7%9A%84%E5%86%85%E5%AD%98%E4%BF%A1%E6%81%AF.png\" alt=\"对象SofaBed的内存信息\"></p>\n<p>如上图所示，对象SofaBed的首地址在0x003af850处，在图中可看到子类和两个父类中的数据成员。数据成员的排列顺序由继承父类的顺序决定，从左向右依次排列。除此之外，还剩余两个地址值，分别为0x004e31e8与0x004e31b8，这两个地址如下图所示。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%99%9A%E8%A1%A8%E6%8C%87%E9%92%88%E5%AF%B9%E5%BA%94%E7%9A%84%E8%99%9A%E8%A1%A8%E4%BF%A1%E6%81%AF.png\" alt=\"子类对象的虚表指针对应的虚表信息\"></p>\n<p>上图显示了两个虚表指针指向的虚表信息。查看两个虚表信息会发现，这两个虚表保存了子类的虚函数与父类的虚函数，父类的这些虚函数都是子类中没有实现的。由此可见，编译器制作了两份子类SofaBed的虚函数。</p>\n<p>为什么会产生两份虚函数呢？我们先从对象SofaBed的构造入手，循序渐进地分析</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main函数</span><br><span class=\"line\">.text:00401370 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class=\"line\">.text:00401370 _main           proc near               ; CODE XREF: __scrt_common_main_seh(void)+F5↓p</span><br><span class=\"line\">.text:00401370</span><br><span class=\"line\">.text:00401370 var_20          = dword ptr -20h</span><br><span class=\"line\">.text:00401370 var_1C          = byte ptr -1Ch</span><br><span class=\"line\">.text:00401370 var_4           = dword ptr -4</span><br><span class=\"line\">.text:00401370 argc            = dword ptr  8</span><br><span class=\"line\">.text:00401370 argv            = dword ptr  0Ch</span><br><span class=\"line\">.text:00401370 envp            = dword ptr  10h</span><br><span class=\"line\">.text:00401370</span><br><span class=\"line\">.text:00401370                 push    ebp</span><br><span class=\"line\">.text:00401371                 mov     ebp, esp</span><br><span class=\"line\">.text:00401373                 sub     esp, 20h</span><br><span class=\"line\">.text:00401376                 mov     eax, ___security_cookie</span><br><span class=\"line\">.text:0040137B                 xor     eax, ebp</span><br><span class=\"line\">.text:0040137D                 mov     [ebp-4], eax</span><br><span class=\"line\">.text:00401380                 lea     ecx, [ebp-1Ch]  ; 传递this指针</span><br><span class=\"line\">.text:00401383                 call    sub_401220      ; 调用构造函数</span><br><span class=\"line\">.text:00401388                 mov     dword ptr [ebp-20h], 0</span><br><span class=\"line\">.text:0040138F                 lea     ecx, [ebp-1Ch]  ; 传递this指针</span><br><span class=\"line\">.text:00401392                 call    sub_4012A0      ; 调用析构函数</span><br><span class=\"line\">.text:00401397                 mov     eax, [ebp-20h]</span><br><span class=\"line\">.text:0040139A                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:0040139D                 xor     ecx, ebp        ; StackCookie</span><br><span class=\"line\">.text:0040139F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)</span><br><span class=\"line\">.text:004013A4                 mov     esp, ebp</span><br><span class=\"line\">.text:004013A6                 pop     ebp</span><br><span class=\"line\">.text:004013A7                 retn</span><br><span class=\"line\">.text:004013A7 _main           endp</span><br><span class=\"line\"></span><br><span class=\"line\">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char v4; // [esp+4h] [ebp-1Ch] BYREF</span><br><span class=\"line\"></span><br><span class=\"line\">  sub_401220();</span><br><span class=\"line\">  sub_4012A0((char)&amp;v4);</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//构造函数</span><br><span class=\"line\">.text:00401220 ; _DWORD *__thiscall sub_401220(_DWORD *this)</span><br><span class=\"line\">.text:00401220 sub_401220      proc near               ; CODE XREF: _main+13↓p</span><br><span class=\"line\">.text:00401220</span><br><span class=\"line\">.text:00401220 var_10          = byte ptr -10h</span><br><span class=\"line\">.text:00401220 var_C           = dword ptr -0Ch</span><br><span class=\"line\">.text:00401220 var_4           = dword ptr -4</span><br><span class=\"line\">.text:00401220 arg_4           = dword ptr  0Ch</span><br><span class=\"line\">.text:00401220</span><br><span class=\"line\">.text:00401220 ; FUNCTION CHUNK AT .text:00402070 SIZE 00000008 BYTES</span><br><span class=\"line\">.text:00401220 ; FUNCTION CHUNK AT .text:0040207D SIZE 0000001D BYTES</span><br><span class=\"line\">.text:00401220</span><br><span class=\"line\">.text:00401220 ; __unwind &#123; // SEH_401220</span><br><span class=\"line\">.text:00401220                 push    ebp</span><br><span class=\"line\">.text:00401221                 mov     ebp, esp</span><br><span class=\"line\">.text:00401223                 push    0FFFFFFFFh</span><br><span class=\"line\">.text:00401225                 push    offset SEH_401220</span><br><span class=\"line\">.text:0040122A                 mov     eax, large fs:0</span><br><span class=\"line\">.text:00401230                 push    eax</span><br><span class=\"line\">.text:00401231                 push    ecx</span><br><span class=\"line\">.text:00401232                 mov     eax, ___security_cookie</span><br><span class=\"line\">.text:00401237                 xor     eax, ebp</span><br><span class=\"line\">.text:00401239                 push    eax</span><br><span class=\"line\">.text:0040123A                 lea     eax, [ebp-0Ch]</span><br><span class=\"line\">.text:0040123D                 mov     large fs:0, eax</span><br><span class=\"line\">.text:00401243                 mov     [ebp-10h], ecx</span><br><span class=\"line\">.text:00401246                 mov     ecx, [ebp-10h]  ; 以对象首地址作为this指针</span><br><span class=\"line\">.text:00401249                 call    sub_401080      ; 调用父类Sofa的构造函数</span><br><span class=\"line\">.text:0040124E ;   try &#123;</span><br><span class=\"line\">.text:0040124E                 mov     dword ptr [ebp-4], 0</span><br><span class=\"line\">.text:00401255                 mov     ecx, [ebp-10h]</span><br><span class=\"line\">.text:00401258                 add     ecx, 8          ; 将this指针调整到第二个虚表指针的地址处</span><br><span class=\"line\">.text:0040125B                 call    sub_401150      ; 调用父类Bed的构造函数</span><br><span class=\"line\">.text:00401260                 mov     eax, [ebp-10h]  ; 获取对象的首地址</span><br><span class=\"line\">.text:00401263                 mov     dword ptr [eax], offset ??_7SofaBed@@6B@_0 ; const SofaBed::`vftable&#x27;</span><br><span class=\"line\">.text:00401263                                         ; 设置第一个虚表指针</span><br><span class=\"line\">.text:00401269                 mov     ecx, [ebp-10h]  ; 获取对象的首地址</span><br><span class=\"line\">.text:0040126C                 mov     dword ptr [ecx+8], offset ??_7SofaBed@@6B@ ; const SofaBed::`vftable&#x27;</span><br><span class=\"line\">.text:0040126C                                         ; 设置第二个虚表指针</span><br><span class=\"line\">.text:00401273                 mov     edx, [ebp-10h]</span><br><span class=\"line\">.text:00401276                 mov     dword ptr [edx+14h], 6</span><br><span class=\"line\">.text:00401276 ;   &#125; // starts at 40124E</span><br><span class=\"line\">.text:0040127D                 mov     dword ptr [ebp-4], 0FFFFFFFFh</span><br><span class=\"line\">.text:00401284                 mov     eax, dword ptr [ebp+var_10]</span><br><span class=\"line\">.text:00401287                 mov     ecx, [ebp-0Ch]</span><br><span class=\"line\">.text:0040128A                 mov     large fs:0, ecx</span><br><span class=\"line\">.text:00401291                 pop     ecx</span><br><span class=\"line\">.text:00401292                 mov     esp, ebp</span><br><span class=\"line\">.text:00401294                 pop     ebp</span><br><span class=\"line\">.text:00401295                 retn</span><br><span class=\"line\">.text:00401295 ; &#125; // starts at 401220</span><br><span class=\"line\">.text:00401295 sub_401220      endp</span><br><span class=\"line\"></span><br><span class=\"line\">_DWORD *__thiscall sub_401220(_DWORD *this)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  sub_401080(this);</span><br><span class=\"line\">  sub_401150(this + 2);</span><br><span class=\"line\">  *this = &amp;SofaBed::`vftable&#x27;;</span><br><span class=\"line\">  this[2] = &amp;SofaBed::`vftable&#x27;;</span><br><span class=\"line\">  this[5] = 6;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面代码的子类构造中，根据继承关系的顺序，先调用父类Sofa的构造函数。在调用另一个父类Bed时，并不是直接将对象的首地址作为this指针传递，而是向后调整了父类Sofa的长度，以调整后的地址值作为this指针，最后再调用父类Bed的构造函数。</p>\n<h1 id=\"关于虚表指针\"><a href=\"#关于虚表指针\" class=\"headerlink\" title=\"关于虚表指针\"></a>关于虚表指针</h1><p>因为有了两个父类，所以子类在继承时也将它们的虚表指针一起继承了过来，也就有了两个虚表指针。可见，<strong>在多重继承中，子类虚表指针的个数取决于继承的父类的个数，有几个父类便会出现几个虚表指针（虚基类除外）。</strong></p>\n<p>以父类的虚函数为基础，若子类重写了父类的虚函数，则子类的虚函数表中用重写后的虚函数覆盖掉父类被重写的虚函数，若没重写，则保留父类的虚函数，最后再按顺序填写子类自有的虚函数，若有多个父类，则有多个虚函数表，但只在相对于第一个父类（左数第一个）的虚函数表填写子类自有的虚函数，如下例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#pragma warning(disable : 4996)</span><br><span class=\"line\"></span><br><span class=\"line\">class Sofa &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSofa() &#123;</span><br><span class=\"line\">\t\tcolor = 2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Sofa() &#123; // 沙发类虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;virtual ~Sofa()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getColor() &#123; // 获取沙发颜色</span><br><span class=\"line\">\t\treturn color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sitDown() &#123; // 沙发可以坐下休息</span><br><span class=\"line\">\t\treturn printf(&quot;Sit down and rest your legs\\r\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint color; // 沙发类成员变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//定义床类</span><br><span class=\"line\">class Bed &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tBed() &#123;</span><br><span class=\"line\">\t\tlength = 4;</span><br><span class=\"line\">\t\twidth = 5;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Bed() &#123; //床类虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;virtual ~Bed()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getArea() &#123; //获取床面积</span><br><span class=\"line\">\t\treturn length * width;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sleep() &#123; //床可以用来睡觉</span><br><span class=\"line\">\t\treturn printf(&quot;go to sleep\\r\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint length; //床类成员变量</span><br><span class=\"line\">\tint width;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//子类沙发床定义，派生自Sofa类和Bed类</span><br><span class=\"line\">class SofaBed : public Sofa, public Bed &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSofaBed() &#123;</span><br><span class=\"line\">\t\theight = 6;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~SofaBed() &#123; //沙发床类的虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;virtual ~SofaBed()\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getShape() &#123;</span><br><span class=\"line\">\t\treturn printf(&quot;getShape\\r\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sitDown() &#123; //沙发可以坐下休息</span><br><span class=\"line\">\t\treturn printf(&quot;Sit down on the sofa bed\\r\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sleep() &#123; //床可以用来睡觉</span><br><span class=\"line\">\t\treturn printf(&quot;go to sleep on the sofa bed\\r\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getHeight() &#123;</span><br><span class=\"line\">\t\treturn height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint height;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main(int argc, char* argv[]) &#123;</span><br><span class=\"line\">\tSofaBed sofabed;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，子类SofaBed的内存布局如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&gt;class SofaBed\tsize(24):</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt; 0\t| +--- (base class Sofa)</span><br><span class=\"line\">1&gt; 0\t| | &#123;vfptr&#125;</span><br><span class=\"line\">1&gt; 4\t| | color</span><br><span class=\"line\">1&gt;\t| +---</span><br><span class=\"line\">1&gt; 8\t| +--- (base class Bed)</span><br><span class=\"line\">1&gt; 8\t| | &#123;vfptr&#125;</span><br><span class=\"line\">1&gt;12\t| | length</span><br><span class=\"line\">1&gt;16\t| | width</span><br><span class=\"line\">1&gt;\t| +---</span><br><span class=\"line\">1&gt;20\t| height</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt;SofaBed::$vftable@Sofa@:</span><br><span class=\"line\">1&gt;\t| &amp;SofaBed_meta</span><br><span class=\"line\">1&gt;\t|  0</span><br><span class=\"line\">1&gt; 0\t| &amp;SofaBed::&#123;dtor&#125;</span><br><span class=\"line\">1&gt; 1\t| &amp;Sofa::getColor</span><br><span class=\"line\">1&gt; 2\t| &amp;SofaBed::sitDown</span><br><span class=\"line\">1&gt; 3\t| &amp;SofaBed::getShape</span><br><span class=\"line\">1&gt; 4\t| &amp;SofaBed::getHeight</span><br><span class=\"line\">1&gt;SofaBed::$vftable@Bed@:</span><br><span class=\"line\">1&gt;\t| -8</span><br><span class=\"line\">1&gt; 0\t| &amp;thunk: this-=8; goto SofaBed::&#123;dtor&#125;</span><br><span class=\"line\">1&gt; 1\t| &amp;Bed::getArea</span><br><span class=\"line\">1&gt; 2\t| &amp;SofaBed::sleep</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"多重继承子类对象转换为父类指针\"><a href=\"#多重继承子类对象转换为父类指针\" class=\"headerlink\" title=\"多重继承子类对象转换为父类指针\"></a>多重继承子类对象转换为父类指针</h1><p>虚表指针在将子类对象转换成父类指针时使用，每个虚表指针对应着一个父类</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(disable : 4996)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sofa</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Sofa</span>() &#123;</span><br><span class=\"line\">\t\tcolor = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Sofa</span>() &#123; <span class=\"comment\">// 沙发类虚析构函数</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;virtual ~Sofa()\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">getColor</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 获取沙发颜色</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">sitDown</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 沙发可以坐下休息</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Sit down and rest your legs\\r\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> color; <span class=\"comment\">// 沙发类成员变量</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//定义床类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bed</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Bed</span>() &#123;</span><br><span class=\"line\">\t\tlength = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\twidth = <span class=\"number\">5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Bed</span>() &#123; <span class=\"comment\">//床类虚析构函数</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;virtual ~Bed()\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">getArea</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//获取床面积</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> length * width;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">sleep</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//床可以用来睡觉</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;go to sleep\\r\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> length; <span class=\"comment\">//床类成员变量</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> width;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//子类沙发床定义，派生自Sofa类和Bed类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SofaBed</span> : <span class=\"keyword\">public</span> Sofa, <span class=\"keyword\">public</span> Bed &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">SofaBed</span>() &#123;</span><br><span class=\"line\">\t\theight = <span class=\"number\">6</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~<span class=\"built_in\">SofaBed</span>() &#123; <span class=\"comment\">//沙发床类的虚析构函数</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;virtual ~SofaBed()\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">sitDown</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//沙发可以坐下休息</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Sit down on the sofa bed\\r\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">sleep</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//床可以用来睡觉</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;go to sleep on the sofa bed\\r\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">getHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> height;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">\tSofaBed sofabed;</span><br><span class=\"line\">\tSofa* sofa = &amp;sofabed;</span><br><span class=\"line\">\tBed* bed = &amp;sofabed;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ida汇编及伪代码视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401370 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class=\"line\">.text:00401370 _main           proc near               ; CODE XREF: __scrt_common_main_seh(void)+F5↓p</span><br><span class=\"line\">.text:00401370</span><br><span class=\"line\">.text:00401370 var_2C          = dword ptr -2Ch</span><br><span class=\"line\">.text:00401370 var_28          = dword ptr -28h</span><br><span class=\"line\">.text:00401370 var_24          = dword ptr -24h</span><br><span class=\"line\">.text:00401370 var_20          = dword ptr -20h</span><br><span class=\"line\">.text:00401370 var_1C          = byte ptr -1Ch</span><br><span class=\"line\">.text:00401370 var_4           = dword ptr -4</span><br><span class=\"line\">.text:00401370 argc            = dword ptr  8</span><br><span class=\"line\">.text:00401370 argv            = dword ptr  0Ch</span><br><span class=\"line\">.text:00401370 envp            = dword ptr  10h</span><br><span class=\"line\">.text:00401370</span><br><span class=\"line\">.text:00401370                 push    ebp</span><br><span class=\"line\">.text:00401371                 mov     ebp, esp</span><br><span class=\"line\">.text:00401373                 sub     esp, 2Ch</span><br><span class=\"line\">.text:00401376                 mov     eax, ___security_cookie</span><br><span class=\"line\">.text:0040137B                 xor     eax, ebp</span><br><span class=\"line\">.text:0040137D                 mov     [ebp-4], eax</span><br><span class=\"line\">.text:00401380                 lea     ecx, [ebp-1Ch]  ; 传递this指针</span><br><span class=\"line\">.text:00401383                 call    sub_401220      ; 调用构造函数</span><br><span class=\"line\">.text:00401388                 lea     eax, [ebp-1Ch]</span><br><span class=\"line\">.text:0040138B                 mov     [ebp-28h], eax  ; 直接以首地址转换为父类指针，sofa=&amp;sofabed</span><br><span class=\"line\">.text:0040138E                 lea     ecx, [ebp-1Ch]</span><br><span class=\"line\">.text:00401391                 test    ecx, ecx</span><br><span class=\"line\">.text:00401393                 jz      short loc_4013A0 ; 检查对象首地址</span><br><span class=\"line\">.text:00401395                 lea     edx, [ebp-1Ch]  ; edx=this</span><br><span class=\"line\">.text:00401398                 add     edx, 8</span><br><span class=\"line\">.text:0040139B                 mov     [ebp-20h], edx  ; 即this+8， 调整为Bed的指针，bed=&amp;sofabed</span><br><span class=\"line\">.text:0040139E                 jmp     short loc_4013A7</span><br><span class=\"line\">.text:004013A0 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:004013A0</span><br><span class=\"line\">.text:004013A0 loc_4013A0:                             ; CODE XREF: _main+23↑j</span><br><span class=\"line\">.text:004013A0                 mov     dword ptr [ebp-20h], 0</span><br><span class=\"line\">.text:004013A7</span><br><span class=\"line\">.text:004013A7 loc_4013A7:                             ; CODE XREF: _main+2E↑j</span><br><span class=\"line\">.text:004013A7                 mov     eax, [ebp-20h]</span><br><span class=\"line\">.text:004013AA                 mov     [ebp-2Ch], eax</span><br><span class=\"line\">.text:004013AD                 mov     dword ptr [ebp-24h], 0</span><br><span class=\"line\">.text:004013B4                 lea     ecx, [ebp-1Ch]  ; 传递this指针</span><br><span class=\"line\">.text:004013B7                 call    sub_4012A0      ; 调用析构函数</span><br><span class=\"line\">.text:004013BC                 mov     eax, [ebp-24h]</span><br><span class=\"line\">.text:004013BF                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:004013C2                 xor     ecx, ebp        ; StackCookie</span><br><span class=\"line\">.text:004013C4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)</span><br><span class=\"line\">.text:004013C9                 mov     esp, ebp</span><br><span class=\"line\">.text:004013CB                 pop     ebp</span><br><span class=\"line\">.text:004013CC                 retn</span><br><span class=\"line\">.text:004013CC _main           endp</span><br><span class=\"line\"></span><br><span class=\"line\">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char v4; // [esp+10h] [ebp-1Ch] BYREF</span><br><span class=\"line\"></span><br><span class=\"line\">  sub_401220();</span><br><span class=\"line\">  sub_4012A0((char)&amp;v4);</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，在转换Bed指针时，会调整首地址并跳过第一个父类占用的空间。这样一来，当使用父类Bed的指针访问Bed中实现的虚函数时，就不会错误地寻址到继承自Sofa类的成员变量了。</p>\n<h1 id=\"多重继承的类对象析构函数\"><a href=\"#多重继承的类对象析构函数\" class=\"headerlink\" title=\"多重继承的类对象析构函数\"></a>多重继承的类对象析构函数</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#pragma warning(disable : 4996)</span><br><span class=\"line\"></span><br><span class=\"line\">class Sofa &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSofa() &#123;</span><br><span class=\"line\">\t\tcolor = 2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Sofa() &#123; // 沙发类虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;virtual ~Sofa()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getColor() &#123; // 获取沙发颜色</span><br><span class=\"line\">\t\treturn color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sitDown() &#123; // 沙发可以坐下休息</span><br><span class=\"line\">\t\treturn printf(&quot;Sit down and rest your legs\\r\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint color; // 沙发类成员变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//定义床类</span><br><span class=\"line\">class Bed &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tBed() &#123;</span><br><span class=\"line\">\t\tlength = 4;</span><br><span class=\"line\">\t\twidth = 5;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Bed() &#123; //床类虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;virtual ~Bed()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getArea() &#123; //获取床面积</span><br><span class=\"line\">\t\treturn length * width;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sleep() &#123; //床可以用来睡觉</span><br><span class=\"line\">\t\treturn printf(&quot;go to sleep\\r\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint length; //床类成员变量</span><br><span class=\"line\">\tint width;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//子类沙发床定义，派生自Sofa类和Bed类</span><br><span class=\"line\">class SofaBed : public Sofa, public Bed &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSofaBed() &#123;</span><br><span class=\"line\">\t\theight = 6;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~SofaBed() &#123; //沙发床类的虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;virtual ~SofaBed()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sitDown() &#123; //沙发可以坐下休息</span><br><span class=\"line\">\t\treturn printf(&quot;Sit down on the sofa bed\\r\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sleep() &#123; //床可以用来睡觉</span><br><span class=\"line\">\t\treturn printf(&quot;go to sleep on the sofa bed\\r\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getHeight() &#123;</span><br><span class=\"line\">\t\treturn height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint height;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main(int argc, char* argv[]) &#123;</span><br><span class=\"line\">\tSofaBed sofabed;</span><br><span class=\"line\">\tSofa* sofa = &amp;sofabed;</span><br><span class=\"line\">\tBed* bed = &amp;sofabed;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>析构函数IDA汇编及伪代码视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:004012A0 ; int __fastcall sub_4012A0(_DWORD *)</span><br><span class=\"line\">.text:004012A0 sub_4012A0      proc near               ; CODE XREF: sub_401340+A↓p</span><br><span class=\"line\">.text:004012A0                                         ; _main+47↓p</span><br><span class=\"line\">.text:004012A0</span><br><span class=\"line\">.text:004012A0 var_4           = byte ptr -4</span><br><span class=\"line\">.text:004012A0</span><br><span class=\"line\">.text:004012A0                 push    ebp             ; 析构函数</span><br><span class=\"line\">.text:004012A1                 mov     ebp, esp</span><br><span class=\"line\">.text:004012A3                 push    ecx             ; char</span><br><span class=\"line\">.text:004012A4                 mov     [ebp-4], ecx</span><br><span class=\"line\">.text:004012A7                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:004012AA                 mov     dword ptr [eax], offset ??_7SofaBed@@6B@_0 ; const SofaBed::`vftable&#x27;</span><br><span class=\"line\">.text:004012AA                                         ; 将第一个虚表设置为SofaBed的虚表</span><br><span class=\"line\">.text:004012B0                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:004012B3                 mov     dword ptr [ecx+8], offset ??_7SofaBed@@6B@ ; const SofaBed::`vftable&#x27;</span><br><span class=\"line\">.text:004012B3                                         ; 将第二个虚表设置为SofaBed的虚表</span><br><span class=\"line\">.text:004012BA                 push    offset aVirtualSofabed ; &quot;virtual ~SofaBed()\\n&quot;</span><br><span class=\"line\">.text:004012BF                 call    printf</span><br><span class=\"line\">.text:004012C4                 add     esp, 4</span><br><span class=\"line\">.text:004012C7                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:004012CA                 add     ecx, 8          ; 调整this指针到Bed父类，this+8</span><br><span class=\"line\">.text:004012CD                 call    sub_401180      ; 调用父类Bed的析构函数</span><br><span class=\"line\">.text:004012D2                 mov     ecx, [ebp-4]    ; this指针，无需调整</span><br><span class=\"line\">.text:004012D5                 call    sub_4010B0      ; 调用父类Sofa的析构函数</span><br><span class=\"line\">.text:004012DA                 mov     esp, ebp</span><br><span class=\"line\">.text:004012DC                 pop     ebp</span><br><span class=\"line\">.text:004012DD                 retn</span><br><span class=\"line\">.text:004012DD sub_4012A0      endp</span><br><span class=\"line\"></span><br><span class=\"line\">int __fastcall sub_4012A0(_DWORD *a1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char v2; // [esp+0h] [ebp-4h]</span><br><span class=\"line\"></span><br><span class=\"line\">  *a1 = &amp;SofaBed::`vftable&#x27;;</span><br><span class=\"line\">  a1[2] = &amp;SofaBed::`vftable&#x27;;</span><br><span class=\"line\">  printf(&quot;virtual ~SofaBed()\\n&quot;, (char)a1);</span><br><span class=\"line\">  sub_401180(v2 + 8);</span><br><span class=\"line\">  return sub_4010B0(v2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码演示了对象SofaBed的析构过程。因为具有多个同级父类（多个同时继承的父类），所以在子类中产生了多个虚表指针。在对父类进行析构时，需要设置this指针，用于调用父类的析构函数。因为具有多个父类，所以在析构的过程中调用各个父类的析构函数时，传递的首地址将有所不同，编译器会根据每个父类在对象中占用的空间位置，相应地传入各个父类部分的首地址作为this指针。</p>\n<h1 id=\"单继承类与多重继承类的特征\"><a href=\"#单继承类与多重继承类的特征\" class=\"headerlink\" title=\"单继承类与多重继承类的特征\"></a>单继承类与多重继承类的特征</h1><p>前面讲解了多重继承中子类对象的生成与销毁过程以及在内存中的分布情况，对比单继承类，两者特征总结如下:</p>\n<h2 id=\"1-单继承类\"><a href=\"#1-单继承类\" class=\"headerlink\" title=\"1. 单继承类\"></a><strong>1.</strong> 单继承类</h2><ul>\n<li><p>在类对象占用的内存空间中，只保存一份虚表指针。</p>\n</li>\n<li><p>因为只有一个虚表指针，所以只有一个虚表。</p>\n</li>\n<li><p>虚表中各项保存了类中各虚函数的首地址。</p>\n</li>\n<li><p>构造时先构造父类，再构造自身，并且只调用一次父类构造函数。</p>\n</li>\n<li><p>析构时先析构自身，再析构父类，并且只调用一次父类析构函数。</p>\n</li>\n</ul>\n<h2 id=\"2-多重继承类\"><a href=\"#2-多重继承类\" class=\"headerlink\" title=\"2. 多重继承类\"></a><strong>2.</strong> 多重继承类</h2><ul>\n<li><p>在类对象占用内存空间中，根据继承父类（有虚函数）个数保存对应的虚表指针。</p>\n</li>\n<li><p>根据保存的虚表指针的个数，产生相应个数的虚表。</p>\n</li>\n<li><p>转换父类指针时，需要调整到对象的首地址。</p>\n</li>\n<li><p>构造时需要调用多个父类构造函数。</p>\n</li>\n<li><p>构造时先构造继承列表中的第一个父类，然后依次调用到最后一个继承的父类构造函数。</p>\n</li>\n<li><p>析构时先析构自身，然后以构造函数相反的顺序调用所有父类的析构函数。</p>\n</li>\n</ul>\n<p>当对象作为成员时，整个类对象的内存结构和多重继承相似。当类中无虚函数时，整个类对象内存结构和多重继承完全一样，可酌情还原。当父类或成员对象存在虚函数，通过观察虚表指针的位置和构造、析构函数中填写虚表指针的数目、顺序及目标地址，还原继承或成员关系。</p>\n<p>在对象模型的还原过程中，可根据以上特性识别继承关系。对于有虚函数的情况，可利用虚表的初始化，使用IDA中的引用参考进行识别还原。</p>\n","text":"当子类拥有多个父类（如类C继承自类A同时也继承自类B）时，便构成了多重继承关系。在多重继承的情况下，子类继承的父类变为多个，但其结构与单一继承相似。 多重继承类...","permalink":"/post/C++逆向——多重继承","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[],"tags":[{"name":"c++逆向","slug":"c-逆向","count":9,"path":"api/tags/c-逆向.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">多重继承类的定义</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E8%99%9A%E8%A1%A8%E6%8C%87%E9%92%88\"><span class=\"toc-text\">关于虚表指针</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%88%B6%E7%B1%BB%E6%8C%87%E9%92%88\"><span class=\"toc-text\">多重继承子类对象转换为父类指针</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E7%9A%84%E7%B1%BB%E5%AF%B9%E8%B1%A1%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">多重继承的类对象析构函数</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8D%95%E7%BB%A7%E6%89%BF%E7%B1%BB%E4%B8%8E%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E7%B1%BB%E7%9A%84%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">单继承类与多重继承类的特征</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%8D%95%E7%BB%A7%E6%89%BF%E7%B1%BB\"><span class=\"toc-text\">1. 单继承类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E7%B1%BB\"><span class=\"toc-text\">2. 多重继承类</span></a></li></ol></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C++逆向——抽象类与虚继承","uid":"0eecfedfebb040c00fe24e77372fb210","slug":"C++逆向——抽象类与虚继承","date":"2023-03-03T08:12:53.000Z","updated":"2025-06-07T18:34:32.830Z","comments":true,"path":"api/articles/C++逆向——抽象类与虚继承.json","keywords":null,"cover":[],"text":"抽象类在编码过程中，抽象类的定义需要配合虚函数使用。在虚函数的声明结尾处添加“=0”，这种虚函数被称为纯虚函数。纯虚函数是一个没有实现只有声明的函数，它的存在就...","permalink":"/post/C++逆向——抽象类与虚继承","photos":[],"count_time":{"symbolsCount":"48k","symbolsTime":"44 mins."},"categories":[],"tags":[{"name":"c++逆向","slug":"c-逆向","count":9,"path":"api/tags/c-逆向.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"C++逆向——识别类和类之间的关系","uid":"d75c57bec22710c7148f63c849522585","slug":"C++逆向——识别类和类之间的关系","date":"2023-02-15T12:11:27.000Z","updated":"2025-06-07T18:22:43.367Z","comments":true,"path":"api/articles/C++逆向——识别类和类之间的关系.json","keywords":null,"cover":[],"text":"在C++的继承关系中，子类具备父类所有成员数据和成员函数。子 类 对 象 可 以 直 接 使 用 父 类 中 声 明 为 公 有 （ public ） 和 保 ...","permalink":"/post/C++逆向——识别类和类之间的关系","photos":[],"count_time":{"symbolsCount":"70k","symbolsTime":"1:04"},"categories":[],"tags":[{"name":"c++逆向","slug":"c-逆向","count":9,"path":"api/tags/c-逆向.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}