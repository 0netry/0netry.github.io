{"title":"Windows静态反调试技术（一）","uid":"cfe529b139f3ec3d5a0094d71b2823b9","slug":"Windows静态反调试技术（一）","date":"2022-06-20T13:12:54.000Z","updated":"2025-06-09T21:41:11.315Z","comments":true,"path":"api/articles/Windows静态反调试技术（一）.json","keywords":null,"cover":[],"content":"<h1 id=\"PEB\"><a href=\"#PEB\" class=\"headerlink\" title=\"PEB\"></a>PEB</h1><p>利用PEB结构体信息可以判断当前进程是否处于被调试状态。回顾下PEB结构体的成员：</p>\n<p><strong>Win7 x86中：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; dt _PEB</span><br><span class=\"line\">ntdll!_PEB</span><br><span class=\"line\">   +0x000 InheritedAddressSpace : UChar</span><br><span class=\"line\">   +0x001 ReadImageFileExecOptions : UChar</span><br><span class=\"line\">   +0x002 BeingDebugged    : UChar</span><br><span class=\"line\">   +0x003 BitField         : UChar</span><br><span class=\"line\">   +0x003 ImageUsesLargePages : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x003 IsProtectedProcess : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x003 IsLegacyProcess  : Pos 2, 1 Bit</span><br><span class=\"line\">   +0x003 IsImageDynamicallyRelocated : Pos 3, 1 Bit</span><br><span class=\"line\">   +0x003 SkipPatchingUser32Forwarders : Pos 4, 1 Bit</span><br><span class=\"line\">   +0x003 SpareBits        : Pos 5, 3 Bits</span><br><span class=\"line\">   +0x004 Mutant           : Ptr32 Void</span><br><span class=\"line\">   +0x008 ImageBaseAddress : Ptr32 Void</span><br><span class=\"line\">   +0x00c Ldr              : Ptr32 _PEB_LDR_DATA</span><br><span class=\"line\">   +0x010 ProcessParameters : Ptr32 _RTL_USER_PROCESS_PARAMETERS</span><br><span class=\"line\">   +0x014 SubSystemData    : Ptr32 Void</span><br><span class=\"line\">   +0x018 ProcessHeap      : Ptr32 Void</span><br><span class=\"line\">   +0x01c FastPebLock      : Ptr32 _RTL_CRITICAL_SECTION</span><br><span class=\"line\">   +0x020 AtlThunkSListPtr : Ptr32 Void</span><br><span class=\"line\">   +0x024 IFEOKey          : Ptr32 Void</span><br><span class=\"line\">   +0x028 CrossProcessFlags : Uint4B</span><br><span class=\"line\">   +0x028 ProcessInJob     : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x028 ProcessInitializing : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x028 ProcessUsingVEH  : Pos 2, 1 Bit</span><br><span class=\"line\">   +0x028 ProcessUsingVCH  : Pos 3, 1 Bit</span><br><span class=\"line\">   +0x028 ProcessUsingFTH  : Pos 4, 1 Bit</span><br><span class=\"line\">   +0x028 ReservedBits0    : Pos 5, 27 Bits</span><br><span class=\"line\">   +0x02c KernelCallbackTable : Ptr32 Void</span><br><span class=\"line\">   +0x02c UserSharedInfoPtr : Ptr32 Void</span><br><span class=\"line\">   +0x030 SystemReserved   : [1] Uint4B</span><br><span class=\"line\">   +0x034 AtlThunkSListPtr32 : Uint4B</span><br><span class=\"line\">   +0x038 ApiSetMap        : Ptr32 Void</span><br><span class=\"line\">   +0x03c TlsExpansionCounter : Uint4B</span><br><span class=\"line\">   +0x040 TlsBitmap        : Ptr32 Void</span><br><span class=\"line\">   +0x044 TlsBitmapBits    : [2] Uint4B</span><br><span class=\"line\">   +0x04c ReadOnlySharedMemoryBase : Ptr32 Void</span><br><span class=\"line\">   +0x050 HotpatchInformation : Ptr32 Void</span><br><span class=\"line\">   +0x054 ReadOnlyStaticServerData : Ptr32 Ptr32 Void</span><br><span class=\"line\">   +0x058 AnsiCodePageData : Ptr32 Void</span><br><span class=\"line\">   +0x05c OemCodePageData  : Ptr32 Void</span><br><span class=\"line\">   +0x060 UnicodeCaseTableData : Ptr32 Void</span><br><span class=\"line\">   +0x064 NumberOfProcessors : Uint4B</span><br><span class=\"line\">   +0x068 NtGlobalFlag     : Uint4B</span><br><span class=\"line\">   +0x070 CriticalSectionTimeout : _LARGE_INTEGER</span><br><span class=\"line\">   +0x078 HeapSegmentReserve : Uint4B</span><br><span class=\"line\">   +0x07c HeapSegmentCommit : Uint4B</span><br><span class=\"line\">   +0x080 HeapDeCommitTotalFreeThreshold : Uint4B</span><br><span class=\"line\">   +0x084 HeapDeCommitFreeBlockThreshold : Uint4B</span><br><span class=\"line\">   +0x088 NumberOfHeaps    : Uint4B</span><br><span class=\"line\">   +0x08c MaximumNumberOfHeaps : Uint4B</span><br><span class=\"line\">   +0x090 ProcessHeaps     : Ptr32 Ptr32 Void</span><br><span class=\"line\">   +0x094 GdiSharedHandleTable : Ptr32 Void</span><br><span class=\"line\">   +0x098 ProcessStarterHelper : Ptr32 Void</span><br><span class=\"line\">   +0x09c GdiDCAttributeList : Uint4B</span><br><span class=\"line\">   +0x0a0 LoaderLock       : Ptr32 _RTL_CRITICAL_SECTION</span><br><span class=\"line\">   +0x0a4 OSMajorVersion   : Uint4B</span><br><span class=\"line\">   +0x0a8 OSMinorVersion   : Uint4B</span><br><span class=\"line\">   +0x0ac OSBuildNumber    : Uint2B</span><br><span class=\"line\">   +0x0ae OSCSDVersion     : Uint2B</span><br><span class=\"line\">   +0x0b0 OSPlatformId     : Uint4B</span><br><span class=\"line\">   +0x0b4 ImageSubsystem   : Uint4B</span><br><span class=\"line\">   +0x0b8 ImageSubsystemMajorVersion : Uint4B</span><br><span class=\"line\">   +0x0bc ImageSubsystemMinorVersion : Uint4B</span><br><span class=\"line\">   +0x0c0 ActiveProcessAffinityMask : Uint4B</span><br><span class=\"line\">   +0x0c4 GdiHandleBuffer  : [34] Uint4B</span><br><span class=\"line\">   +0x14c PostProcessInitRoutine : Ptr32     void </span><br><span class=\"line\">   +0x150 TlsExpansionBitmap : Ptr32 Void</span><br><span class=\"line\">   +0x154 TlsExpansionBitmapBits : [32] Uint4B</span><br><span class=\"line\">   +0x1d4 SessionId        : Uint4B</span><br><span class=\"line\">   +0x1d8 AppCompatFlags   : _ULARGE_INTEGER</span><br><span class=\"line\">   +0x1e0 AppCompatFlagsUser : _ULARGE_INTEGER</span><br><span class=\"line\">   +0x1e8 pShimData        : Ptr32 Void</span><br><span class=\"line\">   +0x1ec AppCompatInfo    : Ptr32 Void</span><br><span class=\"line\">   +0x1f0 CSDVersion       : _UNICODE_STRING</span><br><span class=\"line\">   +0x1f8 ActivationContextData : Ptr32 _ACTIVATION_CONTEXT_DATA</span><br><span class=\"line\">   +0x1fc ProcessAssemblyStorageMap : Ptr32 _ASSEMBLY_STORAGE_MAP</span><br><span class=\"line\">   +0x200 SystemDefaultActivationContextData : Ptr32 _ACTIVATION_CONTEXT_DATA</span><br><span class=\"line\">   +0x204 SystemAssemblyStorageMap : Ptr32 _ASSEMBLY_STORAGE_MAP</span><br><span class=\"line\">   +0x208 MinimumStackCommit : Uint4B</span><br><span class=\"line\">   +0x20c FlsCallback      : Ptr32 _FLS_CALLBACK_INFO</span><br><span class=\"line\">   +0x210 FlsListHead      : _LIST_ENTRY</span><br><span class=\"line\">   +0x218 FlsBitmap        : Ptr32 Void</span><br><span class=\"line\">   +0x21c FlsBitmapBits    : [4] Uint4B</span><br><span class=\"line\">   +0x22c FlsHighIndex     : Uint4B</span><br><span class=\"line\">   +0x230 WerRegistrationData : Ptr32 Void</span><br><span class=\"line\">   +0x234 WerShipAssertPtr : Ptr32 Void</span><br><span class=\"line\">   +0x238 pContextData     : Ptr32 Void</span><br><span class=\"line\">   +0x23c pImageHeaderHash : Ptr32 Void</span><br><span class=\"line\">   +0x240 TracingFlags     : Uint4B</span><br><span class=\"line\">   +0x240 HeapTracingEnabled : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x240 CritSecTracingEnabled : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x240 SpareTracingBits : Pos 2, 30 Bits</span><br></pre></td></tr></table></figure>\n\n<p><strong>Win10 x64中：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kd&gt; dt ntdll!_PEB</span><br><span class=\"line\">   +0x000 InheritedAddressSpace : UChar</span><br><span class=\"line\">   +0x001 ReadImageFileExecOptions : UChar</span><br><span class=\"line\">   +0x002 BeingDebugged    : UChar</span><br><span class=\"line\">   +0x003 BitField         : UChar</span><br><span class=\"line\">   +0x003 ImageUsesLargePages : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x003 IsProtectedProcess : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x003 IsImageDynamicallyRelocated : Pos 2, 1 Bit</span><br><span class=\"line\">   +0x003 SkipPatchingUser32Forwarders : Pos 3, 1 Bit</span><br><span class=\"line\">   +0x003 IsPackagedProcess : Pos 4, 1 Bit</span><br><span class=\"line\">   +0x003 IsAppContainer   : Pos 5, 1 Bit</span><br><span class=\"line\">   +0x003 IsProtectedProcessLight : Pos 6, 1 Bit</span><br><span class=\"line\">   +0x003 IsLongPathAwareProcess : Pos 7, 1 Bit</span><br><span class=\"line\">   +0x004 Padding0         : [4] UChar</span><br><span class=\"line\">   +0x008 Mutant           : Ptr64 Void</span><br><span class=\"line\">   +0x010 ImageBaseAddress : Ptr64 Void</span><br><span class=\"line\">   +0x018 Ldr              : Ptr64 _PEB_LDR_DATA</span><br><span class=\"line\">   +0x020 ProcessParameters : Ptr64 _RTL_USER_PROCESS_PARAMETERS</span><br><span class=\"line\">   +0x028 SubSystemData    : Ptr64 Void</span><br><span class=\"line\">   +0x030 ProcessHeap      : Ptr64 Void</span><br><span class=\"line\">   +0x038 FastPebLock      : Ptr64 _RTL_CRITICAL_SECTION</span><br><span class=\"line\">   +0x040 AtlThunkSListPtr : Ptr64 _SLIST_HEADER</span><br><span class=\"line\">   +0x048 IFEOKey          : Ptr64 Void</span><br><span class=\"line\">   +0x050 CrossProcessFlags : Uint4B</span><br><span class=\"line\">   +0x050 ProcessInJob     : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessInitializing : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessUsingVEH  : Pos 2, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessUsingVCH  : Pos 3, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessUsingFTH  : Pos 4, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessPreviouslyThrottled : Pos 5, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessCurrentlyThrottled : Pos 6, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessImagesHotPatched : Pos 7, 1 Bit</span><br><span class=\"line\">   +0x050 ReservedBits0    : Pos 8, 24 Bits</span><br><span class=\"line\">   +0x054 Padding1         : [4] UChar</span><br><span class=\"line\">   +0x058 KernelCallbackTable : Ptr64 Void</span><br><span class=\"line\">   +0x058 UserSharedInfoPtr : Ptr64 Void</span><br><span class=\"line\">   +0x060 SystemReserved   : Uint4B</span><br><span class=\"line\">   +0x064 AtlThunkSListPtr32 : Uint4B</span><br><span class=\"line\">   +0x068 ApiSetMap        : Ptr64 Void</span><br><span class=\"line\">   +0x070 TlsExpansionCounter : Uint4B</span><br><span class=\"line\">   +0x074 Padding2         : [4] UChar</span><br><span class=\"line\">   +0x078 TlsBitmap        : Ptr64 Void</span><br><span class=\"line\">   +0x080 TlsBitmapBits    : [2] Uint4B</span><br><span class=\"line\">   +0x088 ReadOnlySharedMemoryBase : Ptr64 Void</span><br><span class=\"line\">   +0x090 SharedData       : Ptr64 Void</span><br><span class=\"line\">   +0x098 ReadOnlyStaticServerData : Ptr64 Ptr64 Void</span><br><span class=\"line\">   +0x0a0 AnsiCodePageData : Ptr64 Void</span><br><span class=\"line\">   +0x0a8 OemCodePageData  : Ptr64 Void</span><br><span class=\"line\">   +0x0b0 UnicodeCaseTableData : Ptr64 Void</span><br><span class=\"line\">   +0x0b8 NumberOfProcessors : Uint4B</span><br><span class=\"line\">   +0x0bc NtGlobalFlag     : Uint4B</span><br><span class=\"line\">   +0x0c0 CriticalSectionTimeout : _LARGE_INTEGER</span><br><span class=\"line\">   +0x0c8 HeapSegmentReserve : Uint8B</span><br><span class=\"line\">   +0x0d0 HeapSegmentCommit : Uint8B</span><br><span class=\"line\">   +0x0d8 HeapDeCommitTotalFreeThreshold : Uint8B</span><br><span class=\"line\">   +0x0e0 HeapDeCommitFreeBlockThreshold : Uint8B</span><br><span class=\"line\">   +0x0e8 NumberOfHeaps    : Uint4B</span><br><span class=\"line\">   +0x0ec MaximumNumberOfHeaps : Uint4B</span><br><span class=\"line\">   +0x0f0 ProcessHeaps     : Ptr64 Ptr64 Void</span><br><span class=\"line\">   +0x0f8 GdiSharedHandleTable : Ptr64 Void</span><br><span class=\"line\">   +0x100 ProcessStarterHelper : Ptr64 Void</span><br><span class=\"line\">   +0x108 GdiDCAttributeList : Uint4B</span><br><span class=\"line\">   +0x10c Padding3         : [4] UChar</span><br><span class=\"line\">   +0x110 LoaderLock       : Ptr64 _RTL_CRITICAL_SECTION</span><br><span class=\"line\">   +0x118 OSMajorVersion   : Uint4B</span><br><span class=\"line\">   +0x11c OSMinorVersion   : Uint4B</span><br><span class=\"line\">   +0x120 OSBuildNumber    : Uint2B</span><br><span class=\"line\">   +0x122 OSCSDVersion     : Uint2B</span><br><span class=\"line\">   +0x124 OSPlatformId     : Uint4B</span><br><span class=\"line\">   +0x128 ImageSubsystem   : Uint4B</span><br><span class=\"line\">   +0x12c ImageSubsystemMajorVersion : Uint4B</span><br><span class=\"line\">   +0x130 ImageSubsystemMinorVersion : Uint4B</span><br><span class=\"line\">   +0x134 Padding4         : [4] UChar</span><br><span class=\"line\">   +0x138 ActiveProcessAffinityMask : Uint8B</span><br><span class=\"line\">   +0x140 GdiHandleBuffer  : [60] Uint4B</span><br><span class=\"line\">   +0x230 PostProcessInitRoutine : Ptr64     void </span><br><span class=\"line\">   +0x238 TlsExpansionBitmap : Ptr64 Void</span><br><span class=\"line\">   +0x240 TlsExpansionBitmapBits : [32] Uint4B</span><br><span class=\"line\">   +0x2c0 SessionId        : Uint4B</span><br><span class=\"line\">   +0x2c4 Padding5         : [4] UChar</span><br><span class=\"line\">   +0x2c8 AppCompatFlags   : _ULARGE_INTEGER</span><br><span class=\"line\">   +0x2d0 AppCompatFlagsUser : _ULARGE_INTEGER</span><br><span class=\"line\">   +0x2d8 pShimData        : Ptr64 Void</span><br><span class=\"line\">   +0x2e0 AppCompatInfo    : Ptr64 Void</span><br><span class=\"line\">   +0x2e8 CSDVersion       : _UNICODE_STRING</span><br><span class=\"line\">   +0x2f8 ActivationContextData : Ptr64 _ACTIVATION_CONTEXT_DATA</span><br><span class=\"line\">   +0x300 ProcessAssemblyStorageMap : Ptr64 _ASSEMBLY_STORAGE_MAP</span><br><span class=\"line\">   +0x308 SystemDefaultActivationContextData : Ptr64 _ACTIVATION_CONTEXT_DATA</span><br><span class=\"line\">   +0x310 SystemAssemblyStorageMap : Ptr64 _ASSEMBLY_STORAGE_MAP</span><br><span class=\"line\">   +0x318 MinimumStackCommit : Uint8B</span><br><span class=\"line\">   +0x320 SparePointers    : [4] Ptr64 Void</span><br><span class=\"line\">   +0x340 SpareUlongs      : [5] Uint4B</span><br><span class=\"line\">   +0x358 WerRegistrationData : Ptr64 Void</span><br><span class=\"line\">   +0x360 WerShipAssertPtr : Ptr64 Void</span><br><span class=\"line\">   +0x368 pUnused          : Ptr64 Void</span><br><span class=\"line\">   +0x370 pImageHeaderHash : Ptr64 Void</span><br><span class=\"line\">   +0x378 TracingFlags     : Uint4B</span><br><span class=\"line\">   +0x378 HeapTracingEnabled : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x378 CritSecTracingEnabled : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x378 LibLoaderTracingEnabled : Pos 2, 1 Bit</span><br><span class=\"line\">   +0x378 SpareTracingBits : Pos 3, 29 Bits</span><br><span class=\"line\">   +0x37c Padding6         : [4] UChar</span><br><span class=\"line\">   +0x380 CsrServerReadOnlySharedMemoryBase : Uint8B</span><br><span class=\"line\">   +0x388 TppWorkerpListLock : Uint8B</span><br><span class=\"line\">   +0x390 TppWorkerpList   : _LIST_ENTRY</span><br><span class=\"line\">   +0x3a0 WaitOnAddressHashTable : [128] Ptr64 Void</span><br><span class=\"line\">   +0x7a0 TelemetryCoverageHeader : Ptr64 Void</span><br><span class=\"line\">   +0x7a8 CloudFileFlags   : Uint4B</span><br><span class=\"line\">   +0x7ac CloudFileDiagFlags : Uint4B</span><br><span class=\"line\">   +0x7b0 PlaceholderCompatibilityMode : Char</span><br><span class=\"line\">   +0x7b1 PlaceholderCompatibilityModeReserved : [7] Char</span><br><span class=\"line\">   +0x7b8 LeapSecondData   : Ptr64 _LEAP_SECOND_DATA</span><br><span class=\"line\">   +0x7c0 LeapSecondFlags  : Uint4B</span><br><span class=\"line\">   +0x7c0 SixtySecondEnabled : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x7c0 Reserved         : Pos 1, 31 Bits</span><br><span class=\"line\">   +0x7c4 NtGlobalFlag2    : Uint4B</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"与反调试相关的成员\"><a href=\"#与反调试相关的成员\" class=\"headerlink\" title=\"与反调试相关的成员\"></a>与反调试相关的成员</h1><p>其中与反调试相关的成员有如下几个：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+0x002 BeingDebugged    : UChar</span><br><span class=\"line\"></span><br><span class=\"line\">+0x00c Ldr              : Ptr32 _PEB_LDR_DATA</span><br><span class=\"line\"></span><br><span class=\"line\">+0x018 ProcessHeap      : Ptr32 Void</span><br><span class=\"line\"></span><br><span class=\"line\">+0x068 NtGlobalFlag     : Uint4B</span><br></pre></td></tr></table></figure>\n\n<p>BeingDebugged成员是一个标志（Flag），用来表示进程是否处于被调试状态。</p>\n<p>Ldr 、ProcessHeap、NtGlobalFlag成员与被调试进程的堆内存特性相关。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>借助FS段寄存器所指的TEB结构体可轻松获取进程的PEB结构体地址。TEB.ProcessEnvironmentBlock成员（偏移为+0x30）指向PEB结构体的地址，有以下两种方法可以获取PEB结构体的地址。</p>\n<p>（1）直接获取PEB的地址</p>\n<p>MOV EAX,DWORD PTR FS:[0x30];       FS:[0x30]&#x3D;address of PEB</p>\n<p>（2）先获取TEB的地址，再通过ProcessEnvironmentBlock成员（偏移为+0x30）获取PEB的地址</p>\n<p>MOV EAX,DWORD PTR FS:[0x18];       FS:[0x18]&#x3D;address of TEB</p>\n<p>MOV EAX,DWORD PTR DS:[EAX+0x30];       DS:[EAX+0x30]&#x3D;address of PEB</p></blockquote>\n<h2 id=\"PEB-BeingDebugged（-0x2）\"><a href=\"#PEB-BeingDebugged（-0x2）\" class=\"headerlink\" title=\"PEB.BeingDebugged（+0x2）\"></a>PEB.BeingDebugged（+0x2）</h2><p>进程处于调试状态时，PEB.BeingDebugged成员（+0x2）的值被设置为1（TRUE）；进程在非调试状态下运行时，其值被设置为0（FALSE）。</p>\n<h3 id=\"IsDebuggerPresent\"><a href=\"#IsDebuggerPresent\" class=\"headerlink\" title=\"IsDebuggerPresent()\"></a>IsDebuggerPresent()</h3><p>IsDebuggerPresent() API获取PEB.BeingDebugged成员的值来判断是否正在调试进程（是，则返回1；否，则返回0）。</p>\n<p>IsDebuggerPresent() 函数内部首先使用FS:[30]获取PEB结构体地址，图中为003B1000，然后再获取PEB.BeingDebugged成员的值（即003B1000+0x2&#x3D;003B1002地址处的值），图中为1（TRUE），表示当前进程处于调试状态。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Windows 7中，IsDebuggerPresent() API是在kernelbase.dll中实现的。而在Windows XP及以前版本的操作系统中，它是在kernel32.dll中实现的。</p></blockquote>\n<p><img src=\"/./kernelbase!IsDebuggerPresent(\" alt=\"kernelbase!IsDebuggerPresent() API函数内部\"> API函数内部.png)</p>\n<h3 id=\"破解之法\"><a href=\"#破解之法\" class=\"headerlink\" title=\"破解之法\"></a>破解之法</h3><p>只要在x32dbg中将PEB.BeingDebugged的值修改为0（FALSE）即可</p>\n<h2 id=\"PEB-Ldr（-0xC）\"><a href=\"#PEB-Ldr（-0xC）\" class=\"headerlink\" title=\"PEB.Ldr（+0xC）\"></a>PEB.Ldr（+0xC）</h2><p>调试进程时，其堆内存区域中会出现一些特殊标识，表示它正处于被调试状态。其中最醒目的是，未使用的堆内存区域全部填充着0xEEFEEEFE，这证明正在调试进程。利用这一特性即可判断进程是否处于被调试状态。</p>\n<p>PEB.Ldr成员是一个指向<code>_PEB_LDR_DATA</code>结构体的指针。而<code>_PEB_LDR_DATA</code>结构体恰好是在堆内存区域中创建的，所以扫描该区域即可轻松查找是否存在0xEEFEEEFE区域。</p>\n<h3 id=\"破解之法-1\"><a href=\"#破解之法-1\" class=\"headerlink\" title=\"破解之法\"></a>破解之法</h3><p>只要将填充着0xEEFEEEFE的区域全部覆写为NULL即可。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>该方法仅适用于Windows XP系统，而在Windows Vista以后的系统中则无法使用。另外，利用附加功能将运行中的进程附加到调试器时，堆内存中并不出现以上标识。</p></blockquote>\n<h2 id=\"PEB-ProcessHeap（-0x18）\"><a href=\"#PEB-ProcessHeap（-0x18）\" class=\"headerlink\" title=\"PEB.ProcessHeap（+0x18）\"></a>PEB.ProcessHeap（+0x18）</h2><p>PEB.ProcessHeap成员（+0x18）是指向HEAP结构体的指针。</p>\n<p>HEAP结构体部分成员如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+0x000 Entry           </span><br><span class=\"line\">+0x008 Signature </span><br><span class=\"line\">+0x00c Flags     </span><br><span class=\"line\">+0x010 ForceFlags      </span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>其中，进程处于被调试状态时，Flags（+0xc）与ForceFlags（+0x10）成员被设置为特定值。</p>\n<h3 id=\"GetProcessHeap\"><a href=\"#GetProcessHeap\" class=\"headerlink\" title=\"GetProcessHeap()\"></a>GetProcessHeap()</h3><p>PEB.ProcessHeap成员（+0x18）既可以从PEB结构体直接获取，也可以通过GetProcessHeap() API获取。</p>\n<p>GetProcessHeap()函数内部首先使用FS:[30]获取PEB结构体地址，图中为00337000，然后再获取PEB.ProcessHeap成员的值（即00337000+0x18&#x3D;00337018地址处的值），图中为00530000。</p>\n<p><img src=\"/./kernelbase!GetProcessHeap(\" alt=\"kernelbase!GetProcessHeap() API函数内部\"> API函数内部.png)</p>\n<h3 id=\"Flags（-0xc）与ForceFlags（-0x10）\"><a href=\"#Flags（-0xc）与ForceFlags（-0x10）\" class=\"headerlink\" title=\"Flags（+0xc）与ForceFlags（+0x10）\"></a>Flags（+0xc）与ForceFlags（+0x10）</h3><p>进程正常运行（非调试运行）时，Heap.Flags成员（+0xc）的值为0x2，Heap.ForceFlags成员（+0x10）的值为0x0。进程处于被调试状态时，这些值也会随之改变。</p>\n<h3 id=\"破解之法-2\"><a href=\"#破解之法-2\" class=\"headerlink\" title=\"破解之法\"></a>破解之法</h3><p>只要将Heap.Flags成员（+0xc）、Heap.ForceFlags成员（+0x10）的值重新设置为2与0即可（Heap.Flags&#x3D;0x2，Heap.ForceFlags&#x3D;0x0）。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>该方法仅在Windows XP系统中有效，Windows7系统则保留ForceFlags属性和Flags属性。此外，将运行中的进程附加到调试器时，也不出现以上特征。</p></blockquote>\n<h2 id=\"PEB-NtGlobalFlag（-0x68）\"><a href=\"#PEB-NtGlobalFlag（-0x68）\" class=\"headerlink\" title=\"PEB.NtGlobalFlag（+0x68）\"></a>PEB.NtGlobalFlag（+0x68）</h2><p>调试进程时，PEB.NtGlobalFlag成员（+0x68）的值会被设置成0x70。所以检测该成员的值即可判断进程是否处于被调试状态。</p>\n<p>NtGlobalFlag 0x70是下列Flags值进行bit OR（按位或）运算的结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FLG_HEAP_ENABLE_TAIL_CHECK             (0x10)</span><br><span class=\"line\">FLG_HEAP_ENABLE_FREE_CHECK             (0x20)</span><br><span class=\"line\">FLG_HEAP_VALIDATE_PARAMETERS           (0x40)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"破解之法-3\"><a href=\"#破解之法-3\" class=\"headerlink\" title=\"破解之法\"></a>破解之法</h3><p>重设PEB.NtGlobalFlag的值为0即可（PEB.NtGlobalFlag&#x3D;0）.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>将运行中的进程附加到调试器时，NtGlobalFlag的值不变。</p></blockquote>\n<h2 id=\"基于Windows10的练习\"><a href=\"#基于Windows10的练习\" class=\"headerlink\" title=\"基于Windows10的练习\"></a>基于Windows10的练习</h2><h2 id=\"1-调试器运行结果\"><a href=\"#1-调试器运行结果\" class=\"headerlink\" title=\"1.调试器运行结果\"></a>1.调试器运行结果</h2><p>首先使用x32dbg&#x2F;Ollydbg打开StaAD_PEB.exe，然后点击运行，结果如下图所示（x32dbg和Ollydbg运行结果不一样），下面主要基于x32dbg练习</p>\n<p>x32dbg运行结果：</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%EF%BC%88%E4%B8%80%EF%BC%89/Win10_StaAD_PEB_x32dbg%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png\" alt=\"Win10_StaAD_PEB_x32dbg运行结果\"></p>\n<p>Ollydbg运行结果：</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%EF%BC%88%E4%B8%80%EF%BC%89/Win10_StaAD_PEB_Ollydbg%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png\" alt=\"Win10_StaAD_PEB_Ollydbg运行结果\"></p>\n<h2 id=\"2-基于PEB-BeingDebugged（-0x2）反调试破解之法\"><a href=\"#2-基于PEB-BeingDebugged（-0x2）反调试破解之法\" class=\"headerlink\" title=\"2.基于PEB.BeingDebugged（+0x2）反调试破解之法\"></a>2.基于PEB.BeingDebugged（+0x2）反调试破解之法</h2><p>①跟踪调试代码，在401036地址处遇到调用IsDebuggerPresent() API的代码</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%EF%BC%88%E4%B8%80%EF%BC%89/Win10_StaAD_PEB_x32dbg%E8%B0%83%E8%AF%95IsDebuggerPresent().png\" alt=\"Win10_StaAD_PEB_x32dbg调试IsDebuggerPresent()\"></p>\n<p>②StepInto跟踪进IsDebuggerPresent() API内部，跳转到IsDebuggerPresent()函数内部，可以看到其内部首先使用FS:[30]获取PEB结构体的地址并传送给EAX寄存器，再通过[EAX+2]获取PEB.BeingDebugged成员并传送给EAX作为函数的返回值。此时只要将PEB.BeingDebugged值修改为0，即可破解基于PEB.BeingDebugged检测的反调试技术。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%EF%BC%88%E4%B8%80%EF%BC%89/Win10_StaAD_PEB_x32dbg%E5%9C%A8IsDebuggerPresent()%E5%86%85%E9%83%A8%E4%BF%AE%E6%94%B9PEB.BeingDebugged%E4%B8%BA0.png\" alt=\"Win10_StaAD_PEB_x32dbg在IsDebuggerPresent()内部修改PEB.BeingDebugged为0\"></p>\n<p>③修改PEB.BeingDebugged值为0后并返回后继续运行代码，发现输出了”Not debugging”，这表明绕过了基于PEB.BeingDebugged的反调试</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%EF%BC%88%E4%B8%80%EF%BC%89/Win10_StaAD_PEB_x32dbg%E4%BF%AE%E6%94%B9PEB.BeingDebugged%E4%B8%BA0%E5%90%8E%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png\" alt=\"Win10_StaAD_PEB_x32dbg修改PEB.BeingDebugged为0后运行结果\"></p>\n<h2 id=\"3-基于PEB-Ldr（-0xC）反调试破解之法\"><a href=\"#3-基于PEB-Ldr（-0xC）反调试破解之法\" class=\"headerlink\" title=\"3.基于PEB.Ldr（+0xC）反调试破解之法\"></a>3.基于PEB.Ldr（+0xC）反调试破解之法</h2><p>①跟踪代码到401070处，遇到调用NtCurrentTeb() API的代码，并把结果（TEB结构体地址）保存到EAX返回，然后使用MOV EBX,DWORD PTR DS:[EAX+30]指令获取PEB结构体的地址并传送给EBX寄存器，然后使用MOV DWORD PTR SS:[EBP-30],EBX指令把PEB结构体地址保存到[EBP-30]</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%EF%BC%88%E4%B8%80%EF%BC%89/Win10_StaAD_PEB_x32dbg%E8%B0%83%E8%AF%95NtCurrentTeb().png\" alt=\"Win10_StaAD_PEB_x32dbg调试NtCurrentTeb()\"></p>\n<p>②继续跟踪调试，401090-40109E处的指令用于将（[EBP-20]~[EBP-2C]）初始化为0xEEFEEEFE，4010A1处指令使用[EBX+C]获取PEB.Ldr成员并保存到ESI（上面已经将PEB结构体地址保存到EBX寄存器中了），4010A4处的指令MOV DWORD PTR SS:[EBP-4],0用于将[EBP-4]处的值置0</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%EF%BC%88%E4%B8%80%EF%BC%89/Win10_StaAD_PEB_%E5%B0%86%5BEBP-20%5D~%5BEBP-2C%5D%E5%A1%AB%E5%85%85%E4%B8%BAEEFEEEFE.png\" alt=\"Win10_StaAD_PEB_将[EBP-20]~[EBP-2C]填充为EEFEEEFE\"></p>\n<p>③地址4010B0~4010DA间的代码由循环构成4010C7处的CMP指令，EDI寄存器中存储着从PEB.Ldr地址读取的4字节值（上面已经把PEB.Ldr地址保存到ESI中），[ECX]中的值为EEFEEEFE（ECX寄存器中存储着初始化为EEFEEEFE的数组的起始地址）。所以，该处代码用于查找PEB.Ldr中初始化为EEFEEEFE的区域。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%EF%BC%88%E4%B8%80%EF%BC%89/Win10_StaAD_PEB_%E5%B0%86PEB.Ldr%E4%B8%8EEEFEEEFE%E6%AF%94%E8%BE%83.png\" alt=\"Win10_StaAD_PEB_将PEB.Ldr与EEFEEEFE比较\"></p>\n<p>④该调试探测技术的破解之法是：先转到PEB.Ldr，然后查找EEFEEEFE的区域并用NULL值覆盖</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>由于Windows没有这一特性，所以显示没有被调试</p></blockquote>\n<h2 id=\"4-基于PEB-ProcessHeap（-0x18）反调试破解之法\"><a href=\"#4-基于PEB-ProcessHeap（-0x18）反调试破解之法\" class=\"headerlink\" title=\"4.基于PEB.ProcessHeap（+0x18）反调试破解之法\"></a>4.基于PEB.ProcessHeap（+0x18）反调试破解之法</h2><h2 id=\"5-基于PEB-NtGlobalFlag（-0x68）反调试破解之法\"><a href=\"#5-基于PEB-NtGlobalFlag（-0x68）反调试破解之法\" class=\"headerlink\" title=\"5.基于PEB.NtGlobalFlag（+0x68）反调试破解之法\"></a>5.基于PEB.NtGlobalFlag（+0x68）反调试破解之法</h2>","text":"PEB利用PEB结构体信息可以判断当前进程是否处于被调试状态。回顾下PEB结构体的成员： Win7 x86中： 123456789101112131415161...","permalink":"/post/Windows静态反调试技术（一）","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"Windows静态反调试技术","slug":"Windows静态反调试技术","count":3,"path":"api/tags/Windows静态反调试技术.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PEB\"><span class=\"toc-text\">PEB</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%8E%E5%8F%8D%E8%B0%83%E8%AF%95%E7%9B%B8%E5%85%B3%E7%9A%84%E6%88%90%E5%91%98\"><span class=\"toc-text\">与反调试相关的成员</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PEB-BeingDebugged%EF%BC%88-0x2%EF%BC%89\"><span class=\"toc-text\">PEB.BeingDebugged（+0x2）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IsDebuggerPresent\"><span class=\"toc-text\">IsDebuggerPresent()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A0%B4%E8%A7%A3%E4%B9%8B%E6%B3%95\"><span class=\"toc-text\">破解之法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PEB-Ldr%EF%BC%88-0xC%EF%BC%89\"><span class=\"toc-text\">PEB.Ldr（+0xC）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A0%B4%E8%A7%A3%E4%B9%8B%E6%B3%95-1\"><span class=\"toc-text\">破解之法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PEB-ProcessHeap%EF%BC%88-0x18%EF%BC%89\"><span class=\"toc-text\">PEB.ProcessHeap（+0x18）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GetProcessHeap\"><span class=\"toc-text\">GetProcessHeap()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Flags%EF%BC%88-0xc%EF%BC%89%E4%B8%8EForceFlags%EF%BC%88-0x10%EF%BC%89\"><span class=\"toc-text\">Flags（+0xc）与ForceFlags（+0x10）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A0%B4%E8%A7%A3%E4%B9%8B%E6%B3%95-2\"><span class=\"toc-text\">破解之法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PEB-NtGlobalFlag%EF%BC%88-0x68%EF%BC%89\"><span class=\"toc-text\">PEB.NtGlobalFlag（+0x68）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A0%B4%E8%A7%A3%E4%B9%8B%E6%B3%95-3\"><span class=\"toc-text\">破解之法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EWindows10%E7%9A%84%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">基于Windows10的练习</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E8%B0%83%E8%AF%95%E5%99%A8%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">1.调试器运行结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%9F%BA%E4%BA%8EPEB-BeingDebugged%EF%BC%88-0x2%EF%BC%89%E5%8F%8D%E8%B0%83%E8%AF%95%E7%A0%B4%E8%A7%A3%E4%B9%8B%E6%B3%95\"><span class=\"toc-text\">2.基于PEB.BeingDebugged（+0x2）反调试破解之法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%9F%BA%E4%BA%8EPEB-Ldr%EF%BC%88-0xC%EF%BC%89%E5%8F%8D%E8%B0%83%E8%AF%95%E7%A0%B4%E8%A7%A3%E4%B9%8B%E6%B3%95\"><span class=\"toc-text\">3.基于PEB.Ldr（+0xC）反调试破解之法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%9F%BA%E4%BA%8EPEB-ProcessHeap%EF%BC%88-0x18%EF%BC%89%E5%8F%8D%E8%B0%83%E8%AF%95%E7%A0%B4%E8%A7%A3%E4%B9%8B%E6%B3%95\"><span class=\"toc-text\">4.基于PEB.ProcessHeap（+0x18）反调试破解之法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%9F%BA%E4%BA%8EPEB-NtGlobalFlag%EF%BC%88-0x68%EF%BC%89%E5%8F%8D%E8%B0%83%E8%AF%95%E7%A0%B4%E8%A7%A3%E4%B9%8B%E6%B3%95\"><span class=\"toc-text\">5.基于PEB.NtGlobalFlag（+0x68）反调试破解之法</span></a></li></ol></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Windows静态反调试技术（二）","uid":"4d2341767a6c86040d957eae87d1ec51","slug":"Windows静态反调试技术（二）","date":"2022-06-22T13:16:13.000Z","updated":"2025-06-09T21:41:20.984Z","comments":true,"path":"api/articles/Windows静态反调试技术（二）.json","keywords":null,"cover":[],"text":"NtQueryInformationProcess()NtQueryInformationProcess定义通过NtQueryInformationProces...","permalink":"/post/Windows静态反调试技术（二）","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"Windows静态反调试技术","slug":"Windows静态反调试技术","count":3,"path":"api/tags/Windows静态反调试技术.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Windows动态反调试技术（二）","uid":"bd414604d17df76b597f4081d3f02f14","slug":"Windows动态反调试技术（二）","date":"2022-06-11T13:05:26.000Z","updated":"2025-06-09T21:56:01.906Z","comments":true,"path":"api/articles/Windows动态反调试技术（二）.json","keywords":null,"cover":[],"text":"单步执行TF值设置为1时，CPU将进入单步执行（Single Step）模式。单步执行模式中，CPU执行1条指令后即触发1个EXCEPTION_SINGLE_S...","permalink":"/post/Windows动态反调试技术（二）","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"Windows动态反调试技术","slug":"Windows动态反调试技术","count":2,"path":"api/tags/Windows动态反调试技术.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}