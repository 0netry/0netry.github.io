{"title":"TLS回调函数","uid":"66da80b7dfd28e13d279b8154dbcb5eb","slug":"TLS回调函数","date":"2022-04-15T07:23:02.000Z","updated":"2025-06-08T15:26:19.727Z","comments":true,"path":"api/articles/TLS回调函数.json","keywords":null,"cover":[],"content":"<h2 id=\"TLS回调函数\"><a href=\"#TLS回调函数\" class=\"headerlink\" title=\"TLS回调函数\"></a>TLS回调函数</h2><p>TLS（Thread Local Storage，线程局部存储）回调函数常用于反调试</p>\n<h3 id=\"TLS\"><a href=\"#TLS\" class=\"headerlink\" title=\"TLS\"></a>TLS</h3><p>TLS是各线程的独立的数据存储空间。使用TLS技术可在线程内部独立使用或修改进程的全局数据或静态数据，就像对待自身的局部变量一样（编程中这种功能非常有用）。</p>\n<h4 id=\"TLS表\"><a href=\"#TLS表\" class=\"headerlink\" title=\"TLS表\"></a>TLS表</h4><p>若在编程中启用了TLS功能，PE头文件中就会设置TLS表（TLS Table）项目，如下图（IMAGE_NT_HEADERS-IMAGE_OPTIONAL_HEADER-IMAGE_DATA_DIRECTORY[9]），IMAGE_TLS_DIRECTORY结构体就位于RVA 9310地址处</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/AGE_DATA_DIRECTORY%5B9%5D.png\" alt=\"IMAGE_DATA_DIRECTORY[9]\"></p>\n<h4 id=\"IMAGE-TLS-DIRECTORY\"><a href=\"#IMAGE-TLS-DIRECTORY\" class=\"headerlink\" title=\"IMAGE_TLS_DIRECTORY\"></a>IMAGE_TLS_DIRECTORY</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IMAGE_TLS_DIRECTORY结构体：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_TLS_DIRECTORY64</span>&#123;</span></span><br><span class=\"line\">\tULONGLONG StartAddressOfRawData;</span><br><span class=\"line\">\tULONGLONG EndAddressOfRawData;</span><br><span class=\"line\">\tULONGLONG AddressOfIndex;                   <span class=\"comment\">// PDWORD</span></span><br><span class=\"line\">\tULONGLONG AddressOfCallBacks;               <span class=\"comment\">// PIMAGE_TLS_CALLBACK *;</span></span><br><span class=\"line\">\tDWORD SizeOfZeroFill;</span><br><span class=\"line\">\tDWORD Characteristics;</span><br><span class=\"line\">&#125;IMAGE_TLS_DIRECTORY64;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_TLS_DIRECTORY32</span>&#123;</span></span><br><span class=\"line\">\tDWORD StartAddressOfRawData;</span><br><span class=\"line\">\tDWORD EndAddressOfRawData;</span><br><span class=\"line\">\tDWORD AddressOfIndex;                       <span class=\"comment\">// PDWORD</span></span><br><span class=\"line\">\tDWORD AddressOfCallBacks;                   <span class=\"comment\">// PIMAGE_TLS_CALLBACK *;</span></span><br><span class=\"line\">\tDWORD SizeOfZeroFill;</span><br><span class=\"line\">\tDWORD Characteristics;</span><br><span class=\"line\">&#125;IMAGE_TLS_DIRECTORY32;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _WIN64</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> PIMAGE_TLS_DIRECTORY64 PIMAGE_TLS_DIRECTORY;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>使用ExeInfoPe查看IMAGE_TLS_DIRECTORY结构体：</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/AGE_TLS_DIRECTORY%E7%BB%93%E6%9E%84%E4%BD%93.png\" alt=\"IMAGE_TLS_DIRECTORY结构体\"></p>\n<p>逆向分析中比较重要的成员为AddressOfCallBacks，该值指向含有TLS回调函数地址（VA）的数组。这意味着可以向同一程序注册多个TLS回调函数（数组以NULL值结束）。</p>\n<h4 id=\"回调函数地址数组\"><a href=\"#回调函数地址数组\" class=\"headerlink\" title=\"回调函数地址数组\"></a>回调函数地址数组</h4><p>该数组中实际存储的就是TLS回调函数的地址。进程启动运行时，（执行EP代码前）系统会逐一调用存储在该数组中的函数。请注意，可以通过修改程序注册多个TLS函数。</p>\n<p>下面使用ExeInfoPe查看回调函数地址数组（由前面已知示例程序回调函数地址为408114），可以看到示例中只注册了一个TLS函数（地址为401000）</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ExeInfoPe%E6%9F%A5%E7%9C%8B%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80%E6%95%B0%E7%BB%84.png\" alt=\"使用ExeInfoPe查看回调函数地址数组\"></p>\n<h3 id=\"TLS回调函数-1\"><a href=\"#TLS回调函数-1\" class=\"headerlink\" title=\"TLS回调函数\"></a>TLS回调函数</h3><p>所谓TLS回调函数是指，每当创建&#x2F;终止进程的线程时会自动调用执行的函数。有意思的是，创建进程的主线程时也会自动调用回调函数，且其调用执行先于EP代码。反调试技术利用的就是TLS回调函数的这一特征。</p>\n<p>请注意，创建或终止某线程时，TLS回调函数都会自动调用执行，前后共2次（原意即为此）。<br>执行进程的主线程（运行进程的EP代码）前，TLS回调函数会先被调用执行，许多逆向分析人员将该特征应用于程序的反调试技术。</p>\n<h4 id=\"IMAGE-TLS-CALLBACK\"><a href=\"#IMAGE-TLS-CALLBACK\" class=\"headerlink\" title=\"IMAGE_TLS_CALLBACK\"></a>IMAGE_TLS_CALLBACK</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TLS Callback函数定义</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">VOID</span><span class=\"params\">(NTAPI *PIMAGE_TLS_CALLBACK)</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    PVOID DllHandle,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD Reason,</span></span><br><span class=\"line\"><span class=\"params\">    PVOID Reserved</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>它与DllMain函数定义相似</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DllMain函数定义</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL WINAPI <span class=\"title function_\">DllMain</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    __in HINSTANCE hinstDLL,</span></span><br><span class=\"line\"><span class=\"params\">    __in DWORD fdwReason,</span></span><br><span class=\"line\"><span class=\"params\">    __in LPVOID lpvReserved</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>观察以上两个函数，发现它们的参数顺序与含义是一样的。其中，参数DllHandle为模块句柄（即加载地址），参数Reason表示调用TLS回调函数的原因，具体原因有四种：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DLL_PROCESS_ATTACH 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DLL_THREAD_ATTACH  2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DLL_THREAD_DETACH  3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DLL_PROCESS_DETACH 0</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"DLL-PROCESS-ATTACH\"><a href=\"#DLL-PROCESS-ATTACH\" class=\"headerlink\" title=\"DLL_PROCESS_ATTACH\"></a>DLL_PROCESS_ATTACH</h5><p>进程的主线程调用main()函数前，已经注册的TLS回调函数（TLS_CALLBACK1、TLS_CALLBACK2）会先被调用执行，此时Reason的值为1（DLL_PROCESS_ATTACH）</p>\n<h5 id=\"DLL-THREAD-ATTACH\"><a href=\"#DLL-THREAD-ATTACH\" class=\"headerlink\" title=\"DLL_THREAD_ATTACH\"></a>DLL_THREAD_ATTACH</h5><p>所有TLS回调函数完成调用后，main()函数开始调用执行，创建用户线程（ThreadProc）前，TLS回调函数会被再次调用执行，此时Reason&#x3D;2（DLL_THREAD_ATTACH）</p>\n<h5 id=\"DLL-THREAD-DETACH\"><a href=\"#DLL-THREAD-DETACH\" class=\"headerlink\" title=\"DLL_THREAD_DETACH\"></a>DLL_THREAD_DETACH</h5><p>TLS回调函数全部执行完毕后，ThreadProc()线程函数开始调用执行。其执行完毕后Reason&#x3D;3（DLL_THREAD_DETACH），TLS回调函数被调用执行。</p>\n<h5 id=\"DLL-PROCESS-DETACH\"><a href=\"#DLL-PROCESS-DETACH\" class=\"headerlink\" title=\"DLL_PROCESS_DETACH\"></a>DLL_PROCESS_DETACH</h5><p>ThreadProc()线程函数执行完毕后，一直在等待线程终止的main()函数（主线程）也会终止。此时Reason&#x3D;0（DLL_PROCESS_DETACH），TLS回调函数最后一次被调用执行。</p>\n<h4 id=\"练习：TlsTest-exe\"><a href=\"#练习：TlsTest-exe\" class=\"headerlink\" title=\"练习：TlsTest.exe\"></a>练习：TlsTest.exe</h4><p>1.TlsTest.cpp</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(linker, <span class=\"string\">&quot;/INCLUDE:__tls_used&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">print_console</span><span class=\"params\">(<span class=\"type\">char</span>* szMsg)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HANDLE hStdout = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class=\"line\"></span><br><span class=\"line\">    WriteConsoleA(hStdout, szMsg, <span class=\"built_in\">strlen</span>(szMsg), <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> NTAPI <span class=\"title function_\">TLS_CALLBACK1</span><span class=\"params\">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> szMsg[<span class=\"number\">80</span>] = &#123;<span class=\"number\">0</span>,&#125;;</span><br><span class=\"line\">    wsprintfA(szMsg, <span class=\"string\">&quot;TLS_CALLBACK1() : DllHandle = %X, Reason = %d\\n&quot;</span>, DllHandle, Reason);</span><br><span class=\"line\">    print_console(szMsg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> NTAPI <span class=\"title function_\">TLS_CALLBACK2</span><span class=\"params\">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> szMsg[<span class=\"number\">80</span>] = &#123;<span class=\"number\">0</span>,&#125;;</span><br><span class=\"line\">    wsprintfA(szMsg, <span class=\"string\">&quot;TLS_CALLBACK2() : DllHandle = %X, Reason = %d\\n&quot;</span>, DllHandle, Reason);</span><br><span class=\"line\">    print_console(szMsg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> data_seg(<span class=\"string\">&quot;.CRT$XLX&quot;</span>)</span></span><br><span class=\"line\">    PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; TLS_CALLBACK1, TLS_CALLBACK2, <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> data_seg()</span></span><br><span class=\"line\"></span><br><span class=\"line\">DWORD WINAPI <span class=\"title function_\">ThreadProc</span><span class=\"params\">(LPVOID lParam)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    print_console(<span class=\"string\">&quot;ThreadProc() start\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    print_console(<span class=\"string\">&quot;ThreadProc() end\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HANDLE hThread = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    print_console(<span class=\"string\">&quot;main() start\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    hThread = CreateThread(<span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, ThreadProc, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    WaitForSingleObject(hThread, <span class=\"number\">60</span>*<span class=\"number\">1000</span>);</span><br><span class=\"line\">    CloseHandle(hThread);</span><br><span class=\"line\"></span><br><span class=\"line\">    print_console(<span class=\"string\">&quot;main() end\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上TlsTest.cpp源代码中注册了2个TLS回调函数（TLS_CALLBACK1、TLS_CALLBACK2），功能是将DllHandle与Reason这两个参数的值输出到控制台，然后终止退出。main()函数用于创建用户线程（ThreadProc）后终止，main()与ThreadProc()内部分别将函数开始&#x2F;终止日志输出到控制台</p>\n<p>2.通过ExeInfoPe查看TlsTest.exe的回调函数地址数组，可以看到注册了两个回调函数（401000、401080）</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E6%95%B0/%E4%BD%BF%E7%94%A8ExeInfoPe%E6%9F%A5%E7%9C%8BTlsTest_exe%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80%E6%95%B0%E7%BB%84.png\" alt=\"使用ExeInfoPe查看TlsTest_exe回调函数地址数组\"></p>\n<p>3.运行TlsTest.exe结果</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E6%95%B0/%E8%BF%90%E8%A1%8CTlsTest.exe%E7%BB%93%E6%9E%9C.png\" alt=\"运行TlsTest.exe结果\"></p>\n<h3 id=\"调试TLS回调函数\"><a href=\"#调试TLS回调函数\" class=\"headerlink\" title=\"调试TLS回调函数\"></a>调试TLS回调函数</h3><p>若直接使用调试器打开带有TLS回调函数的程序，则无法调试TLS回调函数，因为TLS回调函数在EP代码之前就被调用执行了。此时修改调试器选项就可以调试TLS回调函数（见下图），然后重启调试器重新调试程序，调试器就会停在ntdll.dll模块内部的”System Startup Breakpoint”处暂停。调试器暂停的位置即是系统启动断点，使用ExeInfoPe查看的回调函数的地址，然后在回调函数的起始地址设置好断点，这样就可以调试TLS回调函数了。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E8%B0%83%E5%87%BD%E6%95%B0/%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E6%96%AD%E7%82%B9%E9%80%89%E9%A1%B9.png\" alt=\"设置系统断点选项\"></p>\n<h3 id=\"手动添加TLS回调函数\"><a href=\"#手动添加TLS回调函数\" class=\"headerlink\" title=\"手动添加TLS回调函数\"></a>手动添加TLS回调函数</h3><p>下面以Hello.exe为例展示手动添加TLS回调函数使之能起到反调试的作用</p>\n<h4 id=\"1-修改前的原程序\"><a href=\"#1-修改前的原程序\" class=\"headerlink\" title=\"1.修改前的原程序\"></a>1.修改前的原程序</h4><p>如下图所示，修改前的原程序用x32dbg调试运行时也没有反调试功能，而是直接输出Hello:)</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E4%BF%AE%E6%94%B9%E5%89%8D%E7%9A%84%E5%8E%9F%E7%A8%8B%E5%BA%8F.png\" alt=\"修改前的原程序\"></p>\n<h4 id=\"2-设计规划\"><a href=\"#2-设计规划\" class=\"headerlink\" title=\"2.设计规划\"></a>2.设计规划</h4><p>首先要确定IMAGE_TLS_DIRECTORY结构体与TLS回调函数放到文件的哪个位置。向某个PE文件添加代码或数据时，有如下三种方法来查找合适的位置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）添加到节区末尾的空白区域</span><br><span class=\"line\">2）增加最后一个节区的大小</span><br><span class=\"line\">3）在最后添加新节区</span><br></pre></td></tr></table></figure>\n\n<p>本例中采用第二种方法，即增加最后一个节区的大小。</p>\n<h5 id=\"增加最后一个节区的大小\"><a href=\"#增加最后一个节区的大小\" class=\"headerlink\" title=\"增加最后一个节区的大小\"></a>增加最后一个节区的大小</h5><p>①首先使用exeinfope查看Hello.exe最后一个节区（.rsrc）的节区头（注意，Hello.exe的Section Alignment&#x3D;1000h，File Alignment&#x3D;200h），可以看到最后一个节区（.rsrc）的Pointer to Raw Data&#x3D;9000h，Size of Raw Data&#x3D;200h。所以PE头定义的文件整体大小为9200h。考虑到要添加代码与数据的大小，将最后一个节区的大小增加200h（文件的大小增加到9400h）。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E4%BD%BF%E7%94%A8ExeInfoPe%E6%9F%A5%E7%9C%8B%E8%8A%82%E5%8C%BA%E4%BF%A1%E6%81%AF.png\" alt=\"使用ExeInfoPe查看节区信息\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>图中Virtual Size为1B4，PE装载器会按照Section Alignment值对齐该值，即加载到内存中的大小为1000.所以将节区的文件大小增加200后，实际Virtual Size值变为3B4，它比加载到内存中的尺寸1000要小，所以不需要再单独增大Virtual Size的值。</p></blockquote>\n<p>②使用010Editor（或HxD工具）打开Hello.exe文件，移动光标至最后位置，在菜单栏中选择Edit-&gt;Insert&#x2F;Overwrite-&gt;Insert Bytes，然后在弹框中选择Hex以显示16进制，向Size中输入200，单击Insert后，即从光标的当前位置新添加了200h个字节（即512个字节）</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E4%BD%BF%E7%94%A8010Editor%E6%8F%92%E5%85%A5200h%E7%A9%BA%E5%AD%97%E8%8A%82.png\" alt=\"使用010Editor插入200h空字节\"></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E4%BD%BF%E7%94%A8010Editor%E5%A2%9E%E5%8A%A0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E8%8A%82%E5%8C%BA%E7%9A%84%E5%A4%A7%E5%B0%8F.png\" alt=\"使用010Editor增加最后一个节区的大小\"></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E4%BD%BF%E7%94%A8HxD%E6%8F%92%E5%85%A5200h%E7%A9%BA%E5%AD%97%E8%8A%82.png\" alt=\"使用HxD插入200h空字节\"></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E4%BD%BF%E7%94%A8HxD%E5%A2%9E%E5%8A%A0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E8%8A%82%E5%8C%BA%E7%9A%84%E5%A4%A7%E5%B0%8F.png\" alt=\"使用HxD增加最后一个节区的大小\"></p>\n<h4 id=\"3-编辑PE文件头\"><a href=\"#3-编辑PE文件头\" class=\"headerlink\" title=\"3.编辑PE文件头\"></a>3.编辑PE文件头</h4><h5 id=\"rsrc节区头\"><a href=\"#rsrc节区头\" class=\"headerlink\" title=\".rsrc节区头\"></a><strong>.rsrc节区头</strong></h5><p>使用010Editor修改.rsrc节区头中的Size Of Raw Data与Characteristics的值，即Size of Raw Data&#x3D;400h、Characteristics增加IMAGE_SCN_CNT_CODE|IMAGE_SCN_MEM_EXECUTE|IMAGE_SCN_MEM_WRITE属性（Characteristics&#x3D;E0000060）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>由于需要在扩展区域内创建IMAGE_TLS_DIRECTORY结构体与TLS回调函数，所以需要向该节区添加IMAGE_SCN_CNT_CODE|IMAGE_SCN_MEM_EXECUTE属性。此外，还必须向包含IMAGE_TLS_DIRECTORY结构体的节区添加IMAGE_SCN_MEM_WRITE属性，才能保证正常运行。</p></blockquote>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E4%BD%BF%E7%94%A8010Editor%E4%BF%AE%E6%94%B9.rsrc%E8%8A%82%E5%8C%BA%E5%A4%B4%E4%B8%AD%E7%9A%84SizeOfRawData%E4%B8%8ECharacteristics%E7%9A%84%E5%80%BC%E5%89%8D.png\" alt=\"使用010Editor修改.rsrc节区头中的SizeOfRawData与Characteristics的值前\"></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E4%BD%BF%E7%94%A8010Editor%E4%BF%AE%E6%94%B9.rsrc%E8%8A%82%E5%8C%BA%E5%A4%B4%E4%B8%AD%E7%9A%84SizeOfRawData%E4%B8%8ECharacteristics%E7%9A%84%E5%80%BC%E5%90%8E.png\" alt=\"使用010Editor修改.rsrc节区头中的SizeOfRawData与Characteristics的值后\"></p>\n<h5 id=\"IMAGE-DATA-DIRECTORY-9\"><a href=\"#IMAGE-DATA-DIRECTORY-9\" class=\"headerlink\" title=\"IMAGE_DATA_DIRECTORY[9]\"></a>IMAGE_DATA_DIRECTORY[9]</h5><p>接下来要设置TLS表（IMAGE_NT_HEADERS-IMAGE_OPTIONAL_HEADER-IMAGE_DATA_DIRECTORY[9]）的值，根据前面的步骤，扩展区域的起始地址为9200h（文件偏移）。而原来.rsrs的起始地址为9000h，大小为200h，对应的RVA为C000h，所以9200h对应的RVA为9200h-9000h+C000h&#x3D;C200h。（计算公式RVA &#x3D; 目标文件偏移量 - 目标所在节区的起始偏移量 + 目标所在节区的起始 RVA，这里目标所在节区为.rsrc，通过010Editor可以查看该节区的起始偏移为9000h，起始RVA为C000h，所以9200h偏移对应的RVA&#x3D;9200h-9000h+C000h&#x3D;C200h，也可用Stud_PE的RVA&lt;&#x3D;&gt;RAW插件或Lord_PE的位置计算器来计算），接下来将从该地址处创建IMAGE_TLS_DIRECTORY结构体。因此在010Editor中修改IMAGE_NT_HEADERS-IMAGE_OPTIONAL_HEADER-IMAGE_DATA_DIRECTORY[9]，使得RVA&#x3D;C200h，Size&#x3D;18h（TLS表大小为18h，即24）</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E4%BD%BF%E7%94%A8ExeInfoPe%E4%BF%AE%E6%94%B9IMAGE_NT_HEADERS-IMAGE_OPTIONAL_HEADER-IMAGE_DATA_DIRECTORY%5B9%5D.png\"></p>\n<h4 id=\"4-设置IMAGE-TLS-DIRECTORY\"><a href=\"#4-设置IMAGE-TLS-DIRECTORY\" class=\"headerlink\" title=\"4.设置IMAGE_TLS_DIRECTORY\"></a>4.设置IMAGE_TLS_DIRECTORY</h4><p>接下来在文件偏移9200h（RVA C200）地址处设置IMAGE_TLS_DIRECTORY结构体，只要把TLS回调函数注册到其中即可。根据TLS表的结构</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_TLS_DIRECTORY32</span>&#123;</span></span><br><span class=\"line\">\tDWORD StartAddressOfRawData;</span><br><span class=\"line\">\tDWORD EndAddressOfRawData;</span><br><span class=\"line\">\tDWORD AddressOfIndex;                       <span class=\"comment\">// PDWORD</span></span><br><span class=\"line\">\tDWORD AddressOfCallBacks;                   <span class=\"comment\">// PIMAGE_TLS_CALLBACK *;</span></span><br><span class=\"line\">\tDWORD SizeOfZeroFill;</span><br><span class=\"line\">\tDWORD Characteristics;</span><br><span class=\"line\">&#125;IMAGE_TLS_DIRECTORY32;</span><br></pre></td></tr></table></figure>\n\n<p>可以从图中（红色方框）看出设置了：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StartAddressOfRawData=<span class=\"number\">0040</span>C218</span><br><span class=\"line\">EndAddressOfRawData=<span class=\"number\">0040</span>C21C</span><br><span class=\"line\">AddressOfIndex=<span class=\"number\">0040</span>C220                      </span><br><span class=\"line\">AddressOfCallBacks=<span class=\"number\">0040</span>C224                   </span><br><span class=\"line\">SizeOfZeroFill=<span class=\"number\">00000000</span></span><br><span class=\"line\">Characteristics=<span class=\"number\">00000000</span></span><br></pre></td></tr></table></figure>\n\n<p>而根据文件偏移9200h对应的RVA为C200h，ImageBase为400000h，所以TLS回调函数地址数组所在地址40C224h对应的RVA为40C224h-400000h&#x3D;C224h，对应的文件偏移&#x3D;C224h-C200h+9200h&#x3D;9224h，即黄色方框位置，注册了一个TLS回调函数40C230h</p>\n<p>TLS回调函数对应的文件偏移&#x3D;40C230h-400000h-C200h+9200h&#x3D;9230h（即蓝色方框位置），这里先向该地址写入”C2 0C00 - RETN 0C”命令，即在TLS回调函数中不执行任何操作，直接返回。</p>\n<p>到此运行修改后的Hello.exe，若修改没问题，则能正常运行</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>TLS回调函数的返回指令不是RETN，而是RETN 0C指令，因为函数有3个参数（大小为0C），所以需要修正栈，修正大小为0C。</p></blockquote>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E4%BD%BF%E7%94%A8010Editor%E8%AE%BE%E7%BD%AEIMAGE_TLS_DIRECTORY.png\" alt=\"使用010Editor设置IMAGE_TLS_DIRECTORY\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我按上面步骤操作但最后运行时发现运行不了，经过一番研究，发现原来使用010Editer编辑二进制时，如果在改字节过程中使用了删除键，则pe的字节也会被删除，我在编辑过程中使用了删除键，所以导致最后.rsrc节区的大小没有400，而raw data size前面已经填了400h，导致不一致，所以无法运行，此时需要看缺了多少字节，重新插入缺少的字节即可。</p></blockquote>\n<h4 id=\"5-编写TLS回调函数\"><a href=\"#5-编写TLS回调函数\" class=\"headerlink\" title=\"5.编写TLS回调函数\"></a>5.编写TLS回调函数</h4><p>根据前面步骤修改PE后程序能正常运行，接下来就可以编写TLS回调函数了。</p>\n<p>①使用x32dbg打开Hello.exe，然后跳转到TLS回调函数地址处（前面注册了TLS回调函数的地址为40C230），使用汇编功能编写代码</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E4%BD%BF%E7%94%A8x32dbg%E5%BC%80%E5%A7%8B%E7%BC%96%E5%86%99TLS%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%BB%A3%E7%A0%81.png\" alt=\"使用x32dbg开始编写TLS回调函数代码\"></p>\n<p>②编写如下图所示的反调试代码，然后分别修改40C270、40C280处为”TLS CallBack”、”Debugger Detected!”</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1）代码流程是：</p>\n<p>通过比较[esp+8]即TLS回调函数第二个参数Reason的值是否为1（DLL_PROCESS_ATTACH），若是，则获取peb.BeingDebugged成员的值是否为0，若为0表示正常运行（非调试运行），若不为0，则表示处于调试状态，则弹出消息框提示”Debugger Detected!”然后退出程序。</p>\n<p>2）MessageBoxA()与ExitProcess() API的IAT地址（分别为4080E8、408028）使用原Hello.exe的IAT中的即可。在编写汇编过程中直接Call 地址，x32dbg会自动求得API的地址并输入结果。如果要调用的API不在IAT中，那么编写代码时要复杂得多。</p></blockquote>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E7%BC%96%E5%86%99%E7%9A%84TLS%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%8D%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81.png\" alt=\"编写的TLS回调函数反调试代码\"></p>\n<p>③编写完代码和数据后，使用快捷键Ctrl+p（或菜单栏选择文件-&gt;补丁），在弹出的对话框中全选并选择修复文件，然后输入要保存的文件名（*.exe）即可</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/x32dbg%E4%BF%9D%E5%AD%98%E7%BC%96%E5%86%99%E7%9A%84%E4%BB%A3%E7%A0%81%E5%92%8C%E6%95%B0%E6%8D%AE.png\" alt=\"x32dbg保存编写的代码和数据\"></p>\n<p>④使用x32dbg运行已保存的修改的程序，可以看到弹框显示”Debugger Detected!”，单击”确定”后，程序停止运行，这表明手工添加TLS回调函数成功。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/S%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/%E4%BD%BF%E7%94%A8x32dbg%E8%BF%90%E8%A1%8C%E4%BF%AE%E6%94%B9%E7%9A%84%E7%A8%8B%E5%BA%8F.png\" alt=\"使用x32dbg运行修改的程序\"></p>\n","text":"TLS回调函数TLS（Thread Local Storage，线程局部存储）回调函数常用于反调试 TLSTLS是各线程的独立的数据存储空间。使用TLS技术可在...","permalink":"/post/TLS回调函数","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"TLS回调函数","slug":"TLS回调函数","count":1,"path":"api/tags/TLS回调函数.json"},{"name":"PE结构","slug":"PE结构","count":1,"path":"api/tags/PE结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TLS%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">TLS回调函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TLS\"><span class=\"toc-text\">TLS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TLS%E8%A1%A8\"><span class=\"toc-text\">TLS表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#IMAGE-TLS-DIRECTORY\"><span class=\"toc-text\">IMAGE_TLS_DIRECTORY</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">回调函数地址数组</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TLS%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0-1\"><span class=\"toc-text\">TLS回调函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#IMAGE-TLS-CALLBACK\"><span class=\"toc-text\">IMAGE_TLS_CALLBACK</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#DLL-PROCESS-ATTACH\"><span class=\"toc-text\">DLL_PROCESS_ATTACH</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#DLL-THREAD-ATTACH\"><span class=\"toc-text\">DLL_THREAD_ATTACH</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#DLL-THREAD-DETACH\"><span class=\"toc-text\">DLL_THREAD_DETACH</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#DLL-PROCESS-DETACH\"><span class=\"toc-text\">DLL_PROCESS_DETACH</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0%EF%BC%9ATlsTest-exe\"><span class=\"toc-text\">练习：TlsTest.exe</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95TLS%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">调试TLS回调函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0TLS%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">手动添加TLS回调函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BF%AE%E6%94%B9%E5%89%8D%E7%9A%84%E5%8E%9F%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">1.修改前的原程序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%AE%BE%E8%AE%A1%E8%A7%84%E5%88%92\"><span class=\"toc-text\">2.设计规划</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E5%8A%A0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E8%8A%82%E5%8C%BA%E7%9A%84%E5%A4%A7%E5%B0%8F\"><span class=\"toc-text\">增加最后一个节区的大小</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E7%BC%96%E8%BE%91PE%E6%96%87%E4%BB%B6%E5%A4%B4\"><span class=\"toc-text\">3.编辑PE文件头</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#rsrc%E8%8A%82%E5%8C%BA%E5%A4%B4\"><span class=\"toc-text\">.rsrc节区头</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#IMAGE-DATA-DIRECTORY-9\"><span class=\"toc-text\">IMAGE_DATA_DIRECTORY[9]</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%AE%BE%E7%BD%AEIMAGE-TLS-DIRECTORY\"><span class=\"toc-text\">4.设置IMAGE_TLS_DIRECTORY</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E7%BC%96%E5%86%99TLS%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">5.编写TLS回调函数</span></a></li></ol></li></ol></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"SEH","uid":"b42df1b10b510ae71ca0bc4d234a8f72","slug":"SEH","date":"2022-04-20T08:19:17.000Z","updated":"2025-06-08T15:26:30.339Z","comments":true,"path":"api/articles/SEH.json","keywords":null,"cover":[],"text":"SEH是Windows操作系统提供的异常处理机制，在程序源代码中使用__try、__except、__finally关键字来具体实现。 初识SEH下面将通过一个...","permalink":"/post/SEH","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"Windows异常处理机制","slug":"Windows异常处理机制","count":2,"path":"api/tags/Windows异常处理机制.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"认识PEB","uid":"716452a8f7139876fcd7d9fc7c5bbc0e","slug":"认识PEB","date":"2022-04-09T14:10:54.000Z","updated":"2025-06-08T15:18:01.815Z","comments":true,"path":"api/articles/认识PEB.json","keywords":null,"cover":[],"text":"PEB（Process Environment Block，进程环境块） PEB存放进程信息的结构体。 PEB 结构体的定义PEB结构体成员使用Windbg调试...","permalink":"/post/认识PEB","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"PEB","slug":"PEB","count":1,"path":"api/tags/PEB.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}