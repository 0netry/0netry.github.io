{"title":"PE解析——IAT","uid":"72108d70d9a862b742fe8e97b0c6b415","slug":"PE解析——IAT","date":"2021-12-23T11:51:51.000Z","updated":"2025-06-08T15:10:02.038Z","comments":true,"path":"api/articles/PE解析——IAT.json","keywords":null,"cover":[],"content":"<p>IAT全称Import Address Table，即导入地址表</p>\n<h1 id=\"IMAGE-IMPORT-DESCRIPTOR结构体\"><a href=\"#IMAGE-IMPORT-DESCRIPTOR结构体\" class=\"headerlink\" title=\"IMAGE_IMPORT_DESCRIPTOR结构体\"></a>IMAGE_IMPORT_DESCRIPTOR结构体</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct _IMAGE_IMPORT_DESCRIPTOR &#123;</span><br><span class=\"line\">    union &#123;</span><br><span class=\"line\">        DWORD   Characteristics;            // 0 for terminating null import descriptor</span><br><span class=\"line\">        DWORD   OriginalFirstThunk;         // RVA to original unbound IAT                                                           // (PIMAGE_THUNK_DATA)</span><br><span class=\"line\">    &#125; DUMMYUNIONNAME;</span><br><span class=\"line\">    DWORD   TimeDateStamp;                  // 0 if not bound,</span><br><span class=\"line\">                                            // -1 if bound, and real date\\time stamp</span><br><span class=\"line\">                                            // in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new                                             // BIND)</span><br><span class=\"line\">                                            // O.W. date/time stamp of DLL bound to (Old                                             //BIND)</span><br><span class=\"line\"></span><br><span class=\"line\">    DWORD   ForwarderChain;                 // -1 if no forwarders</span><br><span class=\"line\">    DWORD   Name;</span><br><span class=\"line\">    DWORD   FirstThunk;                     // RVA to IAT (if bound this IAT has actual \t\t\t\t\t\t\t\t\t\t\t   addresses)</span><br><span class=\"line\">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br><span class=\"line\">typedef IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure>\n\n<p>每一个这样的结构体都代表了一个外部模块，导入多少库就存在多少个IMAGE_IMPORT_DESCRIPTOR结构体，这些结构体形成了数组，且结构体数组最后以NULL结构体结束</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/E_IMPORT_DESCRIPTOR.png\" alt=\"IMAGE_IMPORT_DESCRIPTOR\"></p>\n<h1 id=\"IMAGE-THUNK-DATA结构体\"><a href=\"#IMAGE-THUNK-DATA结构体\" class=\"headerlink\" title=\"IMAGE_THUNK_DATA结构体\"></a>IMAGE_THUNK_DATA结构体</h1><p>32位：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IMAGE_THUNK_DATA32</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">        DWORD ForwarderString;      <span class=\"comment\">// PBYTE，指向一个转向者字符串的RVA</span></span><br><span class=\"line\">        DWORD Function;             <span class=\"comment\">// PDWORD，被输入的函数的内存地址</span></span><br><span class=\"line\">        DWORD Ordinal;              <span class=\"comment\">// 被输入的API 的序数值</span></span><br><span class=\"line\">        DWORD AddressOfData;        <span class=\"comment\">// PIMAGE_IMPORT_BY_NAME，指向 IMAGE_IMPORT_BY_NAME</span></span><br><span class=\"line\">    &#125; u1;</span><br><span class=\"line\">&#125; IMAGE_THUNK_DATA32;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/E_THUNK_DATA.png\" alt=\"IMAGE_THUNK_DATA\"></p>\n<p>64位：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct _IMAGE_THUNK_DATA64 &#123;</span><br><span class=\"line\">    union &#123;</span><br><span class=\"line\">        ULONGLONG ForwarderString;  // PBYTE </span><br><span class=\"line\">        ULONGLONG Function;         // PDWORD</span><br><span class=\"line\">        ULONGLONG Ordinal;</span><br><span class=\"line\">        ULONGLONG AddressOfData;    // PIMAGE_IMPORT_BY_NAME</span><br><span class=\"line\">    &#125; u1;</span><br><span class=\"line\">&#125; IMAGE_THUNK_DATA64;</span><br><span class=\"line\">typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;</span><br></pre></td></tr></table></figure>\n\n<p>一个IMAGE_THUNK_DATA结构实际上就是一个双字，之所以把它定义成结构，是因为它在不同时刻有不同的含义：</p>\n<p>当IMAGE_THUNK_DATA 值的最高位为 1时，表示函数以序号方式输入，这时候低 31位被看作一个函数序号。（读者可以用预定义值IMAGE_ORDINAL_FLAG32或80000000h来对最高位进行测试）<br>当 IMAGE_THUNK_DATA 值的最高位为 0时，表示函数以字符串类型的函数名方式输入，这时双字的值是一个 RVA，指向一IMAGE_IMPORT_BY_NAME 结构。</p>\n<h1 id=\"IMAGE-IMPORT-BY-NAME结构体\"><a href=\"#IMAGE-IMPORT-BY-NAME结构体\" class=\"headerlink\" title=\"IMAGE_IMPORT_BY_NAME结构体\"></a>IMAGE_IMPORT_BY_NAME结构体</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct _IMAGE_IMPORT_BY_NAME &#123;</span><br><span class=\"line\">    WORD    Hint;</span><br><span class=\"line\">    CHAR   Name[1];</span><br><span class=\"line\">&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/RT_BY_NAME.png\" alt=\"IMPORT_BY_NAME\"></p>\n<p>Hint字段：指示本函数在其所驻留的输出表的中序号该域被PE装载器用来在DLL的输出表里快速查询。该值不是必须的，一些链接器将此值设为0；</p>\n<p>NAME字段：这个字段比较重要。它含有输入函数的函数名，函数名是一个ASCII码字符串，并以NULL结尾。注意，这里虽然将NAME的大小定义为字节，其实他是可变的。</p>\n<p>INT就是由多个IMAGE_IMPORT_BY_NAME结构体组成</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>INT与IAT是长整型（4个字节数据类型）数组，以NULL结束</p>\n<p>INT中各元素的值为IMAGE_IMPORT_BY_NAME结构体指针（有时IA6也拥有相同的值）</p>\n<p>INT与IAT的大小应相同</p></blockquote>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ew%E6%9F%A5%E7%9C%8BINT.png\" alt=\"PEView查看INT\"></p>\n<h1 id=\"IMAGE-IMPORT-DESCRIPTOR结构体重要成员\"><a href=\"#IMAGE-IMPORT-DESCRIPTOR结构体重要成员\" class=\"headerlink\" title=\"IMAGE_IMPORT_DESCRIPTOR结构体重要成员\"></a>IMAGE_IMPORT_DESCRIPTOR结构体重要成员</h1><h2 id=\"OriginalFirstThunk\"><a href=\"#OriginalFirstThunk\" class=\"headerlink\" title=\"OriginalFirstThunk\"></a>OriginalFirstThunk</h2><p>INT的地址（RVA）</p>\n<p>这个字段包含指向输入名称表（简称INT，Import Name Table）的RVA，INT是一个IMAGE_THUNK_DATA结构的数组，数组中的每个IMAGE_THUNK_DATA结构指向IMAGE_IMPORT_BY_NAME结构，数组最后以一个内容为0的IMAGE_THUNK_DATA结构结束。</p>\n<p>直接看这个描肯定感觉很绕，下面看看这几个结构的关系图，希望能够帮助理解（其实就是1指向2再指向3）：</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/inalFirstThunk%E7%9B%B8%E5%85%B3%E7%BB%93%E6%9E%84%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BE.png\" alt=\"img\"></p>\n<h2 id=\"Name\"><a href=\"#Name\" class=\"headerlink\" title=\"Name\"></a>Name</h2><p>它表示DLL 名称的相对虚地址（译注：相对一个用null作为结束符的ASCII字符串的一个RVA，该字符串是该导入DLL文件的名称，如：KERNEL32.DLL）。</p>\n<h2 id=\"FirstThunk\"><a href=\"#FirstThunk\" class=\"headerlink\" title=\"FirstThunk\"></a>FirstThunk</h2><p>IAT的地址（RVA）</p>\n<p>包含指向输入地址表（IAT，Import Address Table）的RVA。IAT也是指向IAMGE_THUNK_DATA结构。</p>\n<p>指向一个包含一系列IMAGE_THUNK_DATA结构的数组，数组中的每个IMAGE_THUNK_DATA结构定义了一个导入函数的信息，数组最后以一个内容为0的IMAGE_THUNK_DATA结构作为结束。</p>\n<p>导入表中第一个IMAGE_IMPORT_DESCRIPTOR结构的FirstThunk字段指向的就是IAT的起始地址。也可以通过数据目录表的第13项找到IAT数据块的位置和大小。</p>\n<p>PE加载器通过Name成员拿到DLL名称,再通过OriginalFirstThunk成员拿到函数名,之后通过GetProcAddress获取函数地址后填写到FirstThunk成员中</p>\n<h1 id=\"输入地址表（IAT，Import-Address-Table）\"><a href=\"#输入地址表（IAT，Import-Address-Table）\" class=\"headerlink\" title=\"输入地址表（IAT，Import Address Table）\"></a>输入地址表（IAT，Import Address Table）</h1><p> 接下来要讲的才是最为关键的部分。通过上面的了解大概我们都会疑惑为啥这两个数组都要指向IMAGR_IMPORT_BY_NAME结构？原因如下：</p>\n<p>当PE文件被装入内存的时候，其中一个数组的值将被改作他用，正如上面分析的，Windows装载器会将指令Jmp dword ptr[xxxxxxxx]指定的xxxxxxxx处的RVA替换成真正的函数地址，其实xxxxxxx地址正是FirstThunk字段指向的那个数组的一员。</p>\n<p>实际上，当PE文件被装入内存后，内存中的映象就被Windows装载器修正成了下图的样子，其中由FirstThunk字段指向的那个数组中的每个双字都被替换成了真正的函数入口地址，之所以在PE文件中使用两份IMAGE_THUNK_DATA 数组的拷贝并修改其中的一份，是为了最后还可以留下一份拷贝用来反过来查询地址所对应的导入函数名。</p>\n<p>第一，第一个由OriginalFrist通过IMAGE_THUNK_DATA结构所指向的IMAGE_IMPORT_BY_NAME是单独的一项，而且IMAGE_THUNK_DATA的值不可以更改，这个IMAGE_THUNK_DATA组成的数组就是INT，其实它是为FristThunk做为提示用的。</p>\n<p>第二，第二个由FristThunk所指向的IMAGE_THUNK_DATA的值是由PE装载器填写的，他们的值构成了IAT。PE装载器首先搜索OringinalFristThunk，通过它所指向的INT结构中的每个IMAGE_IMPORT_BY_NAME所指向的每个被载入函数的地址。然后通过加载器将值填充到FristThunk指向的IAT表中。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>PE装载器把导入函数输入至IAT的顺序：</p>\n<p>1.读取IID（IMAGE_IMPORT_DESCRIPTOR）的Name成员，获取库名称字符串（”kernel32.dll”）</p>\n<p>2.装载相应库</p>\n<p>-&gt;LoadLibrary(“kernel32.dll”)</p>\n<p>3.读取IID的OriginalFirstThunk成员，获取INT（Import Name Table）地址</p>\n<p>4.逐一读取INT中数组的值，获取相应IMAGE_IMPORT_BY_NAME地址（RVA）</p>\n<p>5.使用IMAGE_IMPORT_BY_NAME的Hint（ordinal）或Name项，获取相应函数的起始地址</p>\n<p>-&gt;GetProcAddress(“GetCurrentThreaadld”)</p>\n<p>6.读取IID的FirstThunk（IAT）成员，获取IAT地址</p>\n<p>7.将上面获得的函数地址输入相应IAT数组值</p>\n<p>8.重复以上步骤4-7，直到INT结束（遇到NULL时）</p></blockquote>\n<p>接下来对比一下加载前后的INT表和IAT表值变化：</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/INT%E8%A1%A8%E5%92%8CIAT%E8%A1%A8%E5%80%BC.png\" alt=\"img\"></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/INT%E8%A1%A8%E5%92%8CIAT%E8%A1%A8%E5%80%BC.png\" alt=\"img\"></p>\n<p>可以看到， 加载后，显示IAT的值已经填充了函数地址</p>\n<h1 id=\"解析PE结构IAT思路\"><a href=\"#解析PE结构IAT思路\" class=\"headerlink\" title=\"解析PE结构IAT思路\"></a>解析PE结构IAT思路</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//解析PE文件结构</span></span><br><span class=\"line\">HMODULE hModImageBase = GetModuleHandle(<span class=\"literal\">NULL</span>); <span class=\"comment\">//获取当前的ImagBase(基址)</span></span><br><span class=\"line\">PIMAGE_DOS_HEADER pDosHead = (PIMAGE_DOS_HEADER)(DWORD)hModImageBase; <span class=\"comment\">//获取DOS头</span></span><br><span class=\"line\">DWORD dwTemp = (DWORD)pDosHead + (DWORD)pDosHead-&gt;e_lfanew;</span><br><span class=\"line\">PIMAGE_NT_HEADERS pNtHead = (PIMAGE_NT_HEADERS)dwTemp;  <span class=\"comment\">//获取NT头</span></span><br><span class=\"line\">PIMAGE_FILE_HEADER pFileHead = (PIMAGE_FILE_HEADER)&amp; pNtHead-&gt;FileHeader;  <span class=\"comment\">//获取标准PE头</span></span><br><span class=\"line\">PIMAGE_OPTIONAL_HEADER pOptHead = (PIMAGE_OPTIONAL_HEADER)&amp; pNtHead-&gt;OptionalHeader;  <span class=\"comment\">//获取扩展PE头</span></span><br><span class=\"line\">DWORD dwImportLocal = pOptHead-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress; <span class=\"comment\">//找到导入表的偏移(RVA)</span></span><br><span class=\"line\">PIMAGE_IMPORT_DESCRIPTOR   pImport = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)GetModuleHandle(<span class=\"literal\">NULL</span>) + dwImportLocal);  <span class=\"comment\">//获取导入表</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.bilibili.com/read/cv198689/?spm_id_from=333.999.0.0\">Windows系统32位可执行文件格式笔记①</a></p>\n<p><a href=\"https://www.bilibili.com/read/cv200153/?spm_id_from=333.999.0.0\">Windows系统32位可执行文件格式笔记②</a></p>\n<p><a href=\"https://www.bilibili.com/read/cv200153/?spm_id_from=333.999.0.0\">Windows系统32位可执行文件格式笔记③</a></p>\n<p><a href=\"https://www.jianshu.com/p/741c926ba705\">Windows PE权威指南(导入表)</a></p>\n<p><a href=\"https://www.cnblogs.com/Chary/p/12981261.html\">《PE总结 》</a></p>\n<p><a href=\"https://www.cnblogs.com/2f28/p/9819005.html\">PE文件格式详解(五)</a></p>\n","text":"IAT全称Import Address Table，即导入地址表 IMAGE_IMPORT_DESCRIPTOR结构体123456789101112131415...","permalink":"/post/PE解析——IAT","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":9,"path":"api/tags/逆向.json"},{"name":"PE文件","slug":"PE文件","count":3,"path":"api/tags/PE文件.json"},{"name":"IAT","slug":"IAT","count":1,"path":"api/tags/IAT.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IMAGE-IMPORT-DESCRIPTOR%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">IMAGE_IMPORT_DESCRIPTOR结构体</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IMAGE-THUNK-DATA%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">IMAGE_THUNK_DATA结构体</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IMAGE-IMPORT-BY-NAME%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">IMAGE_IMPORT_BY_NAME结构体</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IMAGE-IMPORT-DESCRIPTOR%E7%BB%93%E6%9E%84%E4%BD%93%E9%87%8D%E8%A6%81%E6%88%90%E5%91%98\"><span class=\"toc-text\">IMAGE_IMPORT_DESCRIPTOR结构体重要成员</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#OriginalFirstThunk\"><span class=\"toc-text\">OriginalFirstThunk</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Name\"><span class=\"toc-text\">Name</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#FirstThunk\"><span class=\"toc-text\">FirstThunk</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E5%9C%B0%E5%9D%80%E8%A1%A8%EF%BC%88IAT%EF%BC%8CImport-Address-Table%EF%BC%89\"><span class=\"toc-text\">输入地址表（IAT，Import Address Table）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%90PE%E7%BB%93%E6%9E%84IAT%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">解析PE结构IAT思路</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"GitHub搭建自己的博客","uid":"f48f1848e82a474528d06090473058c1","slug":"GitHub搭建自己的博客","date":"2022-02-15T15:24:16.000Z","updated":"2025-06-04T10:15:10.501Z","comments":true,"path":"api/articles/GitHub搭建自己的博客.json","keywords":null,"cover":"/img/bigball.jpg","text":"安装Node.js根据自己的电脑安装对应的版本，安装选项全部默认，一路点击Next。 安装好之后，按Win+R打开命令提示符，输入node -v和npm -v，...","permalink":"/post/GitHub搭建自己的博客","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"搭建博客","slug":"搭建博客","count":1,"path":"api/tags/搭建博客.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"PE文件格式","uid":"cb93d0cd82726110c8a724aa5589f118","slug":"PE文件格式","date":"2021-12-21T12:42:30.000Z","updated":"2025-06-08T15:10:20.465Z","comments":true,"path":"api/articles/PE文件格式.json","keywords":null,"cover":[],"text":"PE文件种类 种类 主扩展名 可执行系列 EXE、SRC 库系列 DLL、OCX、CPL、DRV 驱动程序系列 SYS、VXD 对象文件系列 OBJ 严格来说，...","permalink":"/post/PE文件格式","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":9,"path":"api/tags/逆向.json"},{"name":"PE文件","slug":"PE文件","count":3,"path":"api/tags/PE文件.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}