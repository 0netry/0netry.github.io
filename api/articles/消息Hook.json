{"title":"消息Hook","uid":"f1607dee380ae8a16588d94dd0edba33","slug":"消息Hook","date":"2022-03-20T05:39:13.000Z","updated":"2025-06-05T12:25:59.568Z","comments":true,"path":"api/articles/消息Hook.json","keywords":null,"cover":[],"content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>Windows操作系统向用户提供GUI，它以事件驱动方式工作。在操作系统中借助键盘、鼠标，选择菜单、按钮，以及移动鼠标、改变窗口大小与位置等都是事件。发生这样的事件时，OS会把事先定义好的消息发送给相应的应用程序，应用程序分析收到的信息后执行相应的动作。也就是说，敲击键盘时，消息会从OS移动到应用程序。所谓的消息钩子就是在此间偷看这些消息。</p>\n<p>先讲常规Windows消息流：</p>\n<ul>\n<li>发生键盘输入事件时，WM_KEYDOWN消息被添加到[OS message queue]</li>\n<li>OS判断哪个应用程序中发生了事件，然后从[OS message queue]取出消息，添加到相应应用程序的[application message queue]中</li>\n<li>应用程序（如记事本）监视自身的[application message queue]，发现新添加的WM_KEYDOWN消息后，调用相应的事件处理程序处理</li>\n</ul>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E7%90%86.png\" alt=\"消息钩取工作原理\"></p>\n<p>如上图所示，OS消息队列与应用程序消息队列之间存在一条钩链（Hook Chain），设置好键盘消息钩子之后，处于钩链中的键盘消息钩子会比应用程序先看到相应信息。在键盘消息钩子函数的内部，除了可以查看消息之外，还可以修改消息本身，而且还能对消息实施拦截，阻止消息传递。</p>\n<h2 id=\"SetWindowsHookEx\"><a href=\"#SetWindowsHookEx\" class=\"headerlink\" title=\"SetWindowsHookEx()\"></a>SetWindowsHookEx()</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>使用SetWindowsHookEx() API可以轻松实现消息钩子，其定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HHOOK <span class=\"title function_\">SetWindowsHookExA</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">  [in] <span class=\"type\">int</span>       idHook,                        <span class=\"comment\">//hook type</span></span></span><br><span class=\"line\"><span class=\"params\">  [in] HOOKPROC  lpfn,                          <span class=\"comment\">//hook procedure</span></span></span><br><span class=\"line\"><span class=\"params\">  [in] HINSTANCE hmod,                          <span class=\"comment\">//hook procedure所属的DLL句柄（Handle）</span></span></span><br><span class=\"line\"><span class=\"params\">  [in] DWORD     dwThreadId                     <span class=\"comment\">//想要挂钩的线程id</span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">HHOOK <span class=\"title function_\">SetWindowsHookExW</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">  [in] <span class=\"type\">int</span>       idHook,</span></span><br><span class=\"line\"><span class=\"params\">  [in] HOOKPROC  lpfn,</span></span><br><span class=\"line\"><span class=\"params\">  [in] HINSTANCE hmod,</span></span><br><span class=\"line\"><span class=\"params\">  [in] DWORD     dwThreadId</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//参考：https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setwindowshookexa</span></span><br></pre></td></tr></table></figure>\n\n<p>钩子过程（hook procedure）是由操作系统调用的回调函数。安装消息钩子时，钩子过程需要存在于某个DLL内部，且该DLL的实例句柄即是hMod。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>若dwThreadId参数被设置为0，则安装的钩子为全局钩子，它会影响到运行中的（以及以后要运行的）所有进程。</p></blockquote>\n<p>像这样，使用SetWindowsHookEx() 设置好消息钩子后，在某个进程中生成指定消息时，操作系统会将相关的DLL文件强制注入相应进程，然后调用注册的钩子过程。注入进程时用户几乎不需要做什么。</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><h4 id=\"in-idHook\"><a href=\"#in-idHook\" class=\"headerlink\" title=\"[in] idHook\"></a>[in] idHook</h4><p>要安装的挂钩过程的类型。 此参数的取值可为下列值之一：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">值</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>WH_CALLWNDPROC</strong>（4）</td>\n<td align=\"left\">安装一个挂钩过程，用于在系统将消息发送到目标窗口过程之前监视消息。 有关详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-callwindowprocw\">CallWindowProcW 函数</a>&#x2F;<a href=\"https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-callwindowproca\">CallWindowProcA 函数</a> 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_CALLWNDPROCRET</strong>（12）</td>\n<td align=\"left\">安装一个挂钩过程，该过程在目标窗口过程处理消息后监视消息。 有关详细信息，请参阅 [HOOKPROC 回调函数] (nc-winuser-hookproc.md) 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_CBT</strong>（5）</td>\n<td align=\"left\">安装用于接收对 CBT 应用程序有用的通知的挂钩过程。 有关详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/winmsg/cbtproc\">CBTProc</a> 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_DEBUG</strong>（9）</td>\n<td align=\"left\">安装可用于调试其他挂钩过程的挂钩过程。 有关详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/winmsg/debugproc\"><em>DebugProc</em></a> 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_FOREGROUNDIDLE</strong>（11）</td>\n<td align=\"left\">安装将在应用程序的前台线程变为空闲状态时调用的挂钩过程。 此挂钩可用于在空闲时间执行低优先级任务。 有关详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/winmsg/foregroundidleproc\"><em>ForegroundIdleProc</em></a> 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_GETMESSAGE</strong>（3）</td>\n<td align=\"left\">安装用于监视发布到消息队列的消息的挂钩过程。 有关详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/winmsg/getmsgproc\"><em>GetMsgProc</em></a> 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_JOURNALPLAYBACK</strong>（1）</td>\n<td align=\"left\">警告<strong>Windows 11及更新版本</strong>：不支持日记挂钩 API。 建议改用 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-sendinput\"><strong>SendInput</strong></a> TextInput API。安装一个挂钩过程，该过程发布以前由 <a href=\"https://learn.microsoft.com/zh-cn/windows/desktop/winmsg/about-hooks\">WH_JOURNALRECORD</a> 挂钩过程记录的消息。 有关详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/winmsg/journalplaybackproc\">JournalPlaybackProc</a> 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_JOURNALRECORD</strong>（0）</td>\n<td align=\"left\">警告<strong>Windows 11及更新版本</strong>：不支持日记挂钩 API。 建议改用 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-sendinput\"><strong>SendInput</strong></a> TextInput API。安装一个挂钩过程，用于记录发布到系统消息队列的输入消息。 此挂钩可用于记录宏。 有关详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/winmsg/journalrecordproc\">JournalRecordProc</a> 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_KEYBOARD</strong>（2）</td>\n<td align=\"left\">安装用于监视击键消息的挂钩过程。 有关详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/winmsg/keyboardproc\">KeyboardProc</a> 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_KEYBOARD_LL</strong>（13）</td>\n<td align=\"left\">安装用于监视低级别键盘输入事件的挂钩过程。 有关详细信息，请参阅 [LowLevelKeyboardProc] (&#x2F;windows&#x2F;win32&#x2F;winmsg&#x2F;lowlevelkeyboardproc) 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_MOUSE</strong>（7）</td>\n<td align=\"left\">安装监视鼠标消息的挂钩过程。 有关详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/winmsg/mouseproc\">MouseProc</a> 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_MOUSE_LL</strong>（14）</td>\n<td align=\"left\">安装用于监视低级别鼠标输入事件的挂钩过程。 有关详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/winmsg/lowlevelmouseproc\">LowLevelMouseProc</a> 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_MSGFILTER</strong>（-1）</td>\n<td align=\"left\">安装挂钩过程，用于监视由于对话框、消息框、菜单或滚动条中的输入事件而生成的消息。 有关详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/winmsg/messageproc\">MessageProc</a> 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_SHELL</strong>（10）</td>\n<td align=\"left\">安装一个挂钩过程，用于接收对 shell 应用程序有用的通知。 有关详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/winmsg/shellproc\">ShellProc</a> 挂钩过程。</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>WH_SYSMSGFILTER</strong>（6）</td>\n<td align=\"left\">安装挂钩过程，用于监视由于对话框、消息框、菜单或滚动条中的输入事件而生成的消息。 挂钩过程监视与调用线程位于同一桌面中的所有应用程序的消息。 有关详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/winmsg/sysmsgproc\">SysMsgProc</a> 挂钩过程。</td>\n</tr>\n</tbody></table>\n<h4 id=\"in-lpfn\"><a href=\"#in-lpfn\" class=\"headerlink\" title=\"[in] lpfn\"></a>[in] lpfn</h4><p>指向挂钩过程的指针。 如果 <em>dwThreadId</em> 参数为零或指定由其他进程创建的线程的标识符， <em>则 lpfn</em> 参数必须指向 DLL 中的挂钩过程。 否则， <em>lpfn</em> 可以指向与当前进程关联的代码中的挂钩过程。</p>\n<p>该指针指向的函数，根据 idHook的值来定，具体见上表</p>\n<h4 id=\"in-hmod\"><a href=\"#in-hmod\" class=\"headerlink\" title=\"[in] hmod\"></a>[in] hmod</h4><p>DLL 的句柄，其中包含 <em>lpfn</em> 参数指向的挂钩过程。 如果 <em>dwThreadId</em> 参数指定当前进程创建的线程，并且挂钩过程位于与当前进程关联的代码中，则必须将 <em>hMod</em> 参数设置为 <strong>NULL</strong>。</p>\n<h4 id=\"in-dwThreadId\"><a href=\"#in-dwThreadId\" class=\"headerlink\" title=\"[in] dwThreadId\"></a>[in] dwThreadId</h4><p>要与挂钩过程关联的线程的标识符。 对于桌面应用，如果此参数为零，则挂钩过程与调用线程在同一桌面中运行的所有现有线程相关联。</p>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>类型： <strong>HHOOK</strong></p>\n<p>如果函数成功，则返回值是挂钩过程的句柄。</p>\n<p>如果函数失败，则返回值为 NULL。 要获得更多的错误信息，请调用 GetLastError。</p>\n<h1 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h1><p>本例使用键盘钩取技术，拦截notepad.exe进程的键盘消息，使之无法显示在记事本中。</p>\n<p>KeyHook.dll文件是一个含有钩子过程的DLL文件。HookMain.exe是最先加载KeyHook.dll并安装键盘钩子的程序。HookMain.exe加载KeyHook.dll文件后使用SetWindowsHookEx()安装键盘钩子（KeyboardProc()）。若其他进程中发生键盘输入事件，OS就会强制将KeyHook.dll加载到相应进程的内存，然后调用KeyboardProc()函数。</p>\n<h2 id=\"HookMain-cpp源码分析\"><a href=\"#HookMain-cpp源码分析\" class=\"headerlink\" title=\"HookMain.cpp源码分析\"></a>HookMain.cpp源码分析</h2><p>HookMain.exe先加载KeyHook.dll文件，然后调用HookStart()函数开始钩取，用户输入’q’时，调用HookStop()函数终止钩取。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;conio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;windows.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tDEF_DLL_NAME\t\t<span class=\"string\">&quot;KeyHook.dll&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tDEF_HOOKSTART\t\t<span class=\"string\">&quot;HookStart&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tDEF_HOOKSTOP\t\t<span class=\"string\">&quot;HookStop&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">void</span> <span class=\"params\">(*PFN_HOOKSTART)</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">void</span> <span class=\"params\">(*PFN_HOOKSTOP)</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHMODULE\t\t\thDll = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tPFN_HOOKSTART\tHookStart = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tPFN_HOOKSTOP\tHookStop = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\t\tch = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//加载KeyHook.dll</span></span><br><span class=\"line\">\thDll = LoadLibraryA(DEF_DLL_NAME);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( hDll == <span class=\"literal\">NULL</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;LoadLibrary(%s) failed!!! [%d]&quot;</span>, DEF_DLL_NAME, GetLastError());</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取导出函数地址</span></span><br><span class=\"line\">\tHookStart = (PFN_HOOKSTART)GetProcAddress(hDll, DEF_HOOKSTART);</span><br><span class=\"line\">\tHookStop = (PFN_HOOKSTOP)GetProcAddress(hDll, DEF_HOOKSTOP);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//开始钩取</span></span><br><span class=\"line\">\tHookStart();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//等待直到用户输入&#x27;q&#x27;</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;press &#x27;q&#x27; to quit!\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>( _getch() != <span class=\"string\">&#x27;q&#x27;</span> )\t;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//终止钩取</span></span><br><span class=\"line\">\tHookStop();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//卸载KeyHook.dll</span></span><br><span class=\"line\">\tFreeLibrary(hDll);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"KeyHook-cpp源码分析\"><a href=\"#KeyHook-cpp源码分析\" class=\"headerlink\" title=\"KeyHook.cpp源码分析\"></a>KeyHook.cpp源码分析</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;windows.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEF_PROCESS_NAME\t\t<span class=\"string\">&quot;notepad.exe&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">HINSTANCE g_hInstance = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">HHOOK g_hHook = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">HWND g_hWnd = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL WINAPI <span class=\"title function_\">DllMain</span><span class=\"params\">(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpvReserved)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>( dwReason )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:</span><br><span class=\"line\">\t\t\tg_hInstance = hinstDLL;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LRESULT CALLBACK <span class=\"title function_\">KeyboardProc</span><span class=\"params\">(<span class=\"type\">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> szPath[MAX_PATH] = &#123;<span class=\"number\">0</span>,&#125;;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( nCode &gt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// bit 31 : 0 =&gt; key press, 1 =&gt; key release</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( !(lParam &amp; <span class=\"number\">0x80000000</span>) ) <span class=\"comment\">//释放键盘按键时</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tGetModuleFileNameA(<span class=\"literal\">NULL</span>, szPath, MAX_PATH);</span><br><span class=\"line\">\t\t\tp = <span class=\"built_in\">strrchr</span>(szPath, <span class=\"string\">&#x27;\\\\&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 比较当前进程名称，若为notepad.exe，则消息不会传递给应用程序（或下一个钩子）</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>( !_stricmp(p + <span class=\"number\">1</span>, DEF_PROCESS_NAME) )</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//若非notepad.exe，则调用CallNextHookEx()函数</span></span><br><span class=\"line\">    <span class=\"comment\">//将消息传递给应用程序（或下一个钩子）</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> CallNextHookEx(g_hHook, nCode, wParam, lParam);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\t__declspec(dllexport) <span class=\"type\">void</span> <span class=\"title function_\">HookStart</span><span class=\"params\">()</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tg_hHook = SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__declspec(dllexport) <span class=\"type\">void</span> <span class=\"title function_\">HookStop</span><span class=\"params\">()</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( g_hHook )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tUnhookWindowsHookEx(g_hHook);</span><br><span class=\"line\">\t\t\tg_hHook = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>DLL的代码很简单，调用导出函数HookStart()时，SetWindowsHookEx()函数就会将KeyboardProc()添加到键盘钩链。</p>\n<h3 id=\"KeyboardProc\"><a href=\"#KeyboardProc\" class=\"headerlink\" title=\"KeyboardProc()\"></a>KeyboardProc()</h3><p>当SetWindowsHookEx()函数的第一个参数为<strong>WH_KEYBOARD（2）</strong>时，就会安装监视键盘消息的挂钩过程（KeyboardProc()）。</p>\n<p>安装好键盘钩子后，无论哪个进程，只要发生键盘输入事件，OS就会强制将KeyHook.dll注入相应进程。加载了KeyHook.dll的进程中，发生键盘事件时会首先调用执行KeyHook.KeyboardProc()。</p>\n<p>KeyboardProc()函数中发生键盘输入事件时，就会比较当前进程的名称是否为notepad.exe，若是，则返回1，终止KeyboardProc()函数，这意味着截获并删除消息。这样键盘消息就不会传递到notepad.exe程序的消息队列。</p>\n<p>除此之外（即当前进程非notepad.exe），执行return CallNextHookEx(g_hHook, nCode, wParam, lParam);语句，消息会被传递到另一个应用程序或钩链的另一个钩子函数。</p>\n<h4 id=\"KeyboardProc-的定义\"><a href=\"#KeyboardProc-的定义\" class=\"headerlink\" title=\"KeyboardProc()的定义\"></a>KeyboardProc()的定义</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LRESULT CALLBACK <span class=\"title function_\">KeyboardProc</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">  _In_ <span class=\"type\">int</span>    code,</span></span><br><span class=\"line\"><span class=\"params\">  _In_ WPARAM wParam,</span></span><br><span class=\"line\"><span class=\"params\">  _In_ LPARAM lParam</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"KeyboardProc-的参数\"><a href=\"#KeyboardProc-的参数\" class=\"headerlink\" title=\"KeyboardProc()的参数\"></a>KeyboardProc()的参数</h4><ul>\n<li><p><strong>code</strong></p>\n<p>挂钩过程用于确定如何处理消息的代码。如果 <em>代码</em> 小于零，挂钩过程必须将消息传递给 <a href=\"https://learn.microsoft.com/zh-cn/windows/desktop/api/winuser/nf-winuser-callnexthookex\">CallNextHookEx</a> 函数，而无需进一步处理，并且应返回 <strong>CallNextHookEx</strong> 返回的值。</p>\n<p>其取值有<strong>HC_ACTION</strong>（0）或<strong>HC_NOREMOVE</strong>（3）</p>\n</li>\n<li><p><strong>wParam</strong></p>\n<p>生成 <a href=\"https://learn.microsoft.com/zh-cn/windows/desktop/inputdev/virtual-key-codes\">击键</a> 消息的密钥的虚拟密钥代码。其值有如下内容：</p>\n<p>参考：<a href=\"https://learn.microsoft.com/zh-cn/windows/win32/inputdev/virtual-key-codes\">https://learn.microsoft.com/zh-cn/windows/win32/inputdev/virtual-key-codes</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">常数</th>\n<th align=\"left\">Value</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>VK_LBUTTON</code></td>\n<td align=\"left\">0x01</td>\n<td align=\"left\">鼠标左键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_RBUTTON</code></td>\n<td align=\"left\">0x02</td>\n<td align=\"left\">鼠标右键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_CANCEL</code></td>\n<td align=\"left\">0x03</td>\n<td align=\"left\">控制中断处理</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_MBUTTON</code></td>\n<td align=\"left\">0x04</td>\n<td align=\"left\">鼠标中键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_XBUTTON1</code></td>\n<td align=\"left\">0x05</td>\n<td align=\"left\">X1 鼠标按钮</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_XBUTTON2</code></td>\n<td align=\"left\">0x06</td>\n<td align=\"left\">X2 鼠标按钮</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0x07</td>\n<td align=\"left\">保留</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_BACK</code></td>\n<td align=\"left\">0x08</td>\n<td align=\"left\">BACKSPACE 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_TAB</code></td>\n<td align=\"left\">0x09</td>\n<td align=\"left\">Tab 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0x0A-0B</td>\n<td align=\"left\">预留</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_CLEAR</code></td>\n<td align=\"left\">0x0C</td>\n<td align=\"left\">CLEAR 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_RETURN</code></td>\n<td align=\"left\">0x0D</td>\n<td align=\"left\">Enter 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0x0E-0F</td>\n<td align=\"left\">未分配</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_SHIFT</code></td>\n<td align=\"left\">0x10</td>\n<td align=\"left\">SHIFT 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_CONTROL</code></td>\n<td align=\"left\">0x11</td>\n<td align=\"left\">CTRL 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_MENU</code></td>\n<td align=\"left\">0x12</td>\n<td align=\"left\">Alt 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_PAUSE</code></td>\n<td align=\"left\">0x13</td>\n<td align=\"left\">PAUSE 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_CAPITAL</code></td>\n<td align=\"left\">0x14</td>\n<td align=\"left\">CAPS LOCK 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_KANA</code></td>\n<td align=\"left\">0x15</td>\n<td align=\"left\">IME Kana 模式</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_HANGUL</code></td>\n<td align=\"left\">0x15</td>\n<td align=\"left\">IME Hanguel 模式</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_IME_ON</code></td>\n<td align=\"left\">0x16</td>\n<td align=\"left\">IME 打开</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_JUNJA</code></td>\n<td align=\"left\">0x17</td>\n<td align=\"left\">IME Junja 模式</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_FINAL</code></td>\n<td align=\"left\">0x18</td>\n<td align=\"left\">IME 最终模式</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_HANJA</code></td>\n<td align=\"left\">0x19</td>\n<td align=\"left\">IME Hanja 模式</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_KANJI</code></td>\n<td align=\"left\">0x19</td>\n<td align=\"left\">IME Kanji 模式</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_IME_OFF</code></td>\n<td align=\"left\">0x1A</td>\n<td align=\"left\">IME 关闭</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_ESCAPE</code></td>\n<td align=\"left\">0x1B</td>\n<td align=\"left\">ESC 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_CONVERT</code></td>\n<td align=\"left\">0x1C</td>\n<td align=\"left\">IME 转换</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NONCONVERT</code></td>\n<td align=\"left\">0x1D</td>\n<td align=\"left\">IME 不转换</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_ACCEPT</code></td>\n<td align=\"left\">0x1E</td>\n<td align=\"left\">IME 接受</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_MODECHANGE</code></td>\n<td align=\"left\">0x1F</td>\n<td align=\"left\">IME 模式更改请求</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_SPACE</code></td>\n<td align=\"left\">0x20</td>\n<td align=\"left\">空格键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_PRIOR</code></td>\n<td align=\"left\">0x21</td>\n<td align=\"left\">PAGE UP 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NEXT</code></td>\n<td align=\"left\">0x22</td>\n<td align=\"left\">PAGE DOWN 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_END</code></td>\n<td align=\"left\">0x23</td>\n<td align=\"left\">END 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_HOME</code></td>\n<td align=\"left\">0x24</td>\n<td align=\"left\">HOME 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_LEFT</code></td>\n<td align=\"left\">0x25</td>\n<td align=\"left\">LEFT ARROW 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_UP</code></td>\n<td align=\"left\">0x26</td>\n<td align=\"left\">UP ARROW 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_RIGHT</code></td>\n<td align=\"left\">0x27</td>\n<td align=\"left\">RIGHT ARROW 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_DOWN</code></td>\n<td align=\"left\">0x28</td>\n<td align=\"left\">DOWN ARROW 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_SELECT</code></td>\n<td align=\"left\">0x29</td>\n<td align=\"left\">SELECT 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_PRINT</code></td>\n<td align=\"left\">0x2A</td>\n<td align=\"left\">PRINT 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_EXECUTE</code></td>\n<td align=\"left\">0x2B</td>\n<td align=\"left\">EXECUTE 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_SNAPSHOT</code></td>\n<td align=\"left\">0x2C</td>\n<td align=\"left\">PRINT SCREEN 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_INSERT</code></td>\n<td align=\"left\">0x2D</td>\n<td align=\"left\">INS 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_DELETE</code></td>\n<td align=\"left\">0x2E</td>\n<td align=\"left\">DEL 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_HELP</code></td>\n<td align=\"left\">0x2F</td>\n<td align=\"left\">HELP 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x30</td>\n<td align=\"left\">0 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x31</td>\n<td align=\"left\">1 个键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x32</td>\n<td align=\"left\">2 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x33</td>\n<td align=\"left\">3 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x34</td>\n<td align=\"left\">4 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x35</td>\n<td align=\"left\">5 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x36</td>\n<td align=\"left\">6 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x37</td>\n<td align=\"left\">7 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x38</td>\n<td align=\"left\">8 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x39</td>\n<td align=\"left\">9 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0x3A-40</td>\n<td align=\"left\">Undefined</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x41</td>\n<td align=\"left\">A 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x42</td>\n<td align=\"left\">B 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x43</td>\n<td align=\"left\">C 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x44</td>\n<td align=\"left\">D 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x45</td>\n<td align=\"left\">E 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x46</td>\n<td align=\"left\">F 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x47</td>\n<td align=\"left\">G 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x48</td>\n<td align=\"left\">H 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x49</td>\n<td align=\"left\">I 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x4A</td>\n<td align=\"left\">J 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x4B</td>\n<td align=\"left\">K 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x4C</td>\n<td align=\"left\">L 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x4D</td>\n<td align=\"left\">M 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x4E</td>\n<td align=\"left\">N 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x4F</td>\n<td align=\"left\">O 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x50</td>\n<td align=\"left\">P 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x51</td>\n<td align=\"left\">Q 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x52</td>\n<td align=\"left\">R 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x53</td>\n<td align=\"left\">S 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x54</td>\n<td align=\"left\">T 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x55</td>\n<td align=\"left\">U 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x56</td>\n<td align=\"left\">V 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x57</td>\n<td align=\"left\">W 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x58</td>\n<td align=\"left\">X 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x59</td>\n<td align=\"left\">Y 键</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">0x5A</td>\n<td align=\"left\">Z 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_LWIN</code></td>\n<td align=\"left\">0x5B</td>\n<td align=\"left\">左 Windows 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_RWIN</code></td>\n<td align=\"left\">0x5C</td>\n<td align=\"left\">右侧 Windows 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_APPS</code></td>\n<td align=\"left\">0x5D</td>\n<td align=\"left\">应用程序密钥</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0x5E</td>\n<td align=\"left\">预留</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_SLEEP</code></td>\n<td align=\"left\">0x5F</td>\n<td align=\"left\">计算机休眠键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NUMPAD0</code></td>\n<td align=\"left\">0x60</td>\n<td align=\"left\">数字键盘 0 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NUMPAD1</code></td>\n<td align=\"left\">0x61</td>\n<td align=\"left\">数字键盘 1 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NUMPAD2</code></td>\n<td align=\"left\">0x62</td>\n<td align=\"left\">数字键盘 2 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NUMPAD3</code></td>\n<td align=\"left\">0x63</td>\n<td align=\"left\">数字键盘 3 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NUMPAD4</code></td>\n<td align=\"left\">0x64</td>\n<td align=\"left\">数字键盘 4 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NUMPAD5</code></td>\n<td align=\"left\">0x65</td>\n<td align=\"left\">数字键盘 5 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NUMPAD6</code></td>\n<td align=\"left\">0x66</td>\n<td align=\"left\">数字键盘 6 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NUMPAD7</code></td>\n<td align=\"left\">0x67</td>\n<td align=\"left\">数字键盘 7 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NUMPAD8</code></td>\n<td align=\"left\">0x68</td>\n<td align=\"left\">数字键盘 8 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NUMPAD9</code></td>\n<td align=\"left\">0x69</td>\n<td align=\"left\">数字键盘 9 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_MULTIPLY</code></td>\n<td align=\"left\">0x6A</td>\n<td align=\"left\">乘号键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_ADD</code></td>\n<td align=\"left\">0x6B</td>\n<td align=\"left\">加号键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_SEPARATOR</code></td>\n<td align=\"left\">0x6C</td>\n<td align=\"left\">分隔符键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_SUBTRACT</code></td>\n<td align=\"left\">0x6D</td>\n<td align=\"left\">减号键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_DECIMAL</code></td>\n<td align=\"left\">0x6E</td>\n<td align=\"left\">句点键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_DIVIDE</code></td>\n<td align=\"left\">0x6F</td>\n<td align=\"left\">除号键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F1</code></td>\n<td align=\"left\">0x70</td>\n<td align=\"left\">F1 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F2</code></td>\n<td align=\"left\">0x71</td>\n<td align=\"left\">F2 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F3</code></td>\n<td align=\"left\">0x72</td>\n<td align=\"left\">F3 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F4</code></td>\n<td align=\"left\">0x73</td>\n<td align=\"left\">F4 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F5</code></td>\n<td align=\"left\">0x74</td>\n<td align=\"left\">F5 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F6</code></td>\n<td align=\"left\">0x75</td>\n<td align=\"left\">F6 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F7</code></td>\n<td align=\"left\">0x76</td>\n<td align=\"left\">F7 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F8</code></td>\n<td align=\"left\">0x77</td>\n<td align=\"left\">F8 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F9</code></td>\n<td align=\"left\">0x78</td>\n<td align=\"left\">F9 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F10</code></td>\n<td align=\"left\">0x79</td>\n<td align=\"left\">F10 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F11</code></td>\n<td align=\"left\">0x7A</td>\n<td align=\"left\">F11 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F12</code></td>\n<td align=\"left\">0x7B</td>\n<td align=\"left\">F12 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F13</code></td>\n<td align=\"left\">0x7C</td>\n<td align=\"left\">F13 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F14</code></td>\n<td align=\"left\">0x7D</td>\n<td align=\"left\">F14 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F15</code></td>\n<td align=\"left\">0x7E</td>\n<td align=\"left\">F15 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F16</code></td>\n<td align=\"left\">0x7F</td>\n<td align=\"left\">F16 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F17</code></td>\n<td align=\"left\">0x80</td>\n<td align=\"left\">F17 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F18</code></td>\n<td align=\"left\">0x81</td>\n<td align=\"left\">F18 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F19</code></td>\n<td align=\"left\">0x82</td>\n<td align=\"left\">F19 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F20</code></td>\n<td align=\"left\">0x83</td>\n<td align=\"left\">F20 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F21</code></td>\n<td align=\"left\">0x84</td>\n<td align=\"left\">F21 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F22</code></td>\n<td align=\"left\">0x85</td>\n<td align=\"left\">F22 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F23</code></td>\n<td align=\"left\">0x86</td>\n<td align=\"left\">F23 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_F24</code></td>\n<td align=\"left\">0x87</td>\n<td align=\"left\">F24 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0x88-8F</td>\n<td align=\"left\">保留</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NUMLOCK</code></td>\n<td align=\"left\">0x90</td>\n<td align=\"left\">NUM LOCK 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_SCROLL</code></td>\n<td align=\"left\">0x91</td>\n<td align=\"left\">SCROLL LOCK 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0x92-96</td>\n<td align=\"left\">OEM 特有</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0x97-9F</td>\n<td align=\"left\">未分配</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_LSHIFT</code></td>\n<td align=\"left\">0xA0</td>\n<td align=\"left\">左 SHIFT 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_RSHIFT</code></td>\n<td align=\"left\">0xA1</td>\n<td align=\"left\">右 SHIFT 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_LCONTROL</code></td>\n<td align=\"left\">0xA2</td>\n<td align=\"left\">左 Ctrl 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_RCONTROL</code></td>\n<td align=\"left\">0xA3</td>\n<td align=\"left\">右 Ctrl 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_LMENU</code></td>\n<td align=\"left\">0xA4</td>\n<td align=\"left\">左 ALT 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_RMENU</code></td>\n<td align=\"left\">0xA5</td>\n<td align=\"left\">右 ALT 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_BROWSER_BACK</code></td>\n<td align=\"left\">0xA6</td>\n<td align=\"left\">浏览器后退键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_BROWSER_FORWARD</code></td>\n<td align=\"left\">0xA7</td>\n<td align=\"left\">浏览器前进键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_BROWSER_REFRESH</code></td>\n<td align=\"left\">0xA8</td>\n<td align=\"left\">浏览器刷新键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_BROWSER_STOP</code></td>\n<td align=\"left\">0xA9</td>\n<td align=\"left\">浏览器停止键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_BROWSER_SEARCH</code></td>\n<td align=\"left\">0xAA</td>\n<td align=\"left\">浏览器搜索键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_BROWSER_FAVORITES</code></td>\n<td align=\"left\">0xAB</td>\n<td align=\"left\">浏览器收藏键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_BROWSER_HOME</code></td>\n<td align=\"left\">0xAC</td>\n<td align=\"left\">浏览器“开始”和“主页”键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_VOLUME_MUTE</code></td>\n<td align=\"left\">0xAD</td>\n<td align=\"left\">静音键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_VOLUME_DOWN</code></td>\n<td align=\"left\">0xAE</td>\n<td align=\"left\">音量减小键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_VOLUME_UP</code></td>\n<td align=\"left\">0xAF</td>\n<td align=\"left\">音量增加键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_MEDIA_NEXT_TRACK</code></td>\n<td align=\"left\">0xB0</td>\n<td align=\"left\">下一曲目键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_MEDIA_PREV_TRACK</code></td>\n<td align=\"left\">0xB1</td>\n<td align=\"left\">上一曲目键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_MEDIA_STOP</code></td>\n<td align=\"left\">0xB2</td>\n<td align=\"left\">停止媒体键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_MEDIA_PLAY_PAUSE</code></td>\n<td align=\"left\">0xB3</td>\n<td align=\"left\">播放&#x2F;暂停媒体键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_LAUNCH_MAIL</code></td>\n<td align=\"left\">0xB4</td>\n<td align=\"left\">启动邮件键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_LAUNCH_MEDIA_SELECT</code></td>\n<td align=\"left\">0xB5</td>\n<td align=\"left\">选择媒体键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_LAUNCH_APP1</code></td>\n<td align=\"left\">0xB6</td>\n<td align=\"left\">启动应用程序 1 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_LAUNCH_APP2</code></td>\n<td align=\"left\">0xB7</td>\n<td align=\"left\">启动应用程序 2 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0xB8-B9</td>\n<td align=\"left\">预留</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_1</code></td>\n<td align=\"left\">0xBA</td>\n<td align=\"left\">用于杂项字符；它可能因键盘而异。 对于美国标准键盘，键<code>;:</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_PLUS</code></td>\n<td align=\"left\">0xBB</td>\n<td align=\"left\">对于任何国家&#x2F;地区，键<code>+</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_COMMA</code></td>\n<td align=\"left\">0xBC</td>\n<td align=\"left\">对于任何国家&#x2F;地区，键<code>,</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_MINUS</code></td>\n<td align=\"left\">0xBD</td>\n<td align=\"left\">对于任何国家&#x2F;地区，键<code>-</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_PERIOD</code></td>\n<td align=\"left\">0xBE</td>\n<td align=\"left\">对于任何国家&#x2F;地区，键<code>.</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_2</code></td>\n<td align=\"left\">0xBF</td>\n<td align=\"left\">用于杂项字符；它可能因键盘而异。 对于美国标准键盘，键<code>/?</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_3</code></td>\n<td align=\"left\">0xC0</td>\n<td align=\"left\">用于杂项字符；它可能因键盘而异。 对于美国标准键盘，键&#96;&#96;~&#96;</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0xC1-DA</td>\n<td align=\"left\">保留</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_4</code></td>\n<td align=\"left\">0xDB</td>\n<td align=\"left\">用于杂项字符；它可能因键盘而异。 对于美国标准键盘，键<code>[&#123;</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_5</code></td>\n<td align=\"left\">0xDC</td>\n<td align=\"left\">用于杂项字符；它可能因键盘而异。 对于美国标准键盘，键&#96;\\</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_6</code></td>\n<td align=\"left\">0xDD</td>\n<td align=\"left\">用于杂项字符；它可能因键盘而异。 对于美国标准键盘，键<code>]&#125;</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_7</code></td>\n<td align=\"left\">0xDE</td>\n<td align=\"left\">用于杂项字符；它可能因键盘而异。 对于美国标准键盘，键<code>&#39;&quot;</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_8</code></td>\n<td align=\"left\">0xDF</td>\n<td align=\"left\">用于杂项字符；它可能因键盘而异。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0xE0</td>\n<td align=\"left\">预留</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0xE1</td>\n<td align=\"left\">OEM 特有</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_102</code></td>\n<td align=\"left\">0xE2</td>\n<td align=\"left\">美国标准键盘上的 <code>&lt;&gt;</code> 键，或非美国 102 键键盘上的 &#96;\\</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0xE3-E4</td>\n<td align=\"left\">OEM 特有</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_PROCESSKEY</code></td>\n<td align=\"left\">0xE5</td>\n<td align=\"left\">IME PROCESS 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0xE6</td>\n<td align=\"left\">OEM 特有</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_PACKET</code></td>\n<td align=\"left\">0xE7</td>\n<td align=\"left\">用于将 Unicode 字符当作键击传递。 <code>VK_PACKET</code> 键是用于非键盘输入法的 32 位虚拟键值的低位字。 有关更多信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-keybdinput\"><code>KEYBDINPUT</code></a>、<a href=\"https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-sendinput\"><code>SendInput</code></a>、<a href=\"https://learn.microsoft.com/zh-cn/windows/win32/inputdev/wm-keydown\"><code>WM_KEYDOWN</code></a> 和 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/inputdev/wm-keyup\"><code>WM_KEYUP</code></a> 中的注释</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0xE8</td>\n<td align=\"left\">未分配</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">0xE9-F5</td>\n<td align=\"left\">OEM 特有</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_ATTN</code></td>\n<td align=\"left\">0xF6</td>\n<td align=\"left\">Attn 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_CRSEL</code></td>\n<td align=\"left\">0xF7</td>\n<td align=\"left\">CrSel 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_EXSEL</code></td>\n<td align=\"left\">0xF8</td>\n<td align=\"left\">ExSel 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_EREOF</code></td>\n<td align=\"left\">0xF9</td>\n<td align=\"left\">Erase EOF 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_PLAY</code></td>\n<td align=\"left\">0xFA</td>\n<td align=\"left\">Play 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_ZOOM</code></td>\n<td align=\"left\">0xFB</td>\n<td align=\"left\">Zoom 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_NONAME</code></td>\n<td align=\"left\">0xFC</td>\n<td align=\"left\">预留</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_PA1</code></td>\n<td align=\"left\">0xFD</td>\n<td align=\"left\">PA1 键</td>\n</tr>\n<tr>\n<td align=\"left\"><code>VK_OEM_CLEAR</code></td>\n<td align=\"left\">0xFE</td>\n<td align=\"left\">Clear 键</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>lParam</p>\n</li>\n</ul>\n<p>​            重复计数、扫描代码、扩展键标志、上下文代码、以前的键状态标志和转换状态标志。  有关 <em>lParam</em> 参数的详细信息，请参阅 <a href=\"https://learn.microsoft.com/zh-cn/windows/desktop/inputdev/about-keyboard-input\">击键消息标志</a>。下表描述了此值的位。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Bits</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0-15</td>\n<td align=\"left\">重复计数。 该值是用户按住键后重复击键的次数。</td>\n</tr>\n<tr>\n<td align=\"left\">16-23</td>\n<td align=\"left\">扫描代码。 此值取决于 OEM。</td>\n</tr>\n<tr>\n<td align=\"left\">24</td>\n<td align=\"left\">指示键是扩展键，例如功能键还是数字键盘上的键。 如果键是扩展键，则值为 1;否则为 0。</td>\n</tr>\n<tr>\n<td align=\"left\">25-28</td>\n<td align=\"left\">保留。</td>\n</tr>\n<tr>\n<td align=\"left\">29</td>\n<td align=\"left\">上下文代码。 如果 Alt 键关闭，则值为 1;否则为 0。</td>\n</tr>\n<tr>\n<td align=\"left\">30</td>\n<td align=\"left\">上一个键状态。 如果在发送消息之前键关闭，则值为 1;如果键已打开，则为 0。</td>\n</tr>\n<tr>\n<td align=\"left\">31</td>\n<td align=\"left\">转换状态。 如果按下键，则值为 0;如果释放键，则值为 1。</td>\n</tr>\n</tbody></table>\n<p>下图显示了这些标志和值在 lParam 参数中的位置。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/2.png\"></p>\n<p>应用程序可以使用以下值从 lParam 的高位字中获取击键标志。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">值</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">KF_EXTENDED 0x0100</td>\n<td align=\"left\">操作<a href=\"https://learn.microsoft.com/zh-cn/windows/win32/inputdev/about-keyboard-input#extended-key-flag\">扩展键标志</a>。</td>\n</tr>\n<tr>\n<td align=\"left\">KF_DLGMODE 0x0800</td>\n<td align=\"left\">操作对话框模式标志，该标志指示对话框是否处于活动状态。</td>\n</tr>\n<tr>\n<td align=\"left\">KF_MENUMODE 0x1000</td>\n<td align=\"left\">操作菜单模式标志，该标志指示菜单是否处于活动状态。</td>\n</tr>\n<tr>\n<td align=\"left\">KF_ALTDOWN 0x2000</td>\n<td align=\"left\">操作<a href=\"https://learn.microsoft.com/zh-cn/windows/win32/inputdev/about-keyboard-input#context-code\">上下文代码标志</a>。</td>\n</tr>\n<tr>\n<td align=\"left\">KF_REPEAT 0x4000</td>\n<td align=\"left\">操作<a href=\"https://learn.microsoft.com/zh-cn/windows/win32/inputdev/about-keyboard-input#previous-key-state-flag\">上一个键状态标志</a>。</td>\n</tr>\n<tr>\n<td align=\"left\">KF_UP 0x8000</td>\n<td align=\"left\">操作<a href=\"https://learn.microsoft.com/zh-cn/windows/win32/inputdev/about-keyboard-input#previous-key-state-flag\">转换状态标志</a>。</td>\n</tr>\n</tbody></table>\n<h4 id=\"KeyboardProc-的返回值\"><a href=\"#KeyboardProc-的返回值\" class=\"headerlink\" title=\"KeyboardProc()的返回值\"></a>KeyboardProc()的返回值</h4><p>如果 <em>代码</em> 小于零，挂钩过程必须返回 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-callnexthookex\"><strong>CallNextHookEx</strong></a> 返回的值。</p>\n<p>如果 <em>代码</em> 大于或等于零，并且挂钩过程未处理消息，强烈建议调用 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-callnexthookex\"><strong>CallNextHookEx</strong></a> 并返回它返回的值;否则，安装 <a href=\"https://learn.microsoft.com/zh-cn/windows/win32/winmsg/about-hooks\"><strong>WH_KEYBOARD</strong></a> 挂钩的其他应用程序将不会收到挂钩通知，因此行为可能不正确。</p>\n<p>如果挂钩过程处理了消息，它可能会返回非零值，以防止系统将消息传递给挂钩链的其余部分或目标窗口过程。</p>\n","text":"概念Windows操作系统向用户提供GUI，它以事件驱动方式工作。在操作系统中借助键盘、鼠标，选择菜单、按钮，以及移动鼠标、改变窗口大小与位置等都是事件。发生这...","permalink":"/post/消息Hook","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"hook技术","slug":"hook技术","count":6,"path":"api/tags/hook技术.json"},{"name":"逆向工程核心原理","slug":"逆向工程核心原理","count":7,"path":"api/tags/逆向工程核心原理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SetWindowsHookEx\"><span class=\"toc-text\">SetWindowsHookEx()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#in-idHook\"><span class=\"toc-text\">[in] idHook</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#in-lpfn\"><span class=\"toc-text\">[in] lpfn</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#in-hmod\"><span class=\"toc-text\">[in] hmod</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#in-dwThreadId\"><span class=\"toc-text\">[in] dwThreadId</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">返回值</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HookMain-cpp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">HookMain.cpp源码分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#KeyHook-cpp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">KeyHook.cpp源码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#KeyboardProc\"><span class=\"toc-text\">KeyboardProc()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#KeyboardProc-%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">KeyboardProc()的定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#KeyboardProc-%E7%9A%84%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">KeyboardProc()的参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#KeyboardProc-%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">KeyboardProc()的返回值</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"inline Hook","uid":"ef0903e74e5233a2be57edee3f37a5dc","slug":"inline-Hook","date":"2022-03-24T09:39:13.000Z","updated":"2025-06-04T08:36:57.256Z","comments":true,"path":"api/articles/inline-Hook.json","keywords":null,"cover":null,"text":"原理程序在编译链接后成了二进制代码，我们可以找到需要Hook的函数的地址，然后把这个函数在内存中的二进制代码改为一个JMP指令，令其跳转到执行我们自己构造的函数...","permalink":"/post/inline-Hook","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"24 mins."},"categories":[],"tags":[{"name":"hook技术","slug":"hook技术","count":6,"path":"api/tags/hook技术.json"},{"name":"逆向工程核心原理","slug":"逆向工程核心原理","count":7,"path":"api/tags/逆向工程核心原理.json"},{"name":"API hook","slug":"API-hook","count":5,"path":"api/tags/API-hook.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"VBScript教程","uid":"28df775ed85d265dbcba7f21d8f65afc","slug":"VBScript教程","date":"2022-03-15T14:05:53.000Z","updated":"2025-03-24T07:31:35.191Z","comments":true,"path":"api/articles/VBScript教程.json","keywords":null,"cover":null,"text":"VBScript 变量VBScript 变量VBScript 变量用于保存值或表达式。 变量可以有一个短的名称，如 x，或一个更具描述性的名称，如 carnam...","permalink":"/post/VBScript教程","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"编程","slug":"编程","count":1,"path":"api/categories/编程.json"}],"tags":[{"name":"编程","slug":"编程","count":1,"path":"api/tags/编程.json"},{"name":"VBScript","slug":"VBScript","count":1,"path":"api/tags/VBScript.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}