{"title":"IRP Hook","uid":"ba14c8c55e36720dc30bd604d682a355","slug":"IRP Hook","date":"2022-03-27T07:18:13.000Z","updated":"2025-06-05T15:26:12.964Z","comments":true,"path":"api/articles/IRP Hook.json","keywords":null,"cover":[],"content":"<h1 id=\"3环与0环通信（常规方式）\"><a href=\"#3环与0环通信（常规方式）\" class=\"headerlink\" title=\"3环与0环通信（常规方式）\"></a>3环与0环通信（常规方式）</h1><p>本篇介绍一下3环与0环通信的原理（常规方式），介绍与之相关的结构体，对象等，最后代码实现并模拟操作系统进行3环和0环的通信。</p>\n<h2 id=\"设备对象\"><a href=\"#设备对象\" class=\"headerlink\" title=\"设备对象\"></a>设备对象</h2><h3 id=\"内核通信的对象\"><a href=\"#内核通信的对象\" class=\"headerlink\" title=\"内核通信的对象\"></a>内核通信的对象</h3><p>内核中的通信，与应用层<strong>窗口间</strong>的通信<strong>类似</strong>，只是<strong>封装消息的结构体不同</strong>，接收<strong>消息结构体的对象不同</strong></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E9%80%9A%E4%BF%A1%EF%BC%88%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F%EF%BC%89/%E5%86%85%E6%A0%B8%E9%80%9A%E4%BF%A1%E4%B8%8E%E7%AA%97%E5%8F%A3%E9%80%9A%E4%BF%A1%E5%AF%B9%E6%AF%94.png\" alt=\"img\"></p>\n<ul>\n<li><p><strong>窗口通信</strong>：</p>\n<p>1）消息结构体：MSG</p>\n<p>2）接收消息的对象：窗口对象（Hwnd）</p>\n</li>\n<li><p><strong>内核通信</strong>：</p>\n<p>1）消息结构体：IRP（I&#x2F;O Request Package）</p>\n<p>2）接收消息的对象：设备对象（DeviceObject）</p>\n</li>\n</ul>\n<p>所以想要在<strong>内核通信</strong>，<strong>需要有</strong>(至少)一个用来接收和发送消息的<strong>设备对象</strong>。</p>\n<h3 id=\"创建设备对象\"><a href=\"#创建设备对象\" class=\"headerlink\" title=\"创建设备对象\"></a>创建设备对象</h3><p>窗口对象的创建也与设备对象也有不少共同点，这里继续拿来类比</p>\n<ul>\n<li><p><strong>窗口对象</strong>：<br>1）可以创建多个</p>\n<p>2）需要指定父窗口</p>\n</li>\n<li><p><strong>设备对象</strong>：<br>1）可以创建多个</p>\n<p>2）需要指定所属驱动对象</p>\n</li>\n</ul>\n<p>Windows提供了内核函数IoCreateDevice用来创建设备对象，参考如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define DEVICE_NAME L&quot;\\\\Device\\\\MyDevice&quot;\t</span><br><span class=\"line\"></span><br><span class=\"line\">PDEVICE_OBJECT pDeviceObj = NULL;</span><br><span class=\"line\">UNICODE_STRING DeviceName;</span><br><span class=\"line\">RtlInitUnicodeString(&amp;DeviceName, DEVICE_NAME);</span><br><span class=\"line\">NTSTATUS status = IoCreateDevice(pDriverObj,</span><br><span class=\"line\">\t0,</span><br><span class=\"line\">\t&amp;DeviceName,</span><br><span class=\"line\">\tFILE_DEVICE_UNKNOWN,</span><br><span class=\"line\">\t0,</span><br><span class=\"line\">\tFALSE,</span><br><span class=\"line\">\t&amp;pDeviceObj); </span><br><span class=\"line\"></span><br><span class=\"line\">if (status != STATUS_SUCCESS) &#123;</span><br><span class=\"line\">\tDbgPrint(&quot;Device Create Failed!\\n&quot;);</span><br><span class=\"line\">\treturn status;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pDriverObj：<strong>指定该设备</strong>创建后属于哪个<strong>驱动对象</strong>（PDRIVER_OBJECT）</li>\n<li>&amp;DeviceName：定义了一个DEVICE_NAME的宏，被用来初始化设备对象的名字。这个名字不能随便改（即”\\Device\\xxxxx”形式），在<strong>设备创建时</strong>，会根据设备名，<strong>将该设备挂到一个名为Device的树形结构中</strong>，几乎所有设备都挂在这。若改变此值，则会挂到其它树中。</li>\n<li>FILE_DEVICE_UNKNOWN：该处填写<strong>设备的类型</strong>，由于我们并没有实际的设备，所以选择UNKNOWN</li>\n<li>&amp;pDeviceObj：这个参数<strong>可以看作是一个二级指针</strong>，它指向一个地址。这个地址存着一个指针pDeviceObj，这个指针指向一个设备结构体。另一个要说明的是，这个参数是一个OUT类型的参数，原本pDeviceObj指向的内容是空的，在执行完设备创建的函数后，其<strong>指向创建出的设备对象</strong>。</li>\n</ul>\n<p>以上为几个比较关键的参数介绍，其余参数按照上述代码填写即可，具体含义可以参考<a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-iocreatedevice\">官方文档</a></p>\n<h2 id=\"数据传输方式\"><a href=\"#数据传输方式\" class=\"headerlink\" title=\"数据传输方式\"></a>数据传输方式</h2><p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E9%80%9A%E4%BF%A1%EF%BC%88%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F%EF%BC%89/deviceObj.png\" alt=\"img\"></p>\n<p>首先查看一下设备对象这个结构体，发现它有很多字段，这里我们只需要关注其中一个，就是Flags，这是一个四字节的值，设置了3环和0环数据交互的方式。语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这里必须是“|=”，不能直接写成“=”</span><br><span class=\"line\">pDeviceObj-&gt;Flags |= DO_BUFFERED_IO;</span><br></pre></td></tr></table></figure>\n\n<p>来看看有哪几种方式：</p>\n<ul>\n<li><strong>缓冲区方式读写（DO_BUFFERED_IO）：</strong>I&#x2F;O管理器会<strong>在内核空间中分配一块内存</strong>，把用户空间的数据复制到这块内存中，这样内核程序就可以访问这些数据，实现数据通信。<strong>适合数据量较小时使用</strong>。（之前介绍的跨进程读取内存用的就是这种方法）</li>\n<li><strong>直接方式读写（DO_DIRECT_IO）：</strong>I&#x2F;O管理器会<strong>将用户空间内的某片内存对应的物理页锁住</strong>，同时<strong>在内核空间再映射一份</strong>，这样内核空间线性地址与用户空间线性地址对应的是同一个物理页，这是双方均可以对这个物理页的内容进行读写，实现数据通信，此方法<strong>适合数据量较大时使用。</strong>（类似_KUSER_SHARED_DATA结构）</li>\n<li><strong>默认方式读写（NEITHER_IO）：</strong>当创建完设备对象后，不设置Flags的值，使用的就是此类读写方式。默认读写方式，<strong>仅仅提供给内核程序用户空间的线性地址</strong>，直接进行数据的读取。这样做的坏处是，如果发生线程切换，读取的就不再是同一份数据，容易造成程序读取错误。</li>\n</ul>\n<p>通常情况下，我们实验的数据不会太大，主要采取DO_BUFFERED_IO这种方式。这里有一点要注意的是，<strong>在设置DeviceObject.Flags的值时，千万不要直接用”&#x3D;”，必须使用”|&#x3D;”</strong>，因为在创建设备对象结构体时，Flags是有初始值的，若这里直接给Flags赋值，会刷新掉之前的初始值，导致程序执行时发生错误（驱动技仅能成功执行一次，第二次会失败）。</p>\n<h2 id=\"设置符号链接\"><a href=\"#设置符号链接\" class=\"headerlink\" title=\"设置符号链接\"></a>设置符号链接</h2><p>Windows规定，应用层的程序是不能直接访问设备对象的，所以符号链接诞生了。<strong>符号链接可以与设备对象绑定</strong>，这样<strong>应用层的程序</strong>就<strong>可以通过符号链接</strong>进行<strong>对设备对象的访问</strong>。符号链接在内核与3环的形式有所不同：</p>\n<ul>\n<li><strong>内核</strong>：符号链接以<code>”\\??\\“</code>开头，例如C盘就是<code>”\\??\\C:”</code></li>\n<li><strong>用户模式</strong>：符号链接以<code>”\\\\.\\“</code>开头，例如C就算<code>”\\\\.\\C:”</code></li>\n</ul>\n<p>具体在代码中还需要加入更多的<strong>“\\“用来转译符号</strong>，代码如下：</p>\n<h3 id=\"Ring0\"><a href=\"#Ring0\" class=\"headerlink\" title=\"Ring0\"></a>Ring0</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define SYM_LINK_NAME L&quot;\\\\??\\\\MyRing3Device&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">UNICODE_STRING SymbolicLinkName;</span><br><span class=\"line\">RtlInitUnicodeString(&amp;SymbolicLinkName, SYM_LINK_NAME);</span><br><span class=\"line\">IoCreateSymbolicLink(&amp;SymbolicLinkName, &amp;DeviceName);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ring3\"><a href=\"#Ring3\" class=\"headerlink\" title=\"Ring3\"></a>Ring3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define SYM_LINK_NAME L&quot;\\\\\\\\.\\\\MyRing3Device&quot;</span><br><span class=\"line\">//3环这里直接使用符号链接指向0环创建设备作为CreateFile的参数</span><br><span class=\"line\">//不用再次设置符号链接，符号链接是在0环设置的，这里在3环主要介绍用法</span><br><span class=\"line\">HANDLE hDevice = CreateFileW(</span><br><span class=\"line\">\t\tSYM_LINK_NAME, </span><br><span class=\"line\">\t\tGENERIC_READ | GENERIC_WRITE, </span><br><span class=\"line\">\t\t0,</span><br><span class=\"line\">\t\tNULL, </span><br><span class=\"line\">\t\tOPEN_EXISTING, </span><br><span class=\"line\">\t\tFILE_ATTRIBUTE_NORMAL, </span><br><span class=\"line\">\t\tNULL);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"IRP与派遣函数\"><a href=\"#IRP与派遣函数\" class=\"headerlink\" title=\"IRP与派遣函数\"></a>IRP与派遣函数</h2><h3 id=\"对比消息处理\"><a href=\"#对比消息处理\" class=\"headerlink\" title=\"对比消息处理\"></a>对比消息处理</h3><p>先来看一张图</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E9%80%9A%E4%BF%A1%EF%BC%88%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F%EF%BC%89/IrpAndDispatch.png\" alt=\"img\"></p>\n<p>继续拿3环的窗口应用来做对比</p>\n<ul>\n<li><p>用户空间：当<strong>用户单击鼠标</strong>时，会触发一个事件，操作系统会将这个事件的内容描述信息<strong>封装</strong>到一个MSG结构中，作为<strong>消息</strong>，<strong>发送给窗口</strong>对象，窗口对象接收到消息，会根据这个消息的类型，来<strong>执行</strong>相应的处理函数，我们称这种处理函数叫做<strong>回调函数</strong>。</p>\n<p>1）触发事件：鼠标点击等</p>\n<p>2）消息结构体：MSG</p>\n<p>3）消息接收对象：窗口对象</p>\n<p>4）处理函数：窗口回调函数</p>\n</li>\n<li><p>内核空间：当3环程序<strong>调用CreateFile函数</strong>时，这是操作系统会产生相应的IRP，这个IRP封装了3环程序调用的相关描述信息，接着会把<strong>IRP发送给</strong>内核空间的<strong>设备对象</strong>，设备对象会解析IRP，然后会根据IRP提供的信息，<strong>执行</strong>相应的<strong>派遣函数</strong></p>\n<p>1）触发事件：3环程序调用CreateFile函数等</p>\n<p>2）消息结构体：IRP</p>\n<p>3）消息接收对象：设备对象</p>\n<p>4）处理函数：派遣函数</p>\n</li>\n</ul>\n<h3 id=\"IRP的类型\"><a href=\"#IRP的类型\" class=\"headerlink\" title=\"IRP的类型\"></a>IRP的类型</h3><p>正如3环的窗口对象，在接收到不同类型消息时会执行不同的回调函数。当<strong>应用层通过</strong>CreateFile，ReadFile，WriteFile，CloseHandle等<strong>函数对设备进行操作</strong>时，也会使<strong>操作系统产生</strong>不同种类的<strong>IRP</strong>，这里简要总结一下<strong>部分3环函数与IRP的对应关系</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>应用层函数</th>\n<th>IRP种类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CreateFile</td>\n<td>IRP_MJ_CREATE</td>\n</tr>\n<tr>\n<td>ReadFile</td>\n<td>IRP_MJ_READ</td>\n</tr>\n<tr>\n<td>WriteFile</td>\n<td>IRP_MJ_WRITE</td>\n</tr>\n<tr>\n<td>CloseHandle</td>\n<td>IRP_MJ_CLOSE</td>\n</tr>\n<tr>\n<td>DeviceIoControl</td>\n<td>IRP_MJ_DEVICE_CONTROL</td>\n</tr>\n</tbody></table>\n<h3 id=\"派遣函数\"><a href=\"#派遣函数\" class=\"headerlink\" title=\"派遣函数\"></a>派遣函数</h3><p>1）<strong>注册派遣函数</strong></p>\n<p>当IRP传递给设备对象后，会根据IRP的种类调用特定的派遣函数。不同的IRP对应不同的派遣函数，NT框架预定了28（0x1C）种派遣函数，可以<strong>在驱动对象MajorFunction数组中注册</strong>这些<strong>派遣函数</strong> </p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E9%80%9A%E4%BF%A1%EF%BC%88%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F%EF%BC%89/driverObj_MajorFunction.png\" alt=\"img\"></p>\n<p>代码示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这里仅设置了两个用来演示</span><br><span class=\"line\">pDriverObj-&gt;MajorFunction[IRP_MJ_CREATE] = IrpCreateProc;</span><br><span class=\"line\">pDriverObj-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpCloseProc;</span><br></pre></td></tr></table></figure>\n\n<p>其中IrpCreateProc和IrpCloseProc都是我们需要自己定义的派遣函数，遵守一定的格式</p>\n<p><strong>2</strong>）派遣函数格式</p>\n<p>这里以IrpCreateProc来举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NTSTATUS IrpCreateProc(PDEVICE_OBJECT pDeviceObj, PIRP pIrp) &#123;</span><br><span class=\"line\">\tDbgPrint(&quot;Irp Create Dispatch Function...\\n&quot;);</span><br><span class=\"line\">\t/*</span><br><span class=\"line\">\t\t处理自己的业务</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">    </span><br><span class=\"line\">\tpIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class=\"line\">\tpIrp-&gt;IoStatus.Information = 0;</span><br><span class=\"line\">\tIoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class=\"line\">\treturn STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>参数：</p>\n<p>1）设备对象指针</p>\n<p>2）IRP指针</p>\n</li>\n<li><p>IRP是一个结构体，通过指针可以指向IRP内部的一个字段IoStatus（_IO_STATUS_BLOCK结构），该结构中有两个字段：</p>\n<p>1）Status：三环程序调用GetLastError得到的就是这个值</p>\n<p>2）Information：返回给3环多少数据，没有则填0</p>\n</li>\n<li><p>IoCompleteRequest：表示调用方已完成所有I&#x2F;O请求处理操作，并将给定的IRP返回给I&#x2F;O管理器</p>\n</li>\n</ul>\n<p>以上是必须设置的值&#x2F;执行的语句，完成后，即可</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>有了以上基础后就可以实现简单的3环和0环的通信了，这里附上代码：</p>\n<h3 id=\"Ring0-1\"><a href=\"#Ring0-1\" class=\"headerlink\" title=\"Ring0\"></a>Ring0</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;ntifs.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#define DEVICE_NAME L&quot;\\\\Device\\\\MyDevice&quot;</span><br><span class=\"line\">#define SYM_LINK_NAME L&quot;\\\\??\\\\MyRing3Device&quot;</span><br><span class=\"line\">#define OPER1 CTL_CODE(FILE_DEVICE_UNKNOWN,0x800,METHOD_BUFFERED,FILE_ANY_ACCESS)</span><br><span class=\"line\"></span><br><span class=\"line\">VOID Drvier_Unload(PDRIVER_OBJECT pDriverObj);</span><br><span class=\"line\">NTSTATUS IrpCreateProc(PDEVICE_OBJECT pDeviceObj, PIRP pIrp);</span><br><span class=\"line\">NTSTATUS IrpCloseProc(PDEVICE_OBJECT pDeviceObj, PIRP pIrp);</span><br><span class=\"line\"></span><br><span class=\"line\">//Driver Entry                                   </span><br><span class=\"line\">NTSTATUS DriverEntry(PDRIVER_OBJECT pDriverObj, PUNICODE_STRING RegistryPath) &#123;</span><br><span class=\"line\">\tDbgPrint(&quot;Driver is running!\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tPDEVICE_OBJECT pDeviceObj = NULL;</span><br><span class=\"line\">\tNTSTATUS status = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//Create Deivce Object</span><br><span class=\"line\">\tUNICODE_STRING DeviceName;</span><br><span class=\"line\">\tRtlInitUnicodeString(&amp;DeviceName, DEVICE_NAME);</span><br><span class=\"line\">\tstatus = IoCreateDevice(pDriverObj,</span><br><span class=\"line\">\t\t0,</span><br><span class=\"line\">\t\t&amp;DeviceName,</span><br><span class=\"line\">\t\tFILE_DEVICE_UNKNOWN,</span><br><span class=\"line\">\t\t0,</span><br><span class=\"line\">\t\tFALSE,</span><br><span class=\"line\">\t\t&amp;pDeviceObj); </span><br><span class=\"line\"></span><br><span class=\"line\">\tif (status != STATUS_SUCCESS) &#123;</span><br><span class=\"line\">\t\tDbgPrint(&quot;Device Create Failed!\\n&quot;);</span><br><span class=\"line\">\t\treturn status;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse &#123;</span><br><span class=\"line\">\t\tDbgPrint(&quot;Device Create Success!\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//Set Communicate Ways</span><br><span class=\"line\">\t//注意这里一定要用&quot;|=&quot;, 而不能直接用&quot;=&quot;,因为在创建Device</span><br><span class=\"line\">\tpDeviceObj-&gt;Flags |= DO_BUFFERED_IO;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//Create Symbollic Link</span><br><span class=\"line\">\tUNICODE_STRING SymbolicLinkName;</span><br><span class=\"line\">\tRtlInitUnicodeString(&amp;SymbolicLinkName, SYM_LINK_NAME);</span><br><span class=\"line\">\tIoCreateSymbolicLink(&amp;SymbolicLinkName, &amp;DeviceName);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//Set Dispatch Function</span><br><span class=\"line\">\tpDriverObj-&gt;MajorFunction[IRP_MJ_CREATE] = IrpCreateProc;</span><br><span class=\"line\">\tpDriverObj-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpCloseProc;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//Set Unload Function</span><br><span class=\"line\">\tpDriverObj-&gt;DriverUnload = Drvier_Unload;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS IrpCreateProc(PDEVICE_OBJECT pDeviceObj, PIRP pIrp) &#123;</span><br><span class=\"line\">\tDbgPrint(&quot;Irp Create Dispatch Function...\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class=\"line\">\tpIrp-&gt;IoStatus.Information = 0;</span><br><span class=\"line\">\tIoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class=\"line\">\treturn STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS IrpCloseProc(PDEVICE_OBJECT pDeviceObj, PIRP pIrp) &#123;</span><br><span class=\"line\">\tDbgPrint(&quot;Irp Close Dispatch Function...\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class=\"line\">\tpIrp-&gt;IoStatus.Information = 0;</span><br><span class=\"line\">\tIoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class=\"line\">\treturn STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">VOID Drvier_Unload(PDRIVER_OBJECT pDriverObj) &#123;</span><br><span class=\"line\">\t//Delete SymbolicLink</span><br><span class=\"line\">\tUNICODE_STRING SymbolicLinkName;</span><br><span class=\"line\">\tRtlInitUnicodeString(&amp;SymbolicLinkName, SYM_LINK_NAME);</span><br><span class=\"line\">\tIoDeleteSymbolicLink(&amp;SymbolicLinkName);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//Delete Deivce</span><br><span class=\"line\">\tIoDeleteDevice(pDriverObj-&gt;DeviceObject);</span><br><span class=\"line\"></span><br><span class=\"line\">\tDbgPrint(&quot;Unload Success!\\n&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ring3-1\"><a href=\"#Ring3-1\" class=\"headerlink\" title=\"Ring3\"></a>Ring3</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &quot;Windows.h&quot;</span><br><span class=\"line\">#include &quot;winioctl.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#define OPCODE1 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)</span><br><span class=\"line\">#define OPCODE2 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x900, METHOD_BUFFERED, FILE_ANY_ACCESS)</span><br><span class=\"line\">#define SYM_LINK_NAME L&quot;\\\\\\\\.\\\\MyRing3Device&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//Call IRP_MJ_CREATE</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tHANDLE hDevice = CreateFileW(</span><br><span class=\"line\">\t\tSYM_LINK_NAME, </span><br><span class=\"line\">\t\tGENERIC_READ | GENERIC_WRITE, </span><br><span class=\"line\">\t\t0,</span><br><span class=\"line\">\t\tNULL, </span><br><span class=\"line\">\t\tOPEN_EXISTING, </span><br><span class=\"line\">\t\tFILE_ATTRIBUTE_NORMAL, </span><br><span class=\"line\">\t\tNULL);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tif (hDevice == INVALID_HANDLE_VALUE)&#123;</span><br><span class=\"line\">\t\tprintf(&quot;Create File Failed!&quot;);</span><br><span class=\"line\">\t\tgetchar();</span><br><span class=\"line\">\t\treturn -1;</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tprintf(&quot;Create File Success!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//Call IRP_MJ_CLOSE</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tBOOL bCH = CloseHandle(hDevice);</span><br><span class=\"line\">\tif(bCH != 0)&#123;</span><br><span class=\"line\">\t\tprintf(&quot;Close File Success!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"初探IRP\"><a href=\"#初探IRP\" class=\"headerlink\" title=\"初探IRP\"></a>初探IRP</h1><p>一个IRP，用于在处理该I&#x2F;O请求的过程中代表该请求。</p>\n<h2 id=\"IRP结构\"><a href=\"#IRP结构\" class=\"headerlink\" title=\"IRP结构\"></a>IRP结构</h2><p>IRP对象从一个I&#x2F;O请求被发起时开始存在，一直到该I&#x2F;O请求被完成或者取消为止，在此过程中，会<strong>有多方操纵此IRP对象</strong>，<strong>包括I&#x2F;O管理器、即插即用管理器、电源管理器以及一个或多个驱动程序等</strong>。Windows I&#x2F;O系统本质上支持异步I&#x2F;O请求，所以，IRP对象必须携带足够多的环境信息，以便能够描述一个I&#x2F;O请求的所有状态。下面来研究一下IRP这个结构。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/IRP%E7%BB%93%E6%9E%84%E4%BD%93.png\" alt=\"img\"></p>\n<p>看上去结构并不复杂，但其中有很多字段包含了结构体，结构体内又内嵌了结构体和联合体，下面结合官方文档中结构的定义来分析（写入到注释中）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct _IRP &#123;</span><br><span class=\"line\">  CSHORT                    Type;\t\t//IRP类型，等于IO_TYPE_IRP宏</span><br><span class=\"line\">  USHORT                    Size;\t\t//IRP大小</span><br><span class=\"line\">  PMDL                      MdlAddress;\t\t//该I/O请求的用户缓冲区的MDL，仅用于“直接I/O”类型</span><br><span class=\"line\">  ULONG                     Flags;\t\t//用于记录各种标志</span><br><span class=\"line\">  union &#123;</span><br><span class=\"line\">    struct _IRP     *MasterIrp;\t\t\t//若这是一个关联IRP，则指向主IRP</span><br><span class=\"line\">    __volatile LONG IrpCount;\t\t\t//若这是一个主IRP，则必须先完成多少个关联IRP</span><br><span class=\"line\">    PVOID           SystemBuffer;\t\t//该操作被缓冲起来，指向系统地址空间缓冲区的地址</span><br><span class=\"line\">  &#125; AssociatedIrp;</span><br><span class=\"line\">  LIST_ENTRY                ThreadListEntry;\t//链表项，可以加入到线程的未完成I/O请求链表中</span><br><span class=\"line\">  IO_STATUS_BLOCK           IoStatus;\t\t//I/O操作的状态</span><br><span class=\"line\">  KPROCESSOR_MODE           RequestorMode;\t//内核模式I/O请求或用户模式I/O请求</span><br><span class=\"line\">  BOOLEAN                   PendingReturned;\t//未完成返回</span><br><span class=\"line\">  CHAR                      StackCount;\t\t//栈单元（IO_STACK_LOCATION）计数</span><br><span class=\"line\">  CHAR                      CurrentLocation;\t//当前栈单元位置</span><br><span class=\"line\">  BOOLEAN                   Cancel;\t\t//该I/O请求是否已被取消</span><br><span class=\"line\">  KIRQL                     CancelIrql;\t\t//取消自旋锁在哪级IRQL上被获取</span><br><span class=\"line\">  CCHAR                     ApcEnvironment;\t//用于当该IRP被初始化时保存APC环境</span><br><span class=\"line\">  UCHAR                     AllocationFlags;\t//该IRP内存的分配控制标志</span><br><span class=\"line\">  PIO_STATUS_BLOCK          UserIosb;\t\t//用户的I/O状态块</span><br><span class=\"line\">  PKEVENT                   UserEvent;\t\t//用户事件对象</span><br><span class=\"line\">  union &#123;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      union &#123;</span><br><span class=\"line\">        PIO_APC_ROUTINE UserApcRoutine;\t\t//当I/O请求完成时执行的APC例程</span><br><span class=\"line\">        PVOID           IssuingProcess;\t\t</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      PVOID UserApcContext;\t\t\t//传递给UserApcRoutine的环境参数</span><br><span class=\"line\">    &#125; AsynchronousParameters;</span><br><span class=\"line\">    LARGE_INTEGER AllocationSize;\t\t//分配块的大小</span><br><span class=\"line\">  &#125; Overlay;</span><br><span class=\"line\">  __volatile PDRIVER_CANCEL CancelRoutine;\t//若是可取消的I/O请求，该域包含了取消时调用的例程</span><br><span class=\"line\">  PVOID                     UserBuffer;\t\t//调用者（即发起者，往往是3环程序）提供的输出缓冲区地址</span><br><span class=\"line\">  </span><br><span class=\"line\">  //以下Tail联合成员用于当I/O管理器处理该I/O请求时存放各种工作信息</span><br><span class=\"line\">  union &#123;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      union &#123;</span><br><span class=\"line\">        KDEVICE_QUEUE_ENTRY DeviceQueueEntry;\t//设备队列项</span><br><span class=\"line\">        struct &#123;</span><br><span class=\"line\">          PVOID DriverContext[4];\t\t//由驱动程序解释和使用</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      PETHREAD     Thread;\t\t\t//指向发起者线程的EHTREAD</span><br><span class=\"line\">      PCHAR        AuxiliaryBuffer;\t\t//辅助缓冲区</span><br><span class=\"line\">      struct &#123;</span><br><span class=\"line\">        LIST_ENTRY ListEntry;\t\t\t//存放到完成队列中的链表项</span><br><span class=\"line\">        union &#123;</span><br><span class=\"line\">          struct _IO_STACK_LOCATION *CurrentStackLocation;\t//指向当前栈单元，驱动程序不可直接访问</span><br><span class=\"line\">          ULONG\t\tPacketType;\t\t//Minipacket的类型\t\t</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      PFILE_OBJECT OriginalFileObject;\t\t//指向原始的文件对象</span><br><span class=\"line\">    &#125; Overlay;</span><br><span class=\"line\">    KAPC  Apc;\t\t\t\t\t//特殊内核模式APC或发起者的APC</span><br><span class=\"line\">    PVOID CompletionKey;\t\t\t//完成键，用于标识在不同文件句柄上的I/O请求</span><br><span class=\"line\">  &#125; Tail;</span><br><span class=\"line\">&#125; IRP;</span><br></pre></td></tr></table></figure>\n\n<p>根据注释，可以大致了解IRP结构各个字段的含义及作用，这里主要介绍几个接下来会用到的：</p>\n<ul>\n<li><p>AssociatedIrp.SystemBuffer：根据定义，可以发现它是一个<strong>指向系统地址空间缓冲区</strong>的指针。这个系统地址空间缓冲区又是什么？在前一篇中，我们曾介绍过，在创建完设备对象后，需要<strong>设置设备对象的Flags字段</strong>，也就是<a href=\"https://cataloc.gitee.io/blog/2020/04/12/3%E7%8E%AF%E4%B8%8E0%E7%8E%AF%E9%80%9A%E4%BF%A1%EF%BC%88%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F%EF%BC%89/#%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%96%B9%E5%BC%8F\">设置数据传输方式</a>。而这个SystemBuffer字段，就是在采用<strong>缓冲区方式读写（DO_BUFFERED_IO）</strong>时，指向的内核空间中分配的一块用于数据复制、交换的内存</p>\n</li>\n<li><p>MdlAddress：和SystemBuffer类似，这个字段也是在<strong>通过缓冲区处理I&#x2F;O请求时</strong>，与设置的数据传输方式有关，这个字段在设备对象采用<strong>直接方式读写（DO_DIRECT_IO）</strong>时有效。当使用这种方式进行数据读写时，I&#x2F;O请求的发起者<strong>调用IoAllocateMdl函数申请一个MDL（Memory Descriptor List，内存描述符链表）</strong>，将调用者<strong>指定的缓冲区的物理页面构成一个MDL</strong>，以便于设备驱动程序使用DMA方式来传输数据。<strong>这个字段就是记录了一个I&#x2F;O请求所使用的MDL</strong>。</p>\n</li>\n<li><p>UserBuffer：同上。当设备对象采用的是<strong>默认方式读写（NEITHER_IO）</strong>时，就会使用这个字段。此时I&#x2F;O管理器或者I&#x2F;O请求的发起者不负责缓冲区管理工作，而由驱动程序自行决定该如何使用缓冲区。其中输出缓冲区的指针放在该字段内，<strong>缓冲区本身不做任何处理</strong>。</p>\n</li>\n<li><p>IoStatus：I&#x2F;O操作的状态。这个字段是一个_IO_STATUS_BLOCK结构体</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct _IO_STATUS_BLOCK </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  union </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    NTSTATUS  Status;</span><br><span class=\"line\">    PVOID  Pointer;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  ULONG_PTR  Information;</span><br><span class=\"line\">&#125; IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;</span><br></pre></td></tr></table></figure>\n\n<p>1）Status：表示IRP的完成状态，如果三环程序调用完后发生了错误，想<strong>通过GetLastError函数</strong>来获取错误码，实际上<strong>获取到的就是这个Status的值</strong>，也就是说，我们自己在驱动中编写特定IRP对应的派遣函数的话，是可以设置它的错误码的。</p>\n<p>2）Information：这个数，<strong>决定了返回给3环多少数据</strong>。某些3环函数，会传入一部分数据进来（IN类型的参数），也会接收一部分数据（OUT类型的参数）。例如，3环传进来一个CHAR数组，有8个元素，但是我们在该函数的派遣函数中设置的Information的值是2，最后这个数组返回到3环时，就只有2个元素了。具体可以参考后面的程序演示部分。</p>\n</li>\n</ul>\n<h2 id=\"栈单元\"><a href=\"#栈单元\" class=\"headerlink\" title=\"栈单元\"></a>栈单元</h2><p>实际上，<strong>IRP</strong>数据结构仅仅是一个I&#x2F;O请求的<strong>固定描述部分</strong>，另一部分是一个或者多个栈单元。每个栈单元针对单个驱动程序，I&#x2F;O管理器在处理一个I&#x2F;O请求时，根据目标设备对象(DeviceObject)的StackSize域，可以知道最多有多少个驱动程序需要参与到该I&#x2F;O请求的处理过程中。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/DeviceObj_stackSize.png\" alt=\"img\"></p>\n<p>下面来看一下栈单元这个结构：</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/IoStackLocation.png\" alt=\"img\"></p>\n<p>看上去，这个结构并不复杂，但实际上要注意一下Parameters这个域，这是一个联合体，<strong>包含了不同IRP对应的3环函数原型所需的参数</strong>，一起来看一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">union &#123;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      PIO_SECURITY_CONTEXT     SecurityContext;</span><br><span class=\"line\">      ULONG                    Options;</span><br><span class=\"line\">      USHORT POINTER_ALIGNMENT FileAttributes;</span><br><span class=\"line\">      USHORT                   ShareAccess;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT  EaLength;</span><br><span class=\"line\">    &#125; Create;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      PIO_SECURITY_CONTEXT          SecurityContext;</span><br><span class=\"line\">      ULONG                         Options;</span><br><span class=\"line\">      USHORT POINTER_ALIGNMENT      Reserved;</span><br><span class=\"line\">      USHORT                        ShareAccess;</span><br><span class=\"line\">      PNAMED_PIPE_CREATE_PARAMETERS Parameters;</span><br><span class=\"line\">    &#125; CreatePipe;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      PIO_SECURITY_CONTEXT        SecurityContext;</span><br><span class=\"line\">      ULONG                       Options;</span><br><span class=\"line\">      USHORT POINTER_ALIGNMENT    Reserved;</span><br><span class=\"line\">      USHORT                      ShareAccess;</span><br><span class=\"line\">      PMAILSLOT_CREATE_PARAMETERS Parameters;</span><br><span class=\"line\">    &#125; CreateMailslot;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                   Length;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT Key;</span><br><span class=\"line\">      ULONG                   Flags;</span><br><span class=\"line\">      LARGE_INTEGER           ByteOffset;</span><br><span class=\"line\">    &#125; Read;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                   Length;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT Key;</span><br><span class=\"line\">      ULONG                   Flags;</span><br><span class=\"line\">      LARGE_INTEGER           ByteOffset;</span><br><span class=\"line\">    &#125; Write;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                   Length;</span><br><span class=\"line\">      PUNICODE_STRING         FileName;</span><br><span class=\"line\">      FILE_INFORMATION_CLASS  FileInformationClass;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT FileIndex;</span><br><span class=\"line\">    &#125; QueryDirectory;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                   Length;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT CompletionFilter;</span><br><span class=\"line\">    &#125; NotifyDirectory;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                                                Length;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT                              CompletionFilter;</span><br><span class=\"line\">      DIRECTORY_NOTIFY_INFORMATION_CLASS POINTER_ALIGNMENT DirectoryNotifyInformationClass;</span><br><span class=\"line\">    &#125; NotifyDirectoryEx;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                                    Length;</span><br><span class=\"line\">      FILE_INFORMATION_CLASS POINTER_ALIGNMENT FileInformationClass;</span><br><span class=\"line\">    &#125; QueryFile;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                                    Length;</span><br><span class=\"line\">      FILE_INFORMATION_CLASS POINTER_ALIGNMENT FileInformationClass;</span><br><span class=\"line\">      PFILE_OBJECT                             FileObject;</span><br><span class=\"line\">      union &#123;</span><br><span class=\"line\">        struct &#123;</span><br><span class=\"line\">          BOOLEAN ReplaceIfExists;</span><br><span class=\"line\">          BOOLEAN AdvanceOnly;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ULONG  ClusterCount;</span><br><span class=\"line\">        HANDLE DeleteHandle;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125; SetFile;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                   Length;</span><br><span class=\"line\">      PVOID                   EaList;</span><br><span class=\"line\">      ULONG                   EaListLength;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT EaIndex;</span><br><span class=\"line\">    &#125; QueryEa;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG Length;</span><br><span class=\"line\">    &#125; SetEa;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                                  Length;</span><br><span class=\"line\">      FS_INFORMATION_CLASS POINTER_ALIGNMENT FsInformationClass;</span><br><span class=\"line\">    &#125; QueryVolume;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                                  Length;</span><br><span class=\"line\">      FS_INFORMATION_CLASS POINTER_ALIGNMENT FsInformationClass;</span><br><span class=\"line\">    &#125; SetVolume;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                   OutputBufferLength;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT InputBufferLength;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT FsControlCode;</span><br><span class=\"line\">      PVOID                   Type3InputBuffer;</span><br><span class=\"line\">    &#125; FileSystemControl;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      PLARGE_INTEGER          Length;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT Key;</span><br><span class=\"line\">      LARGE_INTEGER           ByteOffset;</span><br><span class=\"line\">    &#125; LockControl;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                   OutputBufferLength;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT InputBufferLength;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT IoControlCode;</span><br><span class=\"line\">      PVOID                   Type3InputBuffer;</span><br><span class=\"line\">    &#125; DeviceIoControl;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      SECURITY_INFORMATION    SecurityInformation;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT Length;</span><br><span class=\"line\">    &#125; QuerySecurity;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      SECURITY_INFORMATION SecurityInformation;</span><br><span class=\"line\">      PSECURITY_DESCRIPTOR SecurityDescriptor;</span><br><span class=\"line\">    &#125; SetSecurity;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      PVPB           Vpb;</span><br><span class=\"line\">      PDEVICE_OBJECT DeviceObject;</span><br><span class=\"line\">    &#125; MountVolume;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      PVPB           Vpb;</span><br><span class=\"line\">      PDEVICE_OBJECT DeviceObject;</span><br><span class=\"line\">    &#125; VerifyVolume;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      struct _SCSI_REQUEST_BLOCK *Srb;</span><br><span class=\"line\">    &#125; Scsi;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                       Length;</span><br><span class=\"line\">      PSID                        StartSid;</span><br><span class=\"line\">      PFILE_GET_QUOTA_INFORMATION SidList;</span><br><span class=\"line\">      ULONG                       SidListLength;</span><br><span class=\"line\">    &#125; QueryQuota;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG Length;</span><br><span class=\"line\">    &#125; SetQuota;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      DEVICE_RELATION_TYPE Type;</span><br><span class=\"line\">    &#125; QueryDeviceRelations;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      const GUID *InterfaceType;</span><br><span class=\"line\">      USHORT     Size;</span><br><span class=\"line\">      USHORT     Version;</span><br><span class=\"line\">      PINTERFACE Interface;</span><br><span class=\"line\">      PVOID      InterfaceSpecificData;</span><br><span class=\"line\">    &#125; QueryInterface;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      PDEVICE_CAPABILITIES Capabilities;</span><br><span class=\"line\">    &#125; DeviceCapabilities;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      PIO_RESOURCE_REQUIREMENTS_LIST IoResourceRequirementList;</span><br><span class=\"line\">    &#125; FilterResourceRequirements;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                   WhichSpace;</span><br><span class=\"line\">      PVOID                   Buffer;</span><br><span class=\"line\">      ULONG                   Offset;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT Length;</span><br><span class=\"line\">    &#125; ReadWriteConfig;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      BOOLEAN Lock;</span><br><span class=\"line\">    &#125; SetLock;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      BUS_QUERY_ID_TYPE IdType;</span><br><span class=\"line\">    &#125; QueryId;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      DEVICE_TEXT_TYPE       DeviceTextType;</span><br><span class=\"line\">      LCID POINTER_ALIGNMENT LocaleId;</span><br><span class=\"line\">    &#125; QueryDeviceText;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      BOOLEAN                                          InPath;</span><br><span class=\"line\">      BOOLEAN                                          Reserved[3];</span><br><span class=\"line\">      DEVICE_USAGE_NOTIFICATION_TYPE POINTER_ALIGNMENT Type;</span><br><span class=\"line\">    &#125; UsageNotification;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      SYSTEM_POWER_STATE PowerState;</span><br><span class=\"line\">    &#125; WaitWake;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      PPOWER_SEQUENCE PowerSequence;</span><br><span class=\"line\">    &#125; PowerSequence;</span><br><span class=\"line\">#if ...</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      union &#123;</span><br><span class=\"line\">        ULONG                      SystemContext;</span><br><span class=\"line\">        SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      POWER_STATE_TYPE POINTER_ALIGNMENT Type;</span><br><span class=\"line\">      POWER_STATE POINTER_ALIGNMENT      State;</span><br><span class=\"line\">      POWER_ACTION POINTER_ALIGNMENT     ShutdownType;</span><br><span class=\"line\">    &#125; Power;</span><br><span class=\"line\">#else</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG                              SystemContext;</span><br><span class=\"line\">      POWER_STATE_TYPE POINTER_ALIGNMENT Type;</span><br><span class=\"line\">      POWER_STATE POINTER_ALIGNMENT      State;</span><br><span class=\"line\">      POWER_ACTION POINTER_ALIGNMENT     ShutdownType;</span><br><span class=\"line\">    &#125; Power;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      PCM_RESOURCE_LIST AllocatedResources;</span><br><span class=\"line\">      PCM_RESOURCE_LIST AllocatedResourcesTranslated;</span><br><span class=\"line\">    &#125; StartDevice;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      ULONG_PTR ProviderId;</span><br><span class=\"line\">      PVOID     DataPath;</span><br><span class=\"line\">      ULONG     BufferSize;</span><br><span class=\"line\">      PVOID     Buffer;</span><br><span class=\"line\">    &#125; WMI;</span><br><span class=\"line\">    struct &#123;</span><br><span class=\"line\">      PVOID Argument1;</span><br><span class=\"line\">      PVOID Argument2;</span><br><span class=\"line\">      PVOID Argument3;</span><br><span class=\"line\">      PVOID Argument4;</span><br><span class=\"line\">    &#125; Others;</span><br><span class=\"line\">  &#125; Parameters;</span><br></pre></td></tr></table></figure>\n\n<p>那这个Parameters该如何用呢？举个例子，假设3环程序调用了DeviceIoControl函数，在0环，就会构造一个IRP_MJ_DEVICE_CONTROL这个类型的IRP，然后我们就可以构建它的派遣函数了。在派遣函数中，当我们获得了当前驱动的栈单元时，就可以通过如下语句访问3环函数DeviceIoControl的参数了，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取IO_STACK_LOCATION</span><br><span class=\"line\">PIO_STACK_LOCATION pStackLocation = IoGetCurrentIrpStackLocation(pIrp);</span><br><span class=\"line\">//获取3环函数参数</span><br><span class=\"line\">ULONG InputBufferLength = pStackLocation-&gt;Parameters.DeviceIoControl.InputBufferLength;</span><br><span class=\"line\">ULONG FsControlCode = pStackLocation-&gt;Parameters.DeviceIoControl.IoControlCode;</span><br></pre></td></tr></table></figure>\n\n<p>其中，IoGetCurrentIrpStackLocation函数，将Irp指针传进去，可以<strong>获取当前驱动程序对应的栈单元</strong>。接着就可以通过栈单元获取我们想要的参数了</p>\n<h2 id=\"3环与0环通信（升级）\"><a href=\"#3环与0环通信（升级）\" class=\"headerlink\" title=\"3环与0环通信（升级）\"></a>3环与0环通信（升级）</h2><h3 id=\"操作码\"><a href=\"#操作码\" class=\"headerlink\" title=\"操作码\"></a>操作码</h3><p>在了解了上述知识后，我们就可以对前一篇文章中的代码进行一次升级，更清晰的看到3环和0环的信息交互过程。在此之前，我们需要了解一个操作码。本次实验会在<strong>3环程序中新增一个DeviceIoControl函数</strong>，因为这个函数能既有传入的参数，也有输出的参数，可以比较直观的看明白3环和0环交互的数据。具体定义如图：</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/DeviceIoControl%E5%AE%9A%E4%B9%89.png\" alt=\"img\"></p>\n<p>其中需要解释一下的，就是这个dwIoControlCode参数，这个就相当于Switch语句中传入的那个参数，用来判断程序执行流程用的，当操作码不同时，执行的功能也不同，操作码定义如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define OPCODE1 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)</span><br><span class=\"line\">#define OPCODE2 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x900, METHOD_BUFFERED, FILE_ANY_ACCESS)</span><br></pre></td></tr></table></figure>\n\n<p>CTL_CODE函数，会接收这四个参数，并通过某一种算法，生成一个四字节的操作码，3环和0环中用的是同一套操作码，其中第二个参数，这个值必须选定一个大于等于0x800的值，之前的值由系统保留使用。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以下宏可用于从 IOCTL 代码中提取 16 位 <em>DeviceType</em> 和 2 位 <em>TransferType</em> 字段：</p>\n<p>#define DEVICE_TYPE_FROM_CTL_CODE(ctrlCode)   (((ULONG)(ctrlCode &amp; 0xffff0000)) &gt;&gt; 16)<br>#define METHOD_FROM_CTL_CODE(ctrlCode)        ((ULONG)(ctrlCode &amp; 3))</p></blockquote>\n<h3 id=\"新增代码\"><a href=\"#新增代码\" class=\"headerlink\" title=\"新增代码\"></a>新增代码</h3><p>本次实验新增的代码，就是在3环程序增加了DeviceIoControl这个函数，以及相应的驱动增加了派遣函数。具体变化如下：</p>\n<p><strong>Ring3新增部分：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define OPCODE1 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)</span><br><span class=\"line\">#define OPCODE2 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x900, METHOD_BUFFERED, FILE_ANY_ACCESS)</span><br><span class=\"line\"></span><br><span class=\"line\">//Call IRP_MY_DEVICE_CONTROL</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tchar pInputBuffer[20] = &#123;1, 2, 4, 8, 16, 32, 64, 0&#125;;</span><br><span class=\"line\">\tchar pOutputBuffer[20] = &#123;0&#125;;</span><br><span class=\"line\">\tDWORD dwReturnSize = 0;</span><br><span class=\"line\">    BOOL bDIC = DeviceIoControl(hDevice, OPCODE2, pInputBuffer, 8, pOutputBuffer, 20, &amp;dwReturnSize, NULL);</span><br><span class=\"line\">\tif(bDIC != 0)&#123;</span><br><span class=\"line\">\t\tprintf(&quot;ReturnSize: %x\\n&quot;, dwReturnSize);</span><br><span class=\"line\">\t\tprintf(&quot;OutputBuffer: &quot;);</span><br><span class=\"line\">\t\tfor(int i = 0; i &lt; dwReturnSize; i++)&#123;</span><br><span class=\"line\">\t\t\tprintf(&quot;%x &quot;, pOutputBuffer[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse &#123;</span><br><span class=\"line\">\t\tprintf(&quot;Communicate Failed!\\n&quot;);</span><br><span class=\"line\">\t\treturn -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;\\nRing3 And Ring0 Communicate Success!\\n&quot;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码中传入一个初始化了8个字节的数组，并且用另一个空数组来接收0环的数据</strong>，DeviceIoControl执行完后，根据返回的长度大小，以及返回的Buffer，来打印返回的数据。</p>\n<p><strong>Ring0新增部分：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define OPCODE1 CTL_CODE(FILE_DEVICE_UNKNOWN,0x800,METHOD_BUFFERED,FILE_ANY_ACCESS)</span><br><span class=\"line\">#define OPCODE2 CTL_CODE(FILE_DEVICE_UNKNOWN,0x900,METHOD_BUFFERED,FILE_ANY_ACCESS)</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS IrpDeviceControlProc(PDEVICE_OBJECT pDeviceObj, PIRP pIrp) &#123;</span><br><span class=\"line\">\tDbgPrint(&quot;Irp DeviceControl Dispatch Function...\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//获取缓冲区数据</span><br><span class=\"line\">\tPVOID pSystemBuffer = pIrp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//获取IO_STACK_LOCATION</span><br><span class=\"line\">\tPIO_STACK_LOCATION pStackLocation = IoGetCurrentIrpStackLocation(pIrp);</span><br><span class=\"line\">\tULONG InputBufferLength = pStackLocation-&gt;Parameters.DeviceIoControl.InputBufferLength;</span><br><span class=\"line\">\tULONG FsControlCode = pStackLocation-&gt;Parameters.DeviceIoControl.IoControlCode;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//判断操作码</span><br><span class=\"line\">\tswitch (FsControlCode)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tcase OPCODE1:</span><br><span class=\"line\">\t\tDbgPrint(&quot;不打印操作码&quot;);</span><br><span class=\"line\">\t\tpIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class=\"line\">\t\tpIrp-&gt;IoStatus.Information = 2;</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\tcase OPCODE2:</span><br><span class=\"line\">\t\tDbgPrint(&quot;操作码：%x\\n&quot;, FsControlCode);</span><br><span class=\"line\">\t\tfor (UINT32 i = 0; i &lt; InputBufferLength; i++) &#123;</span><br><span class=\"line\">\t\t\tDbgPrint(&quot;Ring3 Data: %x\\n&quot;, ((PUCHAR)pSystemBuffer)[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class=\"line\">\t\tpIrp-&gt;IoStatus.Information = 5;</span><br><span class=\"line\">\t\tbreak;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tIoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class=\"line\">\treturn STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来简要看一下派遣函数的执行流程：</p>\n<ol>\n<li><p>由于在<strong>设备对象的Flags</strong>字段定义过缓冲区读取的类型是（DO_BUFFERED_IO），因此我们可以<strong>直接从AssociatedIrp.SystemBuffer中读取3环传入的数据</strong>，也就是DeviceIoControl中pInputBuffer参数指向的数据。</p>\n</li>\n<li><p>通过IoGetCurrentIrpStackLocation函数获取到栈单元，再通过栈单元获取到Parameters中DeviceIoControl结构体里对应的参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct &#123;</span><br><span class=\"line\">      ULONG                   OutputBufferLength;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT InputBufferLength;</span><br><span class=\"line\">      ULONG POINTER_ALIGNMENT IoControlCode;</span><br><span class=\"line\">      PVOID                   Type3InputBuffer;</span><br><span class=\"line\">    &#125; DeviceIoControl;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们仅取操作码IoControlCode，用于判断执行流程；以及InputBufferLength，用于打印传入数据</p>\n</li>\n<li><p>然后就是根据操作码的不同，执行不同的流程了：</p>\n<p>1）操作码1：不做任何操作，向3环返回2字节大小的数据</p>\n<p>2）操作码2：打印操作码的值；根据传入数据的长度，打印传入的数据；向3环返回5字节大小的数据</p>\n</li>\n</ol>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><h3 id=\"Ring3部分\"><a href=\"#Ring3部分\" class=\"headerlink\" title=\"Ring3部分\"></a>Ring3部分</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdafx.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Windows.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;winioctl.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OPCODE1 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OPCODE2 CTL_CODE(FILE_DEVICE_UNKNOWN, 0x900, METHOD_BUFFERED, FILE_ANY_ACCESS)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SYM_LINK_NAME <span class=\"string\">L&quot;\\\\\\\\.\\\\MyRing3Device&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Call IRP_MJ_CREATE</span></span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tHANDLE hDevice = CreateFileW(</span><br><span class=\"line\">\t\tSYM_LINK_NAME, </span><br><span class=\"line\">\t\tGENERIC_READ | GENERIC_WRITE, </span><br><span class=\"line\">\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, </span><br><span class=\"line\">\t\tOPEN_EXISTING, </span><br><span class=\"line\">\t\tFILE_ATTRIBUTE_NORMAL, </span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hDevice == INVALID_HANDLE_VALUE)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Create File Failed!&quot;</span>);</span><br><span class=\"line\">\t\tgetchar();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Create File Success!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Call IRP_MY_DEVICE_CONTROL</span></span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"type\">char</span> pInputBuffer[<span class=\"number\">20</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>, <span class=\"number\">32</span>, <span class=\"number\">64</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"type\">char</span> pOutputBuffer[<span class=\"number\">20</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tDWORD dwReturnSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    BOOL bDIC = DeviceIoControl(hDevice, OPCODE2, pInputBuffer, <span class=\"number\">8</span>, pOutputBuffer, <span class=\"number\">20</span>, &amp;dwReturnSize, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(bDIC != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ReturnSize: %x\\n&quot;</span>, dwReturnSize);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;OutputBuffer: &quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; dwReturnSize; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x &quot;</span>, pOutputBuffer[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Communicate Failed!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\nRing3 And Ring0 Communicate Success!\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Call IRP_MJ_CLOSE</span></span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tBOOL bCH = CloseHandle(hDevice);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(bCH != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Close File Success!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ring0部分\"><a href=\"#Ring0部分\" class=\"headerlink\" title=\"Ring0部分\"></a>Ring0部分</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ntifs.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEVICE_NAME <span class=\"string\">L&quot;\\\\Device\\\\MyDevice&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SYM_LINK_NAME <span class=\"string\">L&quot;\\\\??\\\\MyRing3Device&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OPCODE1 CTL_CODE(FILE_DEVICE_UNKNOWN,0x800,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OPCODE2 CTL_CODE(FILE_DEVICE_UNKNOWN,0x900,METHOD_BUFFERED,FILE_ANY_ACCESS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">Drvier_Unload</span><span class=\"params\">(PDRIVER_OBJECT pDriverObj)</span>;</span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">IrpCreateProc</span><span class=\"params\">(PDEVICE_OBJECT pDeviceObj, PIRP pIrp)</span>;</span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">IrpCloseProc</span><span class=\"params\">(PDEVICE_OBJECT pDeviceObj, PIRP pIrp)</span>;</span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">IrpDeviceControlProc</span><span class=\"params\">(PDEVICE_OBJECT pDeviceObj, PIRP pIrp)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Driver Entry                                   </span></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">DriverEntry</span><span class=\"params\">(PDRIVER_OBJECT pDriverObj, PUNICODE_STRING RegistryPath)</span> &#123;</span><br><span class=\"line\">\tDbgPrint(<span class=\"string\">&quot;Driver is running!\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tPDEVICE_OBJECT pDeviceObj = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tNTSTATUS status = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Create Deivce Object</span></span><br><span class=\"line\">\tUNICODE_STRING DeviceName;</span><br><span class=\"line\">\tRtlInitUnicodeString(&amp;DeviceName, DEVICE_NAME);</span><br><span class=\"line\">\tstatus = IoCreateDevice(pDriverObj,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t&amp;DeviceName,</span><br><span class=\"line\">\t\tFILE_DEVICE_UNKNOWN,</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>,</span><br><span class=\"line\">\t\tFALSE,</span><br><span class=\"line\">\t\t&amp;pDeviceObj);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (status != STATUS_SUCCESS) &#123;</span><br><span class=\"line\">\t\tDbgPrint(<span class=\"string\">&quot;Device Create Failed!\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> status;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tDbgPrint(<span class=\"string\">&quot;Device Create Success!\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Set Communicate Ways</span></span><br><span class=\"line\">\t<span class=\"comment\">//注意这里一定要用&quot;|=&quot;, 而不能直接用&quot;=&quot;,因为在创建Device时会给Fllags赋上一个初值</span></span><br><span class=\"line\">\tpDeviceObj-&gt;Flags |= DO_BUFFERED_IO;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Create Symbollic Link</span></span><br><span class=\"line\">\tUNICODE_STRING SymbolicLinkName;</span><br><span class=\"line\">\tRtlInitUnicodeString(&amp;SymbolicLinkName, SYM_LINK_NAME);</span><br><span class=\"line\">\tIoCreateSymbolicLink(&amp;SymbolicLinkName, &amp;DeviceName);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Set Dispatch Function</span></span><br><span class=\"line\">\tpDriverObj-&gt;MajorFunction[IRP_MJ_CREATE] = IrpCreateProc;</span><br><span class=\"line\">\tpDriverObj-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpCloseProc;</span><br><span class=\"line\">\tpDriverObj-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = IrpDeviceControlProc;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Set Unload Function</span></span><br><span class=\"line\">\tpDriverObj-&gt;DriverUnload = Drvier_Unload;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">IrpCreateProc</span><span class=\"params\">(PDEVICE_OBJECT pDeviceObj, PIRP pIrp)</span> &#123;</span><br><span class=\"line\">\tDbgPrint(<span class=\"string\">&quot;Irp Create Dispatch Function...\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class=\"line\">\tpIrp-&gt;IoStatus.Information = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tIoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">IrpCloseProc</span><span class=\"params\">(PDEVICE_OBJECT pDeviceObj, PIRP pIrp)</span> &#123;</span><br><span class=\"line\">\tDbgPrint(<span class=\"string\">&quot;Irp Close Dispatch Function...\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class=\"line\">\tpIrp-&gt;IoStatus.Information = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tIoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS <span class=\"title function_\">IrpDeviceControlProc</span><span class=\"params\">(PDEVICE_OBJECT pDeviceObj, PIRP pIrp)</span> &#123;</span><br><span class=\"line\">\tDbgPrint(<span class=\"string\">&quot;Irp DeviceControl Dispatch Function...\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取缓冲区数据</span></span><br><span class=\"line\">\tPVOID pSystemBuffer = pIrp-&gt;AssociatedIrp.SystemBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取IO_STACK_LOCATION</span></span><br><span class=\"line\">\tPIO_STACK_LOCATION pStackLocation = IoGetCurrentIrpStackLocation(pIrp);</span><br><span class=\"line\">\tULONG InputBufferLength = pStackLocation-&gt;Parameters.DeviceIoControl.InputBufferLength;</span><br><span class=\"line\">\tULONG FsControlCode = pStackLocation-&gt;Parameters.DeviceIoControl.IoControlCode;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//判断操作码</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (FsControlCode)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> OPCODE1:</span><br><span class=\"line\">\t\tDbgPrint(<span class=\"string\">&quot;不打印操作码&quot;</span>);</span><br><span class=\"line\">\t\tpIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class=\"line\">\t\tpIrp-&gt;IoStatus.Information = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> OPCODE2:</span><br><span class=\"line\">\t\tDbgPrint(<span class=\"string\">&quot;操作码：%x\\n&quot;</span>, FsControlCode);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (UINT32 i = <span class=\"number\">0</span>; i &lt; InputBufferLength; i++) &#123;</span><br><span class=\"line\">\t\t\tDbgPrint(<span class=\"string\">&quot;Ring3 Data: %x\\n&quot;</span>, ((PUCHAR)pSystemBuffer)[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpIrp-&gt;IoStatus.Status = STATUS_SUCCESS;</span><br><span class=\"line\">\t\tpIrp-&gt;IoStatus.Information = <span class=\"number\">5</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tIoCompleteRequest(pIrp, IO_NO_INCREMENT);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> STATUS_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">VOID <span class=\"title function_\">Drvier_Unload</span><span class=\"params\">(PDRIVER_OBJECT pDriverObj)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Delete SymbolicLink</span></span><br><span class=\"line\">\tUNICODE_STRING SymbolicLinkName;</span><br><span class=\"line\">\tRtlInitUnicodeString(&amp;SymbolicLinkName, SYM_LINK_NAME);</span><br><span class=\"line\">\tIoDeleteSymbolicLink(&amp;SymbolicLinkName);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Delete Deivce</span></span><br><span class=\"line\">\tIoDeleteDevice(pDriverObj-&gt;DeviceObject);</span><br><span class=\"line\"></span><br><span class=\"line\">\tDbgPrint(<span class=\"string\">&quot;Unload Success!\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"《恶意代码分析实战》——Lab10-3\"><a href=\"#《恶意代码分析实战》——Lab10-3\" class=\"headerlink\" title=\"《恶意代码分析实战》——Lab10.3\"></a>《恶意代码分析实战》——Lab10.3</h1><p>基于Windows XP环境</p>\n<p>使用dd命令查看主函数表的函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd 设备地址+主函数偏移 L1C  //winxp中允许0x1C种可能的主函数代码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态分析-Lab10-03-exe\"><a href=\"#静态分析-Lab10-03-exe\" class=\"headerlink\" title=\"静态分析-Lab10-03.exe\"></a>静态分析-Lab10-03.exe</h2><p>使用ida查看Lab10-03.exe主函数，可以看到主要分为两部分：第一部分由OpenSCManagerA到DeviceIoControl之间的函数调用组成，包含加载和发送请求到内核驱动的函数CreateFileA、DeviceIoControl等；第二部分由其余的函数调用组成，这表明是一个COM对象的使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SC_HANDLE v4; // eax@1</span><br><span class=\"line\">  SC_HANDLE v5; // eax@2</span><br><span class=\"line\">  void *v6; // esi@2</span><br><span class=\"line\">  HANDLE v7; // eax@4</span><br><span class=\"line\">  BSTR v9; // esi@8</span><br><span class=\"line\">  LPVOID ppv; // [sp+4h] [bp-28h]@7</span><br><span class=\"line\">  DWORD BytesReturned; // [sp+8h] [bp-24h]@6</span><br><span class=\"line\">  VARIANTARG pvarg; // [sp+Ch] [bp-20h]@8</span><br><span class=\"line\">  __int16 v13; // [sp+1Ch] [bp-10h]@8</span><br><span class=\"line\">  int v14; // [sp+24h] [bp-8h]@8</span><br><span class=\"line\"></span><br><span class=\"line\">  v4 = OpenSCManagerA(0, 0, 0xF003Fu);</span><br><span class=\"line\">  if ( v4 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v5 = CreateServiceA(</span><br><span class=\"line\">           v4,</span><br><span class=\"line\">           &quot;Process Helper&quot;,</span><br><span class=\"line\">           &quot;Process Helper&quot;,</span><br><span class=\"line\">           0xF01FFu,</span><br><span class=\"line\">           1u,</span><br><span class=\"line\">           3u,</span><br><span class=\"line\">           1u,</span><br><span class=\"line\">           &quot;C:\\\\Windows\\\\System32\\\\Lab10-03.sys&quot;,</span><br><span class=\"line\">           0,</span><br><span class=\"line\">           0,</span><br><span class=\"line\">           0,</span><br><span class=\"line\">           0,</span><br><span class=\"line\">           0);</span><br><span class=\"line\">    v6 = v5;</span><br><span class=\"line\">    if ( v5 )</span><br><span class=\"line\">      StartServiceA(v5, 0, 0);</span><br><span class=\"line\">    CloseServiceHandle(v6);</span><br><span class=\"line\">    v7 = CreateFileA(&quot;\\\\\\\\.\\\\ProcHelper&quot;, 0xC0000000, 0, 0, 2u, 0x80u, 0);</span><br><span class=\"line\">    if ( v7 == (HANDLE)-1 )</span><br><span class=\"line\">      return 1;</span><br><span class=\"line\">    DeviceIoControl(v7, 0xABCDEF01, 0, 0, 0, 0, &amp;BytesReturned, 0);</span><br><span class=\"line\">    if ( OleInitialize(0) &gt;= 0 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      CoCreateInstance(&amp;rclsid, 0, 4u, &amp;riid, &amp;ppv);</span><br><span class=\"line\">      if ( ppv )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        VariantInit(&amp;pvarg);</span><br><span class=\"line\">        v13 = 3;</span><br><span class=\"line\">        v14 = 1;</span><br><span class=\"line\">        v9 = SysAllocString(L&quot;http://www.malwareanalysisbook.com/ad.html&quot;);</span><br><span class=\"line\">        while ( 1 )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          (*(void (__stdcall **)(LPVOID, BSTR, __int16 *, VARIANTARG *, VARIANTARG *, VARIANTARG *))(*(_DWORD *)ppv + 44))(</span><br><span class=\"line\">            ppv,</span><br><span class=\"line\">            v9,</span><br><span class=\"line\">            &amp;v13,</span><br><span class=\"line\">            &amp;pvarg,</span><br><span class=\"line\">            &amp;pvarg,</span><br><span class=\"line\">            &amp;pvarg);</span><br><span class=\"line\">          Sleep(0x7530u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      OleUninitialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态分析-Lab10-03-sys\"><a href=\"#静态分析-Lab10-03-sys\" class=\"headerlink\" title=\"静态分析-Lab10-03.sys\"></a>静态分析-Lab10-03.sys</h2><p>在sub_10706函数中，首先调用IoCreateDevice创建了一个名为”\\Device\\ProcHelper”的设备，然后设置设备主函数表DriverObject-&gt;MajorFunction（其中，IRP_MJ_CREATE -&gt; 0，IRP_MJ_CLOSE -&gt; 2，IRP_MJ_DEVICE_CONTROL -&gt; 14（0xE)），随后调用IoCreateSymbolicLink创建一个名为”\\DosDevices\\ProcHelper”的符号链接，来供用户态应用程序访问。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NTSTATUS __stdcall sub_10706(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NTSTATUS result; // eax@1</span><br><span class=\"line\">  NTSTATUS v3; // esi@2</span><br><span class=\"line\">  UNICODE_STRING SymbolicLinkName; // [sp+8h] [bp-14h]@2</span><br><span class=\"line\">  UNICODE_STRING DestinationString; // [sp+10h] [bp-Ch]@1</span><br><span class=\"line\">  PDEVICE_OBJECT DeviceObject; // [sp+18h] [bp-4h]@1</span><br><span class=\"line\"></span><br><span class=\"line\">  DeviceObject = 0;</span><br><span class=\"line\">  RtlInitUnicodeString(&amp;DestinationString, L&quot;\\\\Device\\\\ProcHelper&quot;);</span><br><span class=\"line\">  result = IoCreateDevice(DriverObject, 0, &amp;DestinationString, 0x22u, 0x100u, 0, &amp;DeviceObject);</span><br><span class=\"line\">  if ( result &gt;= 0 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    DriverObject-&gt;MajorFunction[IRP_MJ_CREATE] = (PDRIVER_DISPATCH)sub_10606;</span><br><span class=\"line\">    DriverObject-&gt;MajorFunction[IRP_MJ_CLOSE] = (PDRIVER_DISPATCH)sub_10606;</span><br><span class=\"line\">    DriverObject-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = (PDRIVER_DISPATCH)sub_10666;</span><br><span class=\"line\">    DriverObject-&gt;DriverUnload = (PDRIVER_UNLOAD)sub_1062A;</span><br><span class=\"line\">    RtlInitUnicodeString(&amp;SymbolicLinkName, L&quot;\\\\DosDevices\\\\ProcHelper&quot;);</span><br><span class=\"line\">    v3 = IoCreateSymbolicLink(&amp;SymbolicLinkName, &amp;DestinationString);</span><br><span class=\"line\">    if ( v3 &lt; 0 )</span><br><span class=\"line\">      IoDeleteDevice(DeviceObject);</span><br><span class=\"line\">    result = v3;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于DriverObject-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] &#x3D; (PDRIVER_DISPATCH)sub_10666;，这个就是 处理DeviceIoControl请求的驱动代码，查看函数sub_10666，发现其首先调用IoGetCurrentProcess，它返回调用 DeviceIoControl进程的EPROCESS结构，然后访问偏移量0x88处的数据，再访问偏移量0x8C处的数据。在Windows XP中，位于PEB结构偏移量为0x88的是一个LIST_ENTRY结构体，它是包含两个值的双向链表：第一个是BLink，指向列表中的前一项，第二个是FLink，指向列表的下一项。</p>\n<p>本例中，0x88是链表第一个LIST_ENTRY结构体的BLink，0x8C是是链表第一个LIST_ENTRY结构体的FLink。</p>\n<p>此处代码的作用是通过从加载进程的列表中解除链接，来隐藏当前进程。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PAGE:00010666 ; int __stdcall sub_10666(int, PIRP Irp)</span><br><span class=\"line\">PAGE:00010666 sub_10666       proc near               ; DATA XREF: sub_10706+54o</span><br><span class=\"line\">PAGE:00010666</span><br><span class=\"line\">PAGE:00010666 Irp             = dword ptr  0Ch</span><br><span class=\"line\">PAGE:00010666</span><br><span class=\"line\">PAGE:00010666                 mov     edi, edi</span><br><span class=\"line\">PAGE:00010668                 push    ebp</span><br><span class=\"line\">PAGE:00010669                 mov     ebp, esp</span><br><span class=\"line\">PAGE:0001066B                 call    ds:IoGetCurrentProcess</span><br><span class=\"line\">PAGE:00010671                 mov     ecx, [eax+8Ch]</span><br><span class=\"line\">PAGE:00010677                 add     eax, 88h</span><br><span class=\"line\">PAGE:0001067C                 mov     edx, [eax]</span><br><span class=\"line\">PAGE:0001067E                 mov     [ecx], edx</span><br><span class=\"line\">PAGE:00010680                 mov     ecx, [eax]</span><br><span class=\"line\">PAGE:00010682                 mov     eax, [eax+4]</span><br><span class=\"line\">PAGE:00010685                 mov     [ecx+4], eax</span><br><span class=\"line\">PAGE:00010688                 mov     ecx, [ebp+Irp]  ; Irp</span><br><span class=\"line\">PAGE:0001068B                 and     dword ptr [ecx+18h], 0</span><br><span class=\"line\">PAGE:0001068F                 and     dword ptr [ecx+1Ch], 0</span><br><span class=\"line\">PAGE:00010693                 xor     dl, dl          ; PriorityBoost</span><br><span class=\"line\">PAGE:00010695                 call    ds:IofCompleteRequest</span><br><span class=\"line\">PAGE:0001069B                 xor     eax, eax</span><br><span class=\"line\">PAGE:0001069D                 pop     ebp</span><br><span class=\"line\">PAGE:0001069E                 retn    8</span><br><span class=\"line\">PAGE:0001069E sub_10666       endp</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://cata1oc.github.io/2020/04/12/3%E7%8E%AF%E4%B8%8E0%E7%8E%AF%E9%80%9A%E4%BF%A1%EF%BC%88%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F%EF%BC%89/\">https://cata1oc.github.io/2020/04/12/3%E7%8E%AF%E4%B8%8E0%E7%8E%AF%E9%80%9A%E4%BF%A1%EF%BC%88%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F%EF%BC%89/</a></p>\n<p><a href=\"https://cata1oc.github.io/2020/04/14/%E5%88%9D%E6%8E%A2IRP/\">https://cata1oc.github.io/2020/04/14/%E5%88%9D%E6%8E%A2IRP/</a></p>\n","text":"3环与0环通信（常规方式）本篇介绍一下3环与0环通信的原理（常规方式），介绍与之相关的结构体，对象等，最后代码实现并模拟操作系统进行3环和0环的通信。 设备对象...","permalink":"/post/IRP Hook","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[],"tags":[{"name":"hook技术","slug":"hook技术","count":6,"path":"api/tags/hook技术.json"},{"name":"逆向工程核心原理","slug":"逆向工程核心原理","count":7,"path":"api/tags/逆向工程核心原理.json"},{"name":"API hook","slug":"API-hook","count":5,"path":"api/tags/API-hook.json"},{"name":"IRP","slug":"IRP","count":1,"path":"api/tags/IRP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3%E7%8E%AF%E4%B8%8E0%E7%8E%AF%E9%80%9A%E4%BF%A1%EF%BC%88%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F%EF%BC%89\"><span class=\"toc-text\">3环与0环通信（常规方式）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E5%A4%87%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">设备对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E6%A0%B8%E9%80%9A%E4%BF%A1%E7%9A%84%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">内核通信的对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E8%AE%BE%E5%A4%87%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">创建设备对象</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">数据传输方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">设置符号链接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ring0\"><span class=\"toc-text\">Ring0</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ring3\"><span class=\"toc-text\">Ring3</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IRP%E4%B8%8E%E6%B4%BE%E9%81%A3%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">IRP与派遣函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%AF%94%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">对比消息处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IRP%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">IRP的类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B4%BE%E9%81%A3%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">派遣函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ring0-1\"><span class=\"toc-text\">Ring0</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ring3-1\"><span class=\"toc-text\">Ring3</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9D%E6%8E%A2IRP\"><span class=\"toc-text\">初探IRP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IRP%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">IRP结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%88%E5%8D%95%E5%85%83\"><span class=\"toc-text\">栈单元</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E7%8E%AF%E4%B8%8E0%E7%8E%AF%E9%80%9A%E4%BF%A1%EF%BC%88%E5%8D%87%E7%BA%A7%EF%BC%89\"><span class=\"toc-text\">3环与0环通信（升级）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%A0%81\"><span class=\"toc-text\">操作码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%A2%9E%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">新增代码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ring3%E9%83%A8%E5%88%86\"><span class=\"toc-text\">Ring3部分</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ring0%E9%83%A8%E5%88%86\"><span class=\"toc-text\">Ring0部分</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E3%80%8A%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%E3%80%8B%E2%80%94%E2%80%94Lab10-3\"><span class=\"toc-text\">《恶意代码分析实战》——Lab10.3</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90-Lab10-03-exe\"><span class=\"toc-text\">静态分析-Lab10-03.exe</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90-Lab10-03-sys\"><span class=\"toc-text\">静态分析-Lab10-03.sys</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"HotFix Hook","uid":"d3476856058b1cb70ed747b50ca39e21","slug":"HotFix Hook","date":"2022-03-28T03:12:13.000Z","updated":"2025-06-05T12:13:51.065Z","comments":true,"path":"api/articles/HotFix Hook.json","keywords":null,"cover":[],"text":"API代码修改技术的问题对于全局API钩取——基于Win10的隐藏notepad.exe练习——stealth2.cpp——NewCreateProcessA(...","permalink":"/post/HotFix Hook","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[],"tags":[{"name":"hook技术","slug":"hook技术","count":6,"path":"api/tags/hook技术.json"},{"name":"逆向工程核心原理","slug":"逆向工程核心原理","count":7,"path":"api/tags/逆向工程核心原理.json"},{"name":"API hook","slug":"API-hook","count":5,"path":"api/tags/API-hook.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SSDT Hook","uid":"6b2dac661e4ecb3d25144597b91ee96f","slug":"SSDT Hook","date":"2022-03-26T11:33:07.000Z","updated":"2025-06-05T15:27:05.221Z","comments":true,"path":"api/articles/SSDT Hook.json","keywords":null,"cover":[],"text":"内核态代码只能被用户态的SYSCALL、SYSENTER或INT 0x2E指令来访问 程序进入0环后，有一个保存现场的过程，会将3环的各种寄存器都保存到一个叫做...","permalink":"/post/SSDT Hook","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[],"tags":[{"name":"hook技术","slug":"hook技术","count":6,"path":"api/tags/hook技术.json"},{"name":"逆向工程核心原理","slug":"逆向工程核心原理","count":7,"path":"api/tags/逆向工程核心原理.json"},{"name":"API hook","slug":"API-hook","count":5,"path":"api/tags/API-hook.json"},{"name":"SSDT","slug":"SSDT","count":1,"path":"api/tags/SSDT.json"},{"name":"系统调用","slug":"系统调用","count":1,"path":"api/tags/系统调用.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}