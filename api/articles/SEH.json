{"title":"SEH","uid":"b42df1b10b510ae71ca0bc4d234a8f72","slug":"SEH","date":"2022-04-20T08:19:17.000Z","updated":"2025-06-08T15:26:30.339Z","comments":true,"path":"api/articles/SEH.json","keywords":null,"cover":[],"content":"<p>SEH是Windows操作系统提供的异常处理机制，在程序源代码中使用<code>__try、__except、__finally</code>关键字来具体实现。</p>\n<h1 id=\"初识SEH\"><a href=\"#初识SEH\" class=\"headerlink\" title=\"初识SEH\"></a>初识SEH</h1><p>下面将通过一个例子来认识SEH（基于Windows10的练习）</p>\n<p>seh.exe程序故意触发了内存非法访问（Memory Access Violation）异常，然后通过SEH机制来处理该异常。并且使用PEB信息向程序添加简单的反调试代码，使程序在正常运行与调试运行时表现出不同的行为动作。</p>\n<p>1.正常运行</p>\n<p>首先直接双击运行seh.exe程序，弹出一个消息框，显示”Hello :)”字符串</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>表面上程序正常运行，其实进程内部已经发生了异常，但由于使用SEH机制进行了处理，所以程序正常运行。</p></blockquote>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/0_seh_%E6%AD%A3%E5%B8%B8%E8%BF%90%E8%A1%8C.png\" alt=\"Win10_seh_正常运行\"></p>\n<p>2.调试运行</p>\n<p>使用x32dbg调试器打开seh.exe程序并点击运行键，发生非法访问异常后暂停调试。</p>\n<p>如下图所示，401019地址处添加的MOV DWORD PTR DS:[EAX],1指令用来触发异常，当前EAX寄存器的值为0，所以该指令的实际含义是向内存地址0处写入值1.但试图向尚未分配的内存地址0写入某个值时，就会触发内存非法访问异常。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>内存地址0虽然属于seh.exe进程的用户内存区域，但由于是未分配的空间，所以无法随意访问。</p></blockquote>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/0_seh_%E8%B0%83%E8%AF%95%E4%B8%AD%E5%8F%91%E7%94%9F%E9%9D%9E%E6%B3%95%E8%AE%BF%E9%97%AE%E5%BC%82%E5%B8%B8.png\" alt=\"Win10_seh_调试中发生非法访问异常\"></p>\n<p>继续运行，就会弹出消息框显示”Debugger detected :)”</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/0_seh_%E8%B0%83%E8%AF%95%E8%BF%90%E8%A1%8C.png\" alt=\"Win10_seh_调试运行\"></p>\n<h1 id=\"OS的异常处理办法\"><a href=\"#OS的异常处理办法\" class=\"headerlink\" title=\"OS的异常处理办法\"></a>OS的异常处理办法</h1><h2 id=\"正常运行时的异常处理方法\"><a href=\"#正常运行时的异常处理方法\" class=\"headerlink\" title=\"正常运行时的异常处理方法\"></a>正常运行时的异常处理方法</h2><p>进程运行过程中若发生异常，OS会委托进程处理。若进程代码中存在具体的异常处理（如SEH异常处理器）代码，则能顺利处理相关异常，程序继续运行。但如果进程内部没有具体实现SEH，那么相关异常就无法处理，OS就会启动默认的异常处理机制，终止进程运行（如下图Windows7的默认异常处理机制）</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/Windows7%E7%9A%84%E9%BB%98%E8%AE%A4%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6.png\" alt=\"Windows7的默认异常处理机制\"></p>\n<h2 id=\"调试运行时的异常处理方法\"><a href=\"#调试运行时的异常处理方法\" class=\"headerlink\" title=\"调试运行时的异常处理方法\"></a>调试运行时的异常处理方法</h2><p>调试运行中发生异常时，处理方法与上面有些不同。若被调试进程内部发生异常，OS会首先把异常抛给调试进程处理。调试器几乎拥有被调试者的所有权限，它不仅可以运行、终止被调试者，还拥有被调试进程的虚拟内存、寄存器的读写权限。需要特别指出的是，被调试者内部发生的所有异常（错误）都由调试器处理。所以调试过程中发生的所有异常（错误）都要先交由调试器管理（被调试者的SEH依据优先顺序推给调试器）。像这样，被调试者发生异常时，调试器就会暂停运行，必须采取某种措施来处理异常，完成后继续调试。遇到异常时经常采用的几种处理方法如下所示。<br>（1） 直接修改异常：代码、寄存器、内存<br>被调试者发生异常时，调试器会在发生异常的代码处暂停，此时可以通过调试器直接修改有问题的代码、寄存器、内存等，排除异常后，调试器继续运行程序。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>遇到初始SEH中例子的异常时，采用直接修改异常的方法进行如下处理：</p>\n<p>（1）由于EAX寄存器所指的地址值错误，所以只要把EAX寄存器的值修改为有效的内存地址即可。</p>\n<p>（2）由于401019地址处的代码触发了异常，使用调试器的汇编功能将相关代码修改为NOP指令，运行后也可排除异常。</p>\n<p>（3）也可以使用Ollydbg的New Origin here（或在x32dbg汇编窗口右键选择在此设置EIP）功能改变程序的运行路径（因为无法直接修改EIP寄存器，所以需要借助该功能修改）</p></blockquote>\n<p>（2）将异常抛给被调试者处理</p>\n<p>如果被调试者内部存在SEH（异常处理函数）能够处理异常，那么异常通知会发送给被调试者，由被调试者自行处理。这与程序正常运行时异常处理方式是一样的（使用Ollydbg中的Shift+F7&#x2F;F8&#x2F;&#x2F;F9命令可以直接将当前异常抛还给被调试者）。</p>\n<p>（3）OS默认的异常处理机制</p>\n<p>若调试器与被调试者都无法处理（或故意不处理）当前发生的异常，则OS默认的异常处理机制会处理它，终止被调试进程，同时结束调试。</p>\n<h1 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h1><p>操作系统中定义的异常如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXCEPTION_DATATYPE_MISALIGNMENT     (<span class=\"number\">0x80000002</span>)    </span><br><span class=\"line\">EXCEPTION_BREAKPOINT                (<span class=\"number\">0x80000003</span>)    </span><br><span class=\"line\">EXCEPTION_SINGLE_STEP               (<span class=\"number\">0x80000004</span>) </span><br><span class=\"line\">EXCEPTION_ACCESS_VIOLATION          (<span class=\"number\">0xC0000005</span>)    </span><br><span class=\"line\">EXCEPTION_IN_PAGE_ERROR             (<span class=\"number\">0xC0000006</span>)       </span><br><span class=\"line\">EXCEPTION_ILLEGAL_INSTRUCTION       (<span class=\"number\">0xC000001D</span>)    </span><br><span class=\"line\">EXCEPTION_NONCONTINUABLE_EXCEPTION  (<span class=\"number\">0xC0000025</span>)    </span><br><span class=\"line\">EXCEPTION_INVALID_DISPOSITION       (<span class=\"number\">0xC0000026</span>)    </span><br><span class=\"line\">EXCEPTION_ARRAY_BOUNDS_EXCEEDED     (<span class=\"number\">0xC000008C</span>)    </span><br><span class=\"line\">EXCEPTION_FLOAT_DENORMAL_OPERAND    (<span class=\"number\">0xC000008D</span>)    </span><br><span class=\"line\">EXCEPTION_FLOAT_DIVIDE_BY_ZERO      (<span class=\"number\">0xC000008E</span>)    </span><br><span class=\"line\">EXCEPTION_FLOAT_INEXACT_RESULT      (<span class=\"number\">0xC000008F</span>)    </span><br><span class=\"line\">EXCEPTION_FLOAT_INVALID_OPERATION   (<span class=\"number\">0xC0000090</span>)    </span><br><span class=\"line\">EXCEPTION_FLOAT_OVERFLOW            (<span class=\"number\">0xC0000091</span>)    </span><br><span class=\"line\">EXCEPTION_FLOAT_STACK_CHECK         (<span class=\"number\">0xC0000092</span>)    </span><br><span class=\"line\">EXCEPTION_FLOAT_UNDERFLOW           (<span class=\"number\">0xC0000093</span>)    </span><br><span class=\"line\">EXCEPTION_INTEGER_DIVIDE_BY_ZERO    (<span class=\"number\">0xC0000094</span>)    </span><br><span class=\"line\">EXCEPTION_INTEGER_OVERFLOW          (<span class=\"number\">0xC0000095</span>)    </span><br><span class=\"line\">EXCEPTION_PRIVILEGED_INSTRUCTION    (<span class=\"number\">0xC0000096</span>)    </span><br><span class=\"line\">EXCEPTION_STACK_OVERFLOW            (<span class=\"number\">0xC00000FD</span>)    </span><br><span class=\"line\">                                                                    出处：SDK的winnt.h</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5种代表性异常\"><a href=\"#5种代表性异常\" class=\"headerlink\" title=\"5种代表性异常\"></a>5种代表性异常</h2><h3 id=\"EXCEPTION-ACCESS-VIOLATION-0xC0000005\"><a href=\"#EXCEPTION-ACCESS-VIOLATION-0xC0000005\" class=\"headerlink\" title=\"EXCEPTION_ACCESS_VIOLATION(0xC0000005)\"></a>EXCEPTION_ACCESS_VIOLATION(0xC0000005)</h3><p>试图访问不存在或不具访问权限的内存区域时，就会发生EXCEPTION_ACCESS_VIOLATION（非法访问异常）。</p>\n<p><strong>例子</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOV DWORD PTR DS:[0],1</span><br><span class=\"line\">-&gt; 内存地址0处是尚未分配的区域</span><br><span class=\"line\"></span><br><span class=\"line\">ADD DWORD PTR DS:[401000],1</span><br><span class=\"line\">-&gt; .text节区的起始地址401000仅具有&quot;读&quot;权限（无&quot;写&quot;权限）</span><br><span class=\"line\"></span><br><span class=\"line\">XOR DWORD PTR DS:[80000000],1234</span><br><span class=\"line\">-&gt; 内存地址80000000属于内核区域，用户模式下无法访问</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"EXCEPTION-BREAKPOINT-0x80000003\"><a href=\"#EXCEPTION-BREAKPOINT-0x80000003\" class=\"headerlink\" title=\"EXCEPTION_BREAKPOINT(0x80000003)\"></a>EXCEPTION_BREAKPOINT(0x80000003)</h3><p>在运行代码中设置断点后，CPU尝试执行该地址处的指令时，将发生EXCEPTION_BREAKPOINT异常。</p>\n<h3 id=\"EXCEPTION-ILLEGAL-INSTRUCTION-0xC000001D\"><a href=\"#EXCEPTION-ILLEGAL-INSTRUCTION-0xC000001D\" class=\"headerlink\" title=\"EXCEPTION_ILLEGAL_INSTRUCTION(0xC000001D)\"></a>EXCEPTION_ILLEGAL_INSTRUCTION(0xC000001D)</h3><p>CPU遇到无法解析的指令时引发该异常。比如”0FFF”指令在x86 CPU中未定义，CPU遇到该指令将引发EXCEPTION_ILLEGAL_INSTRUCTION异常。</p>\n<h3 id=\"EXCEPTION-INTEGER-DIVIDE-BY-ZERO-0xC0000094\"><a href=\"#EXCEPTION-INTEGER-DIVIDE-BY-ZERO-0xC0000094\" class=\"headerlink\" title=\"EXCEPTION_INTEGER_DIVIDE_BY_ZERO(0xC0000094)\"></a>EXCEPTION_INTEGER_DIVIDE_BY_ZERO(0xC0000094)</h3><p>INTEGER（整数）除法运算中，若分母为0（即被0除），则引发EXCEPTION_INTEGER_DIVIDE_BY_ZERO异常。</p>\n<h3 id=\"EXCEPTION-SINGLE-STEP-0x80000004\"><a href=\"#EXCEPTION-SINGLE-STEP-0x80000004\" class=\"headerlink\" title=\"EXCEPTION_SINGLE_STEP(0x80000004)\"></a>EXCEPTION_SINGLE_STEP(0x80000004)</h3><p>Single Step（单步）的含义是执行一条指令，然后暂停。CPU进入到单步模式后，每执行一条指令就会引发EXCEPTION_SINGLE_STEP异常，暂停运行。将EFLAGS寄存器的TF（Trap Flag，陷阱标志）位设置为1后，CPU就会进入单步工作模式。</p>\n<h1 id=\"SEH详细说明\"><a href=\"#SEH详细说明\" class=\"headerlink\" title=\"SEH详细说明\"></a>SEH详细说明</h1><h2 id=\"SEH链\"><a href=\"#SEH链\" class=\"headerlink\" title=\"SEH链\"></a>SEH链</h2><p>SEH以链的形式存在。第一个异常处理器中若未处理相关异常，它就会被传递给下一个异常处理器，直到得到处理。从技术层面来看，SEH是由<code>_EXCEPTION_REGISTRATION_RECORD</code>结构体组成的链表。其定义如下：</p>\n<p>使用Windbg命令<code>dt _EXCEPTION_REGISTRATION_RECORD</code>查看<code>_EXCEPTION_REGISTRATION_RECORD</code>结构体</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; dt _EXCEPTION_REGISTRATION_RECORD</span><br><span class=\"line\">ntdll!_EXCEPTION_REGISTRATION_RECORD</span><br><span class=\"line\">   +0x000 Next             : Ptr32 _EXCEPTION_REGISTRATION_RECORD</span><br><span class=\"line\">   +0x004 Handler          : Ptr32     _EXCEPTION_DISPOSITION </span><br></pre></td></tr></table></figure>\n\n<p>定义：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">EXCEPTION_REGISTRATION_RECORD</span>&#123;</span></span><br><span class=\"line\">\tPEXCEPTION_REGISTRATION_RECORD Next;</span><br><span class=\"line\">    PEXCEPTION_DISPOSITION Handler; </span><br><span class=\"line\">&#125;EXCEPTION_REGISTRATION_RECORD,*PEXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></figure>\n\n<p>Next成员是指向下一个<code>_EXCEPTION_REGISTRATION_RECORD</code>结构体的指针，Handler成员是异常处理函数（异常处理器）。若Next成员的值为FFFFFFFF，则表示它是链表的最后一个结点。SEH链结构如下：</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/H%E9%93%BE.jpg\" alt=\"SEH链\"></p>\n<p>图中共存在3个SEH（异常处理器），发生异常时，该异常会按照（A）-&gt;（B）-&gt;（C）的顺序依次传递，直到有异常处理器处理。</p>\n<h2 id=\"异常处理函数的定义\"><a href=\"#异常处理函数的定义\" class=\"headerlink\" title=\"异常处理函数的定义\"></a>异常处理函数的定义</h2><h3 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h3><p>SEH异常处理函数（SEH函数）的定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXCEPTION_DISPOSITION _except_handler(</span><br><span class=\"line\">\tEXCEPTION_RECORD *pRecord,</span><br><span class=\"line\">\tEXCEPTION_REGISTRATION_RECORD *pFrame,</span><br><span class=\"line\">\tCONTEXT *pContext,</span><br><span class=\"line\">\tPVOID pValue</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>异常处理函数（异常处理器）接收4个参数输入，返回名为EXCEPTION_DISPOSITION的枚举类型。该异常处理函数由系统调用，是一个回调函数，系统调用它时会给出上述定义的4个参数，这4个参数中保存着与异常相关的信息，首先，第一个参数是指向EXCEPTION_RECORD结构体的指针，EXCEPTION_RECORD结构体的定义如下：</p>\n<h3 id=\"第一个参数：EXCEPTION-RECORD结构体\"><a href=\"#第一个参数：EXCEPTION-RECORD结构体\" class=\"headerlink\" title=\"第一个参数：EXCEPTION_RECORD结构体\"></a>第一个参数：EXCEPTION_RECORD结构体</h3><p>使用Windbg命令<code>dt _EXCEPTION_RECORD</code>查看如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; dt _EXCEPTION_RECORD</span><br><span class=\"line\">ntdll!_EXCEPTION_RECORD</span><br><span class=\"line\">   +0x000 ExceptionCode    : Int4B</span><br><span class=\"line\">   +0x004 ExceptionFlags   : Uint4B</span><br><span class=\"line\">   +0x008 ExceptionRecord  : Ptr32 _EXCEPTION_RECORD</span><br><span class=\"line\">   +0x00c ExceptionAddress : Ptr32 Void</span><br><span class=\"line\">   +0x010 NumberParameters : Uint4B</span><br><span class=\"line\">   +0x014 ExceptionInformation : [15] Uint4B</span><br></pre></td></tr></table></figure>\n\n<p>定义如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">EXCEPTION_RECORD</span>&#123;</span></span><br><span class=\"line\">\t DWORD ExceptionCode;                           <span class=\"comment\">//异常代码</span></span><br><span class=\"line\">     DWORD ExceptionFlags;</span><br><span class=\"line\">     <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">EXCEPTION_RECORD</span> *<span class=\"title\">ExceptionRecord</span>;</span>   </span><br><span class=\"line\">     PVOID ExceptionAddress;                       <span class=\"comment\">//异常发生地址</span></span><br><span class=\"line\">     DWORD NumberParameters;</span><br><span class=\"line\">     ULONG_PTR ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];                                                                          <span class=\"comment\">//EXCEPTION_MAXIMUM_PARAMETERS=15</span></span><br><span class=\"line\">&#125;EXCEPTION_RECORD,*PEXCEPTION_RECORD;  </span><br></pre></td></tr></table></figure>\n\n<p>结构体中ExceptionCode成员用来指出异常类型，ExceptionAddress成员表示发生异常的代码地址</p>\n<h3 id=\"第三个参数：CONTEXT结构体\"><a href=\"#第三个参数：CONTEXT结构体\" class=\"headerlink\" title=\"第三个参数：CONTEXT结构体\"></a>第三个参数：CONTEXT结构体</h3><p>使用Windbg命令<code>dt _CONTEXT</code>查看CONTEXT结构体如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; dt _CONTEXT</span><br><span class=\"line\">ntdll!_CONTEXT</span><br><span class=\"line\">   +0x000 ContextFlags     : Uint4B</span><br><span class=\"line\">   +0x004 Dr0              : Uint4B</span><br><span class=\"line\">   +0x008 Dr1              : Uint4B</span><br><span class=\"line\">   +0x00c Dr2              : Uint4B</span><br><span class=\"line\">   +0x010 Dr3              : Uint4B</span><br><span class=\"line\">   +0x014 Dr6              : Uint4B</span><br><span class=\"line\">   +0x018 Dr7              : Uint4B</span><br><span class=\"line\">   +0x01c FloatSave        : _FLOATING_SAVE_AREA</span><br><span class=\"line\">   +0x08c SegGs            : Uint4B</span><br><span class=\"line\">   +0x090 SegFs            : Uint4B</span><br><span class=\"line\">   +0x094 SegEs            : Uint4B</span><br><span class=\"line\">   +0x098 SegDs            : Uint4B</span><br><span class=\"line\">   +0x09c Edi              : Uint4B</span><br><span class=\"line\">   +0x0a0 Esi              : Uint4B</span><br><span class=\"line\">   +0x0a4 Ebx              : Uint4B</span><br><span class=\"line\">   +0x0a8 Edx              : Uint4B</span><br><span class=\"line\">   +0x0ac Ecx              : Uint4B</span><br><span class=\"line\">   +0x0b0 Eax              : Uint4B</span><br><span class=\"line\">   +0x0b4 Ebp              : Uint4B</span><br><span class=\"line\">   +0x0b8 Eip              : Uint4B</span><br><span class=\"line\">   +0x0bc SegCs            : Uint4B</span><br><span class=\"line\">   +0x0c0 EFlags           : Uint4B</span><br><span class=\"line\">   +0x0c4 Esp              : Uint4B</span><br><span class=\"line\">   +0x0c8 SegSs            : Uint4B</span><br><span class=\"line\">   +0x0cc ExtendedRegisters : [512] UChar</span><br></pre></td></tr></table></figure>\n\n<p>CONTEXT结构体定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">CONTEXT</span>&#123;</span></span><br><span class=\"line\">   DWORD ContextFlags；</span><br><span class=\"line\">   DWORD Dr0;              <span class=\"comment\">// 04h</span></span><br><span class=\"line\">   DWORD Dr1;              <span class=\"comment\">// 08h</span></span><br><span class=\"line\">   DWORD Dr2;              <span class=\"comment\">// 0Ch</span></span><br><span class=\"line\">   DWORD Dr3;              <span class=\"comment\">// 10h</span></span><br><span class=\"line\">   DWORD Dr6;              <span class=\"comment\">// 14h</span></span><br><span class=\"line\">   DWORD Dr7;              <span class=\"comment\">// 18h</span></span><br><span class=\"line\">   FLOATING_SAVE_AREA FloatSave;</span><br><span class=\"line\">   DWORD SegGs;            <span class=\"comment\">// 8Ch</span></span><br><span class=\"line\">   DWORD SegFs;            <span class=\"comment\">// 90h</span></span><br><span class=\"line\">   DWORD SegEs;            <span class=\"comment\">// 94h</span></span><br><span class=\"line\">   DWORD SegDs;            <span class=\"comment\">// 98h</span></span><br><span class=\"line\">   DWORD Edi;              <span class=\"comment\">// 9Ch</span></span><br><span class=\"line\">   DWORD Esi;              <span class=\"comment\">// A0h</span></span><br><span class=\"line\">   DWORD Ebx;              <span class=\"comment\">// A4h</span></span><br><span class=\"line\">   DWORD Edx;              <span class=\"comment\">// A8h</span></span><br><span class=\"line\">   DWORD Ecx;              <span class=\"comment\">// ACh</span></span><br><span class=\"line\">   DWORD Eax;              <span class=\"comment\">// B0h</span></span><br><span class=\"line\">   DWORD Ebp;              <span class=\"comment\">// B4h</span></span><br><span class=\"line\">   DWORD Eip;              <span class=\"comment\">// B8h</span></span><br><span class=\"line\">   DWORD SegCs;            <span class=\"comment\">// BCh(must be sanitized)</span></span><br><span class=\"line\">   DWORD EFlags;           <span class=\"comment\">// C0h</span></span><br><span class=\"line\">   DWORD Esp;              <span class=\"comment\">// C4h</span></span><br><span class=\"line\">   DWORD SegSs;            <span class=\"comment\">// C8h</span></span><br><span class=\"line\">   BYTE ExtendedRegisters[MAXIMUM_SUPPORTED_EXTENSION]; </span><br><span class=\"line\">                           <span class=\"comment\">// MAXIMUM_SUPPORTED_EXTENSION=512</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>CONTEXT结构体用来备份CPU寄存器的值，因为多线程环境下需要这样做。每个线程内部都拥有1个CONTEXT结构体。CPU暂时离开当前线程去运行其他线程时，CPU寄存器的值就会保存到当前线程的CONTEXT结构体；CPU再次运行该线程时，会使用保存在CONTEXT结构体的值来覆盖CPU寄存器的值，然后从之前暂停的代码处继续执行。通过这种方式，OS可以在多线程环境下安全运行各线程。</p>\n<h3 id=\"异常函数处理流程\"><a href=\"#异常函数处理流程\" class=\"headerlink\" title=\"异常函数处理流程\"></a>异常函数处理流程</h3><p>异常发生时，执行异常代码的线程就会中断运行，转而运行SEH（异常处理器&#x2F;异常处理函数），此时OS会把线程的CONTEXT结构体的指针传递给异常处理函数（异常处理器）的相应参数。代码48-6的结构体成员中有1个Eip成员（偏移量：B8）。在异常处理函数中将参数传递过来的CONTEXT.Eip设置为其他地址，然后返回异常处理函数。这样，之前暂停的线程会执行新设置的EIP地址处的代码（反调试中经常采用这一技术，练习示例seh.exe中也采用了该技术，后面会详细分析）。</p>\n<h3 id=\"异常函数的返回值\"><a href=\"#异常函数的返回值\" class=\"headerlink\" title=\"异常函数的返回值\"></a>异常函数的返回值</h3><p>异常处理函数的返回值为EXCEPTION_DISPOSITION枚举类型，下面了解一下该类型。</p>\n<p>使用Windbg命令<code>dt _EXCEPTION_DISPOSITION</code>查看EXCEPTION_DISPOSITION枚举类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; dt _EXCEPTION_DISPOSITION</span><br><span class=\"line\">ntdll!_EXCEPTION_DISPOSITION</span><br><span class=\"line\">   ExceptionContinueExecution = 0n0</span><br><span class=\"line\">   ExceptionContinueSearch = 0n1</span><br><span class=\"line\">   ExceptionNestedException = 0n2</span><br><span class=\"line\">   ExceptionCollidedUnwind = 0n3</span><br></pre></td></tr></table></figure>\n\n<p>EXCEPTION_DISPOSITION枚举类型的定义：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">enum</span> _<span class=\"title\">EXCEPTION_DISPOSITION</span>&#123;</span></span><br><span class=\"line\">\tExceptionContinueExecution = <span class=\"number\">0</span>,    <span class=\"comment\">//继续执行异常代码</span></span><br><span class=\"line\">    ExceptionContinueSearch = <span class=\"number\">1</span>,       <span class=\"comment\">//运行下一个异常处理函数</span></span><br><span class=\"line\">    ExceptionNestedException = <span class=\"number\">2</span>,      <span class=\"comment\">//在OS内部使用</span></span><br><span class=\"line\">    ExceptionCollidedUnwind = <span class=\"number\">3</span>        <span class=\"comment\">//在OS内部使用</span></span><br><span class=\"line\">&#125;EXCEPTION_DISPOSITION;   </span><br></pre></td></tr></table></figure>\n\n<p>异常处理器处理异常后会返回ExceptionContinueExecution（0），从发生异常的代码处继续运行。若当前异常处理器无法处理异常，则返回ExceptionContinueSearch（1），将异常派送到SEH链的下一个异常处理器。</p>\n<h2 id=\"SEH链的访问\"><a href=\"#SEH链的访问\" class=\"headerlink\" title=\"SEH链的访问\"></a>SEH链的访问</h2><p>通过TEB结构体的NtTib成员可以访问进程的SEH链。</p>\n<p>如下图所示，TEB.NtTib.ExceptionList成员是TEB结构体的第一个成员。FS段寄存器指向段内存的起始地址，TEB结构体即位于此，所以通过TEB.NtTib.ExceptionList&#x3D;FS:[0]可以获取TEB.NtTib.ExceptionList的地址。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/B.NtTib.ExceptionList.png\" alt=\"TEB.NtTib.ExceptionList\"></p>\n<h2 id=\"SEH安装方法\"><a href=\"#SEH安装方法\" class=\"headerlink\" title=\"SEH安装方法\"></a>SEH安装方法</h2><p>在C语言中使用<code>__try、__except、__finally</code>关键字就可以向代码添加SEH。在汇编语言中添加SEH的方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUSH @MyHandler                  ;异常处理函数地址</span><br><span class=\"line\">PUSH DWORD PTR FS:[0]            ;Head Of SEH Linked List</span><br><span class=\"line\">MOV DWORD PTR FS:[0],ESP         ;添加链表</span><br></pre></td></tr></table></figure>\n\n<p>“在程序代码中安装SEH”就是将自身的异常处理器添加到已有的SEH链。从技术层面讲，就是将自身的<code>EXCEPTION_REGISTRATION_RECORD</code>结构体链接到<code>EXCEPTION_REGISTRATION_RECORD</code>结构体链表。</p>\n<h2 id=\"基于Windows10的练习\"><a href=\"#基于Windows10的练习\" class=\"headerlink\" title=\"基于Windows10的练习\"></a>基于Windows10的练习</h2><h3 id=\"1-安装SEH\"><a href=\"#1-安装SEH\" class=\"headerlink\" title=\"1.安装SEH\"></a>1.安装SEH</h3><p>首先使用x32dbg打开seh.exe，运行到401000地址处（seh.exe的main函数），如下图所示，401000、401005、40100C地址处的三条指令即为安装SEH的过程，新添加的异常处理器就是位于40105A的异常处理函数。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_%E5%AE%89%E8%A3%85SEH.png\" alt=\"Win10_seh_安装SEH\"></p>\n<h3 id=\"2-查看SEH链\"><a href=\"#2-查看SEH链\" class=\"headerlink\" title=\"2.查看SEH链\"></a>2.查看SEH链</h3><p>①运行代码到401005地址处，查看FS:[0]的值，其值就是SEH链的起始地址。</p>\n<p>下图中，从代码信息窗口中可以看到，FS:[0]&#x3D;[00270000]&#x3D;0019FF60，其中0019FF60就是SEH链的起始地址（即EXCEPTION_REGISTRATION_RECORD结构体链表的起始地址）。从栈窗口中查看地址0019FF60，可以发现第一个EXCEPTION_REGISTRATION_RECORD结构体（Next&#x3D;0019FFCC，Handler&#x3D;00402730）。异常处理器地址00402730存在于seh.exe进程的代码节区（该异常处理器是VC++生成PE文件时默认添加到其启动函数的）。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_FS_%5B0%5D=SEH%E9%93%BE%E8%B5%B7%E5%A7%8B%E5%9C%B0%E5%9D%80.png\" alt=\"Win10_seh_FS_[0]=SEH链起始地址\"></p>\n<p>②接着在栈窗口中转到0019FFCC地址处。查看链表中的第二个EXCEPTION_REGISTRATION_RECORD结构体（Next&#x3D;0019FFE4，Handler&#x3D;7729AF30），再转到地址0019FFE4处，查看链表中的第三个EXCEPTION_REGISTRATION_RECORD结构体（Next&#x3D;FFFFFFFF，Handler&#x3D;772ABC21），第三个EXCEPTION_REGISTRATION_RECORD结构体的Next为FFFFFFFF，所以第三个EXCEPTION_REGISTRATION_RECORD结构体也是SEH链表的最后一个结构体。异常处理地址为772ABC21，它位于ntdll.dll模块的代码区域，是OS默认的异常处理器（创建进程时，OS会自动产生默认的SEH）</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8.png\" alt=\"Win10_seh_最后一个异常处理器\"></p>\n<h3 id=\"3-添加SEH\"><a href=\"#3-添加SEH\" class=\"headerlink\" title=\"3.添加SEH\"></a>3.添加SEH</h3><p>运行401005和40100C地址处的PUSH DWORD PTR FS:[0]、MOV DWORD PTR FS:[0],ESP指令，查看栈窗口（用Ollydbg更清晰），出现了新生成的EXCEPTION_REGISTRATION_RECORD结构体（Next&#x3D;0019FF60，Handler&#x3D;0040105A）。新的异常处理器（0040105A）就这样添加到SEH链。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84SEH.png\" alt=\"Win10_seh_添加新的SEH\"></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_Ollydbg%E6%9F%A5%E7%9C%8B%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84SEH.png\" alt=\"Win10_seh_Ollydbg查看添加新的SEH\"></p>\n<p>通过x32dbg的SEH链窗口也可以看到新添加在顶端的异常处理器（0040105A）</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_SEH%E9%93%BE%E6%9F%A5%E7%9C%8B%E7%AA%97%E5%8F%A3.png\" alt=\"Win10_seh_SEH链查看窗口\"></p>\n<h3 id=\"4-发生异常\"><a href=\"#4-发生异常\" class=\"headerlink\" title=\"4.发生异常\"></a>4.发生异常</h3><p>如果执行401019地址处的MOV DWORD PTR DS:[EAX],1指令，就会触发EXCEPTION_ACCESS_VIOLATION异常。此时程序处在调试之中，根据异常处理的顺序，OS会把控制权交给调试器（异常处理器（0040105A）未运行）。在0040105A地址处设置断点，然后按Shift+Run（Shift+F9）组合键，再将异常派送给被调试进程（seh.exe），调试器暂停在设置的断点处（0040105A）。如下图，被调试者会调用注册在自身SEH链中的异常处理器来处理异常。设置好断点后，接下来即可调试异常处理器。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_%E5%8F%91%E7%94%9F%E5%BC%82%E5%B8%B8%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8.png\" alt=\"Win10_seh_发生异常调用异常处理器\"></p>\n<h3 id=\"5-查看异常处理器参数\"><a href=\"#5-查看异常处理器参数\" class=\"headerlink\" title=\"5.查看异常处理器参数\"></a>5.查看异常处理器参数</h3><h4 id=\"栈中存储的参数\"><a href=\"#栈中存储的参数\" class=\"headerlink\" title=\"栈中存储的参数\"></a>栈中存储的参数</h4><p>调试SEH时，栈中存储的参数如下图所示：</p>\n<p>根据SEH异常处理函数（SEH函数）的定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXCEPTION_DISPOSITION _except_handler(</span><br><span class=\"line\">\tEXCEPTION_RECORD *pRecord,</span><br><span class=\"line\">\tEXCEPTION_REGISTRATION_RECORD *pFrame,</span><br><span class=\"line\">\tCONTEXT *pContext,</span><br><span class=\"line\">\tPVOID pValue</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数（ESP+4）是指向EXCEPTION_RECORD结构体的指针pRecord（0019F434）</p>\n<p>第二个参数（ESP+8）是指向EXCEPTION_REGISTRATION_RECORD结构体的指针pFrame（0019FF24）</p>\n<p>第三个参数（ESP+C）是指向CONTEXT结构体的指针pContext（0019F484）</p>\n<p>第四个参数（ESP+10）是pValue供系统内部使用，可忽略（0019F3BC）</p>\n<p>下面依次查看各参数的内容</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_x32dbg%E6%9F%A5%E7%9C%8B%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8%E6%97%B6%E7%9A%84%E6%A0%88.png\" alt=\"Win10_seh_x32dbg查看调用异常处理器时的栈\"></p>\n<p>使用Ollydbg查看更清晰</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_Ollydbg%E6%9F%A5%E7%9C%8B%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8%E6%97%B6%E7%9A%84%E6%A0%88.png\" alt=\"Win10_seh_Ollydbg查看调用异常处理器时的栈\"></p>\n<h4 id=\"第一个参数\"><a href=\"#第一个参数\" class=\"headerlink\" title=\"第一个参数\"></a>第一个参数</h4><p>第一个参数（ESP+4）是指向EXCEPTION_RECORD结构体的指针pRecord（0019F434），查看结构体中的数据，根据EXCEPTION_RECORD结构体的定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; dt _EXCEPTION_RECORD</span><br><span class=\"line\">ntdll!_EXCEPTION_RECORD</span><br><span class=\"line\">   +0x000 ExceptionCode    : Int4B</span><br><span class=\"line\">   +0x004 ExceptionFlags   : Uint4B</span><br><span class=\"line\">   +0x008 ExceptionRecord  : Ptr32 _EXCEPTION_RECORD</span><br><span class=\"line\">   +0x00c ExceptionAddress : Ptr32 Void</span><br><span class=\"line\">   +0x010 NumberParameters : Uint4B</span><br><span class=\"line\">   +0x014 ExceptionInformation : [15] Uint4B</span><br></pre></td></tr></table></figure>\n\n<p>ExceptionCode（pRecord+0）为C0000005（EXCEPTION_ACCESS_VIOLATION），发生异常的代码地址ExceptionAddress（pRecord+0xc）为00401019（和前面发生异常的代码地址是一致的）</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_EXCEPTION_RECORD%E7%BB%93%E6%9E%84%E4%BD%93.png\" alt=\"Win10_seh_EXCEPTION_RECORD结构体\"></p>\n<h4 id=\"第二个参数\"><a href=\"#第二个参数\" class=\"headerlink\" title=\"第二个参数\"></a>第二个参数</h4><p>第二个参数（ESP+8）是指向EXCEPTION_REGISTRATION_RECORD结构体的指针pFrame（0019FF24），它是SEH链的起始地址。</p>\n<h4 id=\"第三个参数\"><a href=\"#第三个参数\" class=\"headerlink\" title=\"第三个参数\"></a>第三个参数</h4><p>第三个参数（ESP+C）是指向CONTEXT结构体的指针pContext（0019F484），查看pContext所指的地址空间，根据CONTEXT结构体的定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; dt _CONTEXT</span><br><span class=\"line\">ntdll!_CONTEXT</span><br><span class=\"line\">   +0x000 ContextFlags     : Uint4B</span><br><span class=\"line\">   +0x004 Dr0              : Uint4B</span><br><span class=\"line\">   +0x008 Dr1              : Uint4B</span><br><span class=\"line\">   +0x00c Dr2              : Uint4B</span><br><span class=\"line\">   +0x010 Dr3              : Uint4B</span><br><span class=\"line\">   +0x014 Dr6              : Uint4B</span><br><span class=\"line\">   +0x018 Dr7              : Uint4B</span><br><span class=\"line\">   +0x01c FloatSave        : _FLOATING_SAVE_AREA</span><br><span class=\"line\">   +0x08c SegGs            : Uint4B</span><br><span class=\"line\">   +0x090 SegFs            : Uint4B</span><br><span class=\"line\">   +0x094 SegEs            : Uint4B</span><br><span class=\"line\">   +0x098 SegDs            : Uint4B</span><br><span class=\"line\">   +0x09c Edi              : Uint4B</span><br><span class=\"line\">   +0x0a0 Esi              : Uint4B</span><br><span class=\"line\">   +0x0a4 Ebx              : Uint4B</span><br><span class=\"line\">   +0x0a8 Edx              : Uint4B</span><br><span class=\"line\">   +0x0ac Ecx              : Uint4B</span><br><span class=\"line\">   +0x0b0 Eax              : Uint4B</span><br><span class=\"line\">   +0x0b4 Ebp              : Uint4B</span><br><span class=\"line\">   +0x0b8 Eip              : Uint4B</span><br><span class=\"line\">   +0x0bc SegCs            : Uint4B</span><br><span class=\"line\">   +0x0c0 EFlags           : Uint4B</span><br><span class=\"line\">   +0x0c4 Esp              : Uint4B</span><br><span class=\"line\">   +0x0c8 SegSs            : Uint4B</span><br><span class=\"line\">   +0x0cc ExtendedRegisters : [512] UChar</span><br></pre></td></tr></table></figure>\n\n\n\n<p>特别需要注意的是Eip成员，它位于结构体偏移0xB8的位置，存储着发生异常的代码地址</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_CONTEXT%E7%BB%93%E6%9E%84%E4%BD%93.png\" alt=\"Win10_seh_CONTEXT结构体\"></p>\n<h4 id=\"第四个参数\"><a href=\"#第四个参数\" class=\"headerlink\" title=\"第四个参数\"></a>第四个参数</h4><p>第四个参数（ESP+10）是pValue供系统内部使用，可忽略（0019F3BC）</p>\n<h3 id=\"6-调试异常处理器\"><a href=\"#6-调试异常处理器\" class=\"headerlink\" title=\"6.调试异常处理器\"></a>6.调试异常处理器</h3><p>40105A地址处的异常处理器中存在着调试器检测代码，下面将进行具体分析：</p>\n<p>①根据前面的分析可知，[ESP+C]是异常处理器的第三个参数pContext的值，MOV ESI,DWORD PTR SS:[ESP+C]用于将pContext地址（0019F484）传送到ESI寄存器；</p>\n<p>②FS:[30]是PEB结构体的起始地址（0026D000），MOV EAX,DWORD PTR FS:[30]用于将PEB结构体的起始地址传递给EAX；然后CMP BYTE PTR DS:[EAX+2],1指令是读取[EAX+2]地址（0026D002）处的1各字节值与1比较，由于当前EAX保存的是PEB结构体的起始地址，所以[EAX+2]（0026D002）指的就是PEB.BeingDebugged成员，图中内存窗口可以看到其值为1，表示进程处于调试状态。</p>\n<p>③上面CMP命令中的2个比较对象不同，则执行JNZ&#x2F;JNE命令跳转。由于PEB.BeingDebugged的值为1，所以不跳转，即不执行该JNZ&#x2F;JNE指令。</p>\n<p>A.若程序非调试运行时，将执行JNZ&#x2F;JNE指令跳转到401076地址处（MOV DWORD PTR DS:[ESI+B8],seh.401039），由于当前ESI保存着CONTEXT结构体指针pContext的起始地址（0019F484），所以[ESI+B8]为pContext-&gt;Eip（当前值为异常发生代码地址401019），因此MOV DWORD PTR DS:[ESI+B8],seh.401039指令用来将pContext-&gt;Eip值更改为401039。异常处理器终止时，发生异常的线程会运行401039地址处的代码；</p>\n<p>B.若程序处于调试状态，则跳过该JNZ&#x2F;JNE指令，直接执行40106A地址处的指令（MOV DWORD PTR DS:[ESI+B8],seh.401023），由于当前ESI保存着CONTEXT结构体指针pContext的起始地址（0019F484），所以[ESI+B8]为pContext-&gt;Eip（当前值为异常发生代码地址401019），因此MOV DWORD PTR DS:[ESI+B8],seh.401023指令用来将pContext-&gt;Eip值更改为401023。异常处理器终止时，发生异常的线程会运行401023地址处的代码。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8%E4%BB%A3%E7%A0%81.png\" alt=\"Win10_seh_异常处理器代码\"></p>\n<p>④由于进程处于调试中，所以进程执行完40106A处的指令后会跳转到异常处理器的终止代码401080处（JMP seh.401080），XOR EAX,EAX指令用于将返回值（EAX）设置为0，然后异常处理器返回。返回值0代表EXCEPTION_CONTINUE_EXECUTION，表示异常得到处理，相关线程可以继续运行。</p>\n<p>运行到401082地址处的RET指令时，控制权返回至ntdll.dll模块的代码区域，它属于系统区域，在x32dbg中按Run键后，调试会在401023地址处（已预先设置断点）暂停</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E7%BB%88%E6%AD%A2%E4%BB%A3%E7%A0%81%E5%A4%84.png\" alt=\"Win10_seh_异常处理器的终止代码处\"></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_%E8%BF%94%E5%9B%9Entdll.dll%E6%A8%A1%E5%9D%97.png\" alt=\"Win10_seh_返回ntdll.dll模块\"></p>\n<p>⑤调试器暂停在401023地址处后，继续运行401031处的CALL DWORD PTR DS:[&lt;&amp;MessageBoxA&gt;]指令，弹出一个消息框。按”确定”按钮关闭消息框后，执行401037处的JMP seh.40104D指令，跳转到删除SEH的代码处（40104D）。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_%E6%9A%82%E5%81%9C%E5%9C%A8401023%E5%9C%B0%E5%9D%80%E5%A4%84.png\" alt=\"Win10_seh_暂停在401023地址处\"></p>\n<h3 id=\"7-删除SEH\"><a href=\"#7-删除SEH\" class=\"headerlink\" title=\"7.删除SEH\"></a>7.删除SEH</h3><p>调试运行到40104D地址处后查看栈，EXCEPTION_REGISTRATION_RECORD结构体存储在其中（0019FF24），该结构体是SEH链中最初运行的异常处理器。40104D处的POP DWORD PTR FS:[0]指令用来读取栈值（0019FF60），并将其放入FS:[0]。FS:[0]是TEB.NtTib.ExceptionList，0019FF60就是下一个SEH的起始地址。执行该指令后，前面注册的SEH（0019FF24）被从SEH链中删除。然后执行401054地址处的ADD ESP,4指令，将栈中的异常处理器地址（40105A）也删除。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/n10_seh_%E5%88%A0%E9%99%A4SEH.png\" alt=\"Win10_seh_删除SEH\"></p>\n<h1 id=\"设置OllyDbg选项\"><a href=\"#设置OllyDbg选项\" class=\"headerlink\" title=\"设置OllyDbg选项\"></a>设置OllyDbg选项</h1><p>本章最重要、最关键的内容概括起来就是通过处理使被调试者将自身异常首先发送给调试器。</p>\n<p>程序在正常运行与调试运行时有不同的分支代码，借助SEH实现的反调试技术非常多，这为代码调试带来诸多不便。Ollydbg调试器提供了调试选项。调试中的程序发生异常时，调试器不会暂停，会自动将异常派送给被调试者（看上去与正常运行一样）。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/lydbg%E5%BC%82%E5%B8%B8%E9%80%89%E9%A1%B9%E5%8D%A1.png\" alt=\"Ollydbg异常选项卡\"></p>\n<h2 id=\"忽略kernel32中发生的内存非法访问异常\"><a href=\"#忽略kernel32中发生的内存非法访问异常\" class=\"headerlink\" title=\"忽略kernel32中发生的内存非法访问异常\"></a>忽略kernel32中发生的内存非法访问异常</h2><p>选中Ignore memory access violations in kernel32选项后，kernel32.dll模块中发生的内存非法访问异常都会被忽略。</p>\n<h2 id=\"向被调试者派送异常\"><a href=\"#向被调试者派送异常\" class=\"headerlink\" title=\"向被调试者派送异常\"></a>向被调试者派送异常</h2><p>Ignore(pass to program)following exceptions选项下存在多个异常复选框，前5个已经介绍过，选中后发生相应异常Ollydbg就会忽略该异常，并将其派送给被调试者。</p>\n<p>第六个异常，FPU（Floating Point Unit，浮点运算单元）是专门用于浮点数运算的处理器，选中后，处理FPU指令过程中发生异常时，调试器会无条件将异常派送给被调试者处理。</p>\n<p>![Ignore(pass to program)following exceptions选项](.&#x2F;SEH详细说明&#x2F;Ignore(pass to program)following exceptions选项.png)</p>\n","text":"SEH是Windows操作系统提供的异常处理机制，在程序源代码中使用__try、__except、__finally关键字来具体实现。 初识SEH下面将通过一个...","permalink":"/post/SEH","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"Windows异常处理机制","slug":"Windows异常处理机制","count":2,"path":"api/tags/Windows异常处理机制.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9D%E8%AF%86SEH\"><span class=\"toc-text\">初识SEH</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#OS%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95\"><span class=\"toc-text\">OS的异常处理办法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%B8%B8%E8%BF%90%E8%A1%8C%E6%97%B6%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">正常运行时的异常处理方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95%E8%BF%90%E8%A1%8C%E6%97%B6%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">调试运行时的异常处理方法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">异常</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E7%A7%8D%E4%BB%A3%E8%A1%A8%E6%80%A7%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">5种代表性异常</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EXCEPTION-ACCESS-VIOLATION-0xC0000005\"><span class=\"toc-text\">EXCEPTION_ACCESS_VIOLATION(0xC0000005)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EXCEPTION-BREAKPOINT-0x80000003\"><span class=\"toc-text\">EXCEPTION_BREAKPOINT(0x80000003)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EXCEPTION-ILLEGAL-INSTRUCTION-0xC000001D\"><span class=\"toc-text\">EXCEPTION_ILLEGAL_INSTRUCTION(0xC000001D)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EXCEPTION-INTEGER-DIVIDE-BY-ZERO-0xC0000094\"><span class=\"toc-text\">EXCEPTION_INTEGER_DIVIDE_BY_ZERO(0xC0000094)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EXCEPTION-SINGLE-STEP-0x80000004\"><span class=\"toc-text\">EXCEPTION_SINGLE_STEP(0x80000004)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SEH%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">SEH详细说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SEH%E9%93%BE\"><span class=\"toc-text\">SEH链</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">异常处理函数的定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">函数定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9AEXCEPTION-RECORD%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">第一个参数：EXCEPTION_RECORD结构体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9ACONTEXT%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">第三个参数：CONTEXT结构体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E5%87%BD%E6%95%B0%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">异常函数处理流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">异常函数的返回值</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SEH%E9%93%BE%E7%9A%84%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">SEH链的访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SEH%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">SEH安装方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EWindows10%E7%9A%84%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">基于Windows10的练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85SEH\"><span class=\"toc-text\">1.安装SEH</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%9F%A5%E7%9C%8BSEH%E9%93%BE\"><span class=\"toc-text\">2.查看SEH链</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%B7%BB%E5%8A%A0SEH\"><span class=\"toc-text\">3.添加SEH</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%8F%91%E7%94%9F%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">4.发生异常</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%9F%A5%E7%9C%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">5.查看异常处理器参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%88%E4%B8%AD%E5%AD%98%E5%82%A8%E7%9A%84%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">栈中存储的参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">第一个参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">第二个参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">第三个参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E4%B8%AA%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">第四个参数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E8%B0%83%E8%AF%95%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">6.调试异常处理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E5%88%A0%E9%99%A4SEH\"><span class=\"toc-text\">7.删除SEH</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AEOllyDbg%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">设置OllyDbg选项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%BD%E7%95%A5kernel32%E4%B8%AD%E5%8F%91%E7%94%9F%E7%9A%84%E5%86%85%E5%AD%98%E9%9D%9E%E6%B3%95%E8%AE%BF%E9%97%AE%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">忽略kernel32中发生的内存非法访问异常</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%91%E8%A2%AB%E8%B0%83%E8%AF%95%E8%80%85%E6%B4%BE%E9%80%81%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">向被调试者派送异常</span></a></li></ol></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"编译器扩展的SEH","uid":"aa231c03641d31bfb6874bcdc873cd1e","slug":"编译器扩展的SEH","date":"2022-04-25T13:28:03.000Z","updated":"2025-06-08T15:42:15.590Z","comments":true,"path":"api/articles/编译器扩展的SEH.json","keywords":null,"cover":[],"text":"注：vc6++的异常处理函数为except_handler3，visual stdio的异常处理函数为except_handler4（具体见基于Visual S...","permalink":"/post/编译器扩展的SEH","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[],"tags":[{"name":"Windows异常处理机制","slug":"Windows异常处理机制","count":2,"path":"api/tags/Windows异常处理机制.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"TLS回调函数","uid":"66da80b7dfd28e13d279b8154dbcb5eb","slug":"TLS回调函数","date":"2022-04-15T07:23:02.000Z","updated":"2025-06-08T15:26:19.727Z","comments":true,"path":"api/articles/TLS回调函数.json","keywords":null,"cover":[],"text":"TLS回调函数TLS（Thread Local Storage，线程局部存储）回调函数常用于反调试 TLSTLS是各线程的独立的数据存储空间。使用TLS技术可在...","permalink":"/post/TLS回调函数","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":7,"path":"api/tags/逆向.json"},{"name":"TLS回调函数","slug":"TLS回调函数","count":1,"path":"api/tags/TLS回调函数.json"},{"name":"PE结构","slug":"PE结构","count":1,"path":"api/tags/PE结构.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}