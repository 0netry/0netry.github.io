{"title":"某白加黑木马样本分析","uid":"d8609f7faf5edcbbc1a1648becebe73e","slug":"某白加黑木马样本分析","date":"2025-05-28T05:39:13.000Z","updated":"2025-06-05T12:27:57.863Z","comments":true,"path":"api/articles/某白加黑木马样本分析.json","keywords":null,"cover":[],"content":"<h1 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h1><h2 id=\"样本基本信息（4个文件）\"><a href=\"#样本基本信息（4个文件）\" class=\"headerlink\" title=\"样本基本信息（4个文件）\"></a>样本基本信息（4个文件）</h2><p><strong>样本名称：</strong>a5c0Lm.exe、ClassicExplorer32.dll、ffff.pol、ffff.lop</p>\n<p><strong>MD5</strong>：ae105528a6c5758ccf18705a8c208a97、7166253c768c66f0c3f75f4490d7dca8、9a726d190f558dfdefea623e521dedeb、55cf7b579e38d963f0534f4e03e35a08</p>\n<h2 id=\"主要行为\"><a href=\"#主要行为\" class=\"headerlink\" title=\"主要行为\"></a>主要行为</h2><p>a5c0Lm.exe拥有Ivaylo Beltchev白签名，程序运行后，会加载同目录下的ClassicExplorer32.dll，调用其导出函数ShowExplorerSettings向当前进程注入shellcode，然后读取同目录下的ffff.pol并解密出 dll程序，该dll程序首先会备份4个文件，利用com组件接口设置计划任务以进行持久性操作，然后继续读取同目录下的ffff.lop并解密出 dll程序并调用其导出函数Edge，进行删除原始文件、查询杀毒&#x2F;调试软件是否存在并关闭、打印运行信息、从47.242.80.168下载新payload并执行命令、记录用户键盘操作并发送给攻击者、发送请求获取新的c2服务器地址、设置注册表实现开机自启动、安装名为Sauron的服务以实现持久化操作等。</p>\n<h1 id=\"二、样本行为分析\"><a href=\"#二、样本行为分析\" class=\"headerlink\" title=\"二、样本行为分析\"></a>二、样本行为分析</h1><h2 id=\"a5c0Lm-exe\"><a href=\"#a5c0Lm-exe\" class=\"headerlink\" title=\"a5c0Lm.exe\"></a>a5c0Lm.exe</h2><p>该样本主要功能是获取用户名，并创建名称为用户名的互斥体，然后加载同目录下的<strong>ClassicExplorer32.dll</strong>，并调用其导出函数ShowExplorerSettings进行相关操作</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133450870.png\" alt=\"image-20250605133450870\"></p>\n<h2 id=\"ClassicExplorer32-dll\"><a href=\"#ClassicExplorer32-dll\" class=\"headerlink\" title=\"ClassicExplorer32.dll\"></a>ClassicExplorer32.dll</h2><h3 id=\"向当前进程注入shellcode\"><a href=\"#向当前进程注入shellcode\" class=\"headerlink\" title=\"向当前进程注入shellcode\"></a>向当前进程注入shellcode</h3><p>该样本导出函数ShowExplorerSettings开始执行后，首先会向当前进程注入shellcode，然后通过CreateRemoteThread创建远程线程执行注入的shellcode</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133516023.png\" alt=\"image-20250605133516023\"></p>\n<h3 id=\"执行shellcode\"><a href=\"#执行shellcode\" class=\"headerlink\" title=\"执行shellcode\"></a>执行shellcode</h3><p>shellcode首先通过函数名和函数hash获取指定函数</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133538386.png\" alt=\"image-20250605133538386\"></p>\n<p>然后加载ffff.pol文件进内存，并通过异或等方式解密pe文件头</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133609638.png\" alt=\"image-20250605133609638\"></p>\n<p>接着依次复制头数据和节表数据、重定位pe文件、构建导入表等，然后执行载入内存中的PE文件（解密后的ffff.pol），调用其入口函数</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133626975.png\" alt=\"image-20250605133626975\"></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133633311.png\" alt=\"image-20250605133633311\"></p>\n<h2 id=\"ffff-pol\"><a href=\"#ffff-pol\" class=\"headerlink\" title=\"ffff.pol\"></a>ffff.pol</h2><h3 id=\"入口函数\"><a href=\"#入口函数\" class=\"headerlink\" title=\"入口函数\"></a>入口函数</h3><p>入口函数主要是调用DllMain函数</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133646387.png\" alt=\"image-20250605133646387\"></p>\n<h3 id=\"DllMain函数\"><a href=\"#DllMain函数\" class=\"headerlink\" title=\"DllMain函数\"></a>DllMain函数</h3><p>函数开始会查询并创建互斥体{A30BD1B1-CB43-4604-86F5-56594AEE26A3}以防止进程多开，接着解析命令行参数，然后创建新线程，并将参数传递给线程函数</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133700664.png\" alt=\"image-20250605133700664\"></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133706471.png\" alt=\"image-20250605133706471\"></p>\n<h3 id=\"新线程\"><a href=\"#新线程\" class=\"headerlink\" title=\"新线程\"></a>新线程</h3><p>在新线程函数中，首先会检查当前登录用户是否具有管理员权限，若是，则设置注册表项降低UAC提示强度，并创建子线程检测是否存在调试软件&#x2F;杀毒软件</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133719934.png\" alt=\"image-20250605133719934\"></p>\n<p>然后依次读取当前进程所在文件夹下的a5c0Lm.ex、ClassicExplorer32.dll、ffff.pol、ffff.lop进内存</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133733556.png\" alt=\"image-20250605133733556\"></p>\n<p>然后设置死循环，不断备份已读入内存的4个文件，然后利用com组件接口设置计划任务保证样本一直在运行，以进行持久性操作</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133746318.png\" alt=\"image-20250605133746318\"></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133751669.png\" alt=\"image-20250605133751669\"></p>\n<p>生成随机字符串</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133802996.png\" alt=\"image-20250605133802996\"></p>\n<p>复制文件</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133813589.png\" alt=\"image-20250605133813589\"></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133820613.png\" alt=\"image-20250605133820613\"></p>\n<p>创建计划任务</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133834113.png\" alt=\"image-20250605133834113\"></p>\n<h3 id=\"加载ffff-lop并执行\"><a href=\"#加载ffff-lop并执行\" class=\"headerlink\" title=\"加载ffff.lop并执行\"></a>加载ffff.lop并执行</h3><p>创建完新线程后，继续读取同目录下的ffff.lop进内存，然后对其进行解密还原成pe文件</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133847350.png\" alt=\"image-20250605133847350\"></p>\n<p>然后申请出一块空间用于存储该文件加载到内存后展开的数据，依次进行拷贝文件头数据、复制节表数据、进行重定位、构建导入表、设置内存保护属性等操作</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133859904.png\" alt=\"image-20250605133859904\"></p>\n<p>PE文件加载完成后，会调用其入口函数，若入口函数返回true，则查找并调用其导出函数Edge</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133910864.png\" alt=\"image-20250605133910864\"></p>\n<h2 id=\"ffff-lop\"><a href=\"#ffff-lop\" class=\"headerlink\" title=\"ffff.lop\"></a>ffff.lop</h2><h3 id=\"入口函数-1\"><a href=\"#入口函数-1\" class=\"headerlink\" title=\"入口函数\"></a>入口函数</h3><p>入口函数主要是调用DllMain函数返回1，此时其导出函数Edge将会被执行</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133924698.png\" alt=\"image-20250605133924698\"></p>\n<h3 id=\"导出函数Edge\"><a href=\"#导出函数Edge\" class=\"headerlink\" title=\"导出函数Edge\"></a>导出函数Edge</h3><p>入口函数返回1后，其导出函数Edge就会被执行，其主要功能如下：</p>\n<p>首先对原文件进行删除和修改文件属性等</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133936716.png\" alt=\"image-20250605133936716\"></p>\n<p>然后创建多个线程，查询杀毒&#x2F;调试软件是否存在并关闭、打印运行信息、执行命令、从47.242.80.168下载新payload并执行命令等</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133949966.png\" alt=\"image-20250605133949966\"></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605133955011.png\" alt=\"image-20250605133955011\"></p>\n<p>记录用户键盘操作和输入桌面内容并保存至文件，随后发送给攻击者</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605134007204.png\" alt=\"image-20250605134007204\"></p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605134012878.png\" alt=\"image-20250605134012878\"></p>\n<p>发送请求获取新的c2服务器地址</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605134025297.png\" alt=\"image-20250605134025297\"></p>\n<p>设置注册表实现开机自启动</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605134143828.png\" alt=\"image-20250605134143828\"></p>\n<p>安装名为Sauron的服务以实现持久化操作</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/ge-20250605134155551.png\" alt=\"image-20250605134155551\"></p>\n<h1 id=\"三、结论\"><a href=\"#三、结论\" class=\"headerlink\" title=\"三、结论\"></a>三、结论</h1><p>该样本为恶意程序逃逸对抗模块、恶意程序下载模块与键盘记录器模块，样本拥有Ivaylo Beltchev白签名躲避查杀，程序运行后，会依次加载并执行同目录下的dll文件，利用com组件接口设置计划任务保证样本一直处于运行状态，删除原始文件、查询杀毒&#x2F;调试软件是否存在并关闭、打印运行信息、从47.242.80.168下载新payload并执行命令、记录用户键盘操作并发送给攻击者、发送请求获取新的C2服务器地址、设置注册表实现开机自启动、安装名为Sauron的服务以实现持久化操作等。</p>\n","feature":true,"text":"一、概述样本基本信息（4个文件）样本名称：a5c0Lm.exe、ClassicExplorer32.dll、ffff.pol、ffff.lop MD5：ae10...","permalink":"/post/某白加黑木马样本分析","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"恶意样本","slug":"恶意样本","count":2,"path":"api/tags/恶意样本.json"},{"name":"白加黑技术","slug":"白加黑技术","count":1,"path":"api/tags/白加黑技术.json"},{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">一、概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E6%9C%AC%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%EF%BC%884%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%89\"><span class=\"toc-text\">样本基本信息（4个文件）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E8%A6%81%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">主要行为</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%A0%B7%E6%9C%AC%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90\"><span class=\"toc-text\">二、样本行为分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#a5c0Lm-exe\"><span class=\"toc-text\">a5c0Lm.exe</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ClassicExplorer32-dll\"><span class=\"toc-text\">ClassicExplorer32.dll</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%91%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5shellcode\"><span class=\"toc-text\">向当前进程注入shellcode</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8Cshellcode\"><span class=\"toc-text\">执行shellcode</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ffff-pol\"><span class=\"toc-text\">ffff.pol</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">入口函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DllMain%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">DllMain函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B0%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">新线程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BDffff-lop%E5%B9%B6%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">加载ffff.lop并执行</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ffff-lop\"><span class=\"toc-text\">ffff.lop</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0-1\"><span class=\"toc-text\">入口函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%87%BA%E5%87%BD%E6%95%B0Edge\"><span class=\"toc-text\">导出函数Edge</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">三、结论</span></a></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Windows动态反调试技术（二）","uid":"bd414604d17df76b597f4081d3f02f14","slug":"Windows动态反调试技术（二）","date":"2025-06-11T13:05:26.000Z","updated":"2025-06-09T21:26:58.273Z","comments":true,"path":"api/articles/Windows动态反调试技术（二）.json","keywords":null,"cover":[],"text":"单步执行TF值设置为1时，CPU将进入单步执行（Single Step）模式。单步执行模式中，CPU执行1条指令后即触发1个EXCEPTION_SINGLE_S...","permalink":"/post/Windows动态反调试技术（二）","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":14,"path":"api/tags/逆向.json"},{"name":"Windows动态反调试技术","slug":"Windows动态反调试技术","count":2,"path":"api/tags/Windows动态反调试技术.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Ubuntu安装peda、pwndbg、gef","uid":"cbeedf2045c391671dd49388aa7a121e","slug":"Ubuntu安装peda、pwndbg、gef","date":"2024-03-09T13:01:38.000Z","updated":"2025-06-09T13:10:48.873Z","comments":true,"path":"api/articles/Ubuntu安装peda、pwndbg、gef.json","keywords":null,"cover":[],"text":"pedaPEDA（Python Exploit Development Assistance for GDB）是一个强大的GDB插件。它提供了更多功能，如高亮显...","permalink":"/post/Ubuntu安装peda、pwndbg、gef","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"linux逆向工具","slug":"linux逆向工具","count":1,"path":"api/tags/linux逆向工具.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}