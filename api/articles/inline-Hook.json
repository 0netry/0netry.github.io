{"title":"inline Hook","uid":"ef0903e74e5233a2be57edee3f37a5dc","slug":"inline-Hook","date":"2022-03-24T09:39:13.000Z","updated":"2025-06-04T08:36:57.256Z","comments":true,"path":"api/articles/inline-Hook.json","keywords":null,"cover":null,"content":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>程序在编译链接后成了二进制代码，我们可以找到需要Hook的函数的地址，然后把这个函数在内存中的二进制代码改为一个JMP指令，令其跳转到执行我们自己构造的函数。</p>\n<p>貌似有点难以理解，来看看详细的原理解释：</p>\n<p>函数一般都存在于DLL中，当DLL中某个函数被调用后，其所在的DLL将会被映射到进程地址空间中。我们可以通过DLL这个模块找到我们需要Hook的函数的地址。然后在内存中改变其地址，使跳转到我们制定的位置。比如现在需要Hook 函数CreateFile，这个函数存在于Kernel32.DLL文件中。首先我们必须要知道这个函数在进程中的地址，然后修改这个函数的首地址为JMP MyProc指令。而MyProc函数可以是API函数，也可以是我们自己构造的函数，如果是我们自己构造的函数，那么我们有两种方法把我们的函数注入进目标进程，那就是通过远程线程注入的两种方法。</p>\n<p>IAT钩取通过操作进程的特定IAT值来实现API钩，而inline hook则将API代码的前5个字节修改为JMP XXXXXXXX指令来钩取API。调用执行被钩取的API时，（修改后的）JMP指令就会被执行，转而控制hooking函数。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>顾名思义，API代码修改就是指直接修改映射到目标进程内存空间的系统DLL的代码。</p></blockquote>\n<h1 id=\"进程隐藏\"><a href=\"#进程隐藏\" class=\"headerlink\" title=\"进程隐藏\"></a>进程隐藏</h1><p>进程隐藏的相关内容信息已经得到大量公开，其中用户模式下最常用的就是ntdll.ZwQuerySystemInformation() API钩取技术。</p>\n<h2 id=\"进程隐藏工作原理\"><a href=\"#进程隐藏工作原理\" class=\"headerlink\" title=\"进程隐藏工作原理\"></a>进程隐藏工作原理</h2><p>为了隐藏某个特定进程，要潜入其他所有进程内存，钩取相关API。也就是说，实现进程隐藏的关键不是进程自身，而是其他进程。</p>\n<h2 id=\"相关API\"><a href=\"#相关API\" class=\"headerlink\" title=\"相关API\"></a>相关API</h2><p>由于进程是内核对象，所以（用户模式下的程序）只要通过相关API就能检测到它们。用户模式下检测进程的相关API通常分为如下两类：</p>\n<p>1.CreateToolhelp32Snapshot()&amp;EnumProcesses()</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HANDLE WINAPI <span class=\"title function_\">CreateToolhelp32Snapshot</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    DWORD dwFlags,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD th32ProcessID</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br><span class=\"line\">                                                           <span class=\"comment\">//tlhelp32.h</span></span><br><span class=\"line\">                                                           </span><br><span class=\"line\">BOOL WINAPI <span class=\"title function_\">EnumProcesses</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    _Out_writes_bytes_(cb) DWORD* lpidProcess,</span></span><br><span class=\"line\"><span class=\"params\">    _In_ DWORD cb,</span></span><br><span class=\"line\"><span class=\"params\">    _Out_ LPDWORD lpcbNeeded</span></span><br><span class=\"line\"><span class=\"params\">)</span>;                                                        </span><br><span class=\"line\">                                                          <span class=\"comment\">//psapi.h</span></span><br></pre></td></tr></table></figure>\n\n<p>上面两个API均在其内部调用了ntdll.ZwQuerySystemInformation() API</p>\n<p>2.ZwQuerySystemInformation() </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NTSTATUS WINAPI ZwQuerySystemInformation(</span><br><span class=\"line\">  _In_      SYSTEM_INFORMATION_CLASS SystemInformationClass,</span><br><span class=\"line\">  _Inout_   PVOID                    SystemInformation,</span><br><span class=\"line\">  _In_      ULONG                    SystemInformationLength,</span><br><span class=\"line\">  _Out_opt_ PULONG                   ReturnLength</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>借助ZwQuerySystemInformation() API可以获取运行中的所有进程信息（结构体），形成一个链表。操作该链表（从链表中删除）即可隐藏相关进程。所以在用户模式下不需要分别钩取CreateToolhelp32Snapshot()与EnumProcesses()，只需要钩取ZwQuerySystemInformation()  API就可隐藏指定进程。注意，我们要钩取的目标进程不是要隐藏的进程，而是其他进程。假如要隐藏的进程为test.exe，如果钩取正在运行中的ProcExp.exe（进程查看器或taskmgr.exe任务管理器）进程的ZwQuerySystemInformation() API，那么ProcExp.exe（或taskmgr.exe）就无法查找到test.exe。</p>\n<h1 id=\"基于Win10的隐藏notepad-exe练习\"><a href=\"#基于Win10的隐藏notepad-exe练习\" class=\"headerlink\" title=\"基于Win10的隐藏notepad.exe练习\"></a>基于Win10的隐藏notepad.exe练习</h1><p>HideProc.exe负责将stealth.dll文件注入所有运行中的进程。stealth.dll负责钩取（注入stealth.dll文件的）进程的ntdll.ZwQuerySystemInformation() API</p>\n<p>1.首先运行notepad.exe（要隐藏的进程）、procexp.exe（钩取对象1）、taskmgr.exe（钩取对象2）</p>\n<h2 id=\"HideProc-cpp源码分析\"><a href=\"#HideProc-cpp源码分析\" class=\"headerlink\" title=\"HideProc.cpp源码分析\"></a>HideProc.cpp源码分析</h2><p>HideProc.exe负责向运行中的所有进程注入&#x2F;卸载指定的DLL文件。</p>\n<p>Windows Vista&#x2F;7中使用了会话隔离技术，这可能导致DLL注入失败。出现这个问题，不要使用kernel32.CreateRemoteThread()，而使用ntdll.NtCreateThreadEx()就可以了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;windows.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tlhelp32.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tchar.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">void</span> <span class=\"params\">(*PFN_SetProcName)</span><span class=\"params\">(LPCTSTR szProcName)</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span>INJECTION_MODE = <span class=\"number\">0</span>, EJECTION_MODE&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">SetPrivilege</span><span class=\"params\">(LPCTSTR lpszPrivilege, BOOL bEnablePrivilege)</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    TOKEN_PRIVILEGES tp;</span><br><span class=\"line\">    HANDLE hToken;</span><br><span class=\"line\">    LUID luid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( !OpenProcessToken(GetCurrentProcess(),</span><br><span class=\"line\">                          TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, </span><br><span class=\"line\">\t\t\t              &amp;hToken) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;OpenProcessToken error: %u\\n&quot;</span>, GetLastError());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( !LookupPrivilegeValue(<span class=\"literal\">NULL</span>,            <span class=\"comment\">// lookup privilege on local system</span></span><br><span class=\"line\">                              lpszPrivilege,   <span class=\"comment\">// privilege to lookup </span></span><br><span class=\"line\">                              &amp;luid) )        <span class=\"comment\">// receives LUID of privilege</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;LookupPrivilegeValue error: %u\\n&quot;</span>, GetLastError() ); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tp.PrivilegeCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">    tp.Privileges[<span class=\"number\">0</span>].Luid = luid;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( bEnablePrivilege )</span><br><span class=\"line\">        tp.Privileges[<span class=\"number\">0</span>].Attributes = SE_PRIVILEGE_ENABLED;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        tp.Privileges[<span class=\"number\">0</span>].Attributes = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Enable the privilege or disable all privileges.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( !AdjustTokenPrivileges(hToken, </span><br><span class=\"line\">                               FALSE, </span><br><span class=\"line\">                               &amp;tp, </span><br><span class=\"line\">                               <span class=\"keyword\">sizeof</span>(TOKEN_PRIVILEGES), </span><br><span class=\"line\">                               (PTOKEN_PRIVILEGES) <span class=\"literal\">NULL</span>, </span><br><span class=\"line\">                               (PDWORD) <span class=\"literal\">NULL</span>) )</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;AdjustTokenPrivileges error: %u\\n&quot;</span>, GetLastError() ); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( GetLastError() == ERROR_NOT_ALL_ASSIGNED )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The token does not have the specified privilege. \\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">InjectDll</span><span class=\"params\">(DWORD dwPID, LPCTSTR szDllPath)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHANDLE                  hProcess, hThread;</span><br><span class=\"line\">\tLPVOID                  pRemoteBuf;</span><br><span class=\"line\">\tDWORD                   dwBufSize = (DWORD)(_tcslen(szDllPath) + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(TCHAR);</span><br><span class=\"line\">\tLPTHREAD_START_ROUTINE  pThreadProc;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( !(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;OpenProcess(%d) failed!!!\\n&quot;</span>, dwPID);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpRemoteBuf = VirtualAllocEx(hProcess, <span class=\"literal\">NULL</span>, dwBufSize, </span><br><span class=\"line\">                                MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\"></span><br><span class=\"line\">\tWriteProcessMemory(hProcess, pRemoteBuf, </span><br><span class=\"line\">                       (LPVOID)szDllPath, dwBufSize, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpThreadProc = (LPTHREAD_START_ROUTINE)</span><br><span class=\"line\">                  GetProcAddress(GetModuleHandle(<span class=\"string\">L&quot;kernel32.dll&quot;</span>), </span><br><span class=\"line\">                                 <span class=\"string\">&quot;LoadLibraryW&quot;</span>);</span><br><span class=\"line\">\thThread = CreateRemoteThread(hProcess, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, </span><br><span class=\"line\">                                 pThreadProc, pRemoteBuf, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tWaitForSingleObject(hThread, INFINITE);\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tVirtualFreeEx(hProcess, pRemoteBuf, <span class=\"number\">0</span>, MEM_RELEASE);</span><br><span class=\"line\"></span><br><span class=\"line\">\tCloseHandle(hThread);</span><br><span class=\"line\">\tCloseHandle(hProcess);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">EjectDll</span><span class=\"params\">(DWORD dwPID, LPCTSTR szDllPath)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tBOOL                    bMore = FALSE, bFound = FALSE;</span><br><span class=\"line\">\tHANDLE                  hSnapshot, hProcess, hThread;</span><br><span class=\"line\">\tMODULEENTRY32           me = &#123; <span class=\"keyword\">sizeof</span>(me) &#125;;</span><br><span class=\"line\">\tLPTHREAD_START_ROUTINE  pThreadProc;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( INVALID_HANDLE_VALUE == </span><br><span class=\"line\">        (hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, dwPID)) )</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbMore = Module32First(hSnapshot, &amp;me);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>( ; bMore ; bMore = Module32Next(hSnapshot, &amp;me) )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( !_tcsicmp(me.szModule, szDllPath) || </span><br><span class=\"line\">            !_tcsicmp(me.szExePath, szDllPath) )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tbFound = TRUE;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( !bFound )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tCloseHandle(hSnapshot);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( !(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)) )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tCloseHandle(hSnapshot);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpThreadProc = (LPTHREAD_START_ROUTINE)</span><br><span class=\"line\">                  GetProcAddress(GetModuleHandle(<span class=\"string\">L&quot;kernel32.dll&quot;</span>), </span><br><span class=\"line\">                                 <span class=\"string\">&quot;FreeLibrary&quot;</span>);</span><br><span class=\"line\">\thThread = CreateRemoteThread(hProcess, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>, </span><br><span class=\"line\">                                 pThreadProc, me.modBaseAddr, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tWaitForSingleObject(hThread, INFINITE);\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tCloseHandle(hThread);</span><br><span class=\"line\">\tCloseHandle(hProcess);</span><br><span class=\"line\">\tCloseHandle(hSnapshot);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">InjectAllProcess</span><span class=\"params\">(<span class=\"type\">int</span> nMode, LPCTSTR szDllPath)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDWORD                   dwPID = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tHANDLE                  hSnapShot = INVALID_HANDLE_VALUE;</span><br><span class=\"line\">\tPROCESSENTRY32          pe;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取系统快照</span></span><br><span class=\"line\">\tpe.dwSize = <span class=\"keyword\">sizeof</span>( PROCESSENTRY32 );</span><br><span class=\"line\">\thSnapShot = CreateToolhelp32Snapshot( TH32CS_SNAPALL, <span class=\"literal\">NULL</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//查找进程</span></span><br><span class=\"line\">\tProcess32First(hSnapShot, &amp;pe);</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdwPID = pe.th32ProcessID;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//鉴于系统安全性的考虑</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//对于PID小于100的系统进程不执行DLL注入操作</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( dwPID &lt; <span class=\"number\">100</span> )</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( nMode == INJECTION_MODE )</span><br><span class=\"line\">\t\t    InjectDll(dwPID, szDllPath);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            EjectDll(dwPID, szDllPath);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>( Process32Next(hSnapShot, &amp;pe) );</span><br><span class=\"line\"></span><br><span class=\"line\">\tCloseHandle(hSnapShot);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, TCHAR* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>                     nMode = INJECTION_MODE;</span><br><span class=\"line\">    HMODULE                 hLib = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    PFN_SetProcName         SetProcName = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( argc != <span class=\"number\">4</span> )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n Usage  : HideProc.exe &lt;-hide|-show&gt; &quot;</span>\\</span><br><span class=\"line\">               <span class=\"string\">&quot;&lt;process name&gt; &lt;dll path&gt;\\n\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// change privilege</span></span><br><span class=\"line\">\t<span class=\"comment\">//只有先提升权限，才能准确获取所有进程的列表</span></span><br><span class=\"line\">\t<span class=\"comment\">//内部调用AdjustTokenPrivileges来提权</span></span><br><span class=\"line\">    SetPrivilege(SE_DEBUG_NAME, TRUE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// load library</span></span><br><span class=\"line\">    hLib = LoadLibrary(argv[<span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set process name to hide</span></span><br><span class=\"line\">    SetProcName = (PFN_SetProcName)GetProcAddress(hLib, <span class=\"string\">&quot;SetProcName&quot;</span>);</span><br><span class=\"line\">    SetProcName(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Inject(Eject) Dll to all process</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( !_tcsicmp(argv[<span class=\"number\">1</span>], <span class=\"string\">L&quot;-show&quot;</span>) )</span><br><span class=\"line\">\t    nMode = EJECTION_MODE;</span><br><span class=\"line\"></span><br><span class=\"line\">    InjectAllProcess(nMode, argv[<span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// free library</span></span><br><span class=\"line\">    FreeLibrary(hLib);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先使用 SetPrivilege提升权限，以便获取系统所有进程列表</p>\n<p>接着调用InjectAllProcess，其内部使用CreateToolhelp32Snapshot获取系统中运行的所有进程列表，然后使用Process32First和Process32Next将获取的进程信息存放到PROCESSENTRY32结构体变量pe中，进而获取进程的PID，然后调用InjectDll来注入DLL</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tagPROCESSENTRY32W</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    DWORD   dwSize;</span><br><span class=\"line\">    DWORD   cntUsage;</span><br><span class=\"line\">    DWORD   th32ProcessID;          <span class=\"comment\">// this process</span></span><br><span class=\"line\">    ULONG_PTR th32DefaultHeapID;</span><br><span class=\"line\">    DWORD   th32ModuleID;           <span class=\"comment\">// associated exe</span></span><br><span class=\"line\">    DWORD   cntThreads;</span><br><span class=\"line\">    DWORD   th32ParentProcessID;    <span class=\"comment\">// this process&#x27;s parent process</span></span><br><span class=\"line\">    LONG    pcPriClassBase;         <span class=\"comment\">// Base priority of process&#x27;s threads</span></span><br><span class=\"line\">    DWORD   dwFlags;</span><br><span class=\"line\">    WCHAR   szExeFile[MAX_PATH];    <span class=\"comment\">// Path</span></span><br><span class=\"line\">&#125; PROCESSENTRY32W;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> PROCESSENTRY32W *  PPROCESSENTRY32W;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> PROCESSENTRY32W *  LPPROCESSENTRY32W;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">HANDLE WINAPI <span class=\"title function_\">CreateToolhelp32Snapshot</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    DWORD dwFlags,</span></span><br><span class=\"line\"><span class=\"params\">    DWORD th32ProcessID</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL WINAPI <span class=\"title function_\">Process32FirstW</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE hSnapshot,</span></span><br><span class=\"line\"><span class=\"params\">    LPPROCESSENTRY32W lppe</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL WINAPI <span class=\"title function_\">Process32NextW</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    HANDLE hSnapshot,</span></span><br><span class=\"line\"><span class=\"params\">    LPPROCESSENTRY32W lppe</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"stealth-cpp源码分析\"><a href=\"#stealth-cpp源码分析\" class=\"headerlink\" title=\"stealth.cpp源码分析\"></a>stealth.cpp源码分析</h2><p>实际的API钩取操作由stealth.dll文件复制</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;windows.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tchar.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STATUS_SUCCESS\t\t\t\t\t\t(0x00000000L) </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> LONG NTSTATUS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">enum</span> _<span class=\"title\">SYSTEM_INFORMATION_CLASS</span> &#123;</span></span><br><span class=\"line\">    SystemBasicInformation = <span class=\"number\">0</span>,</span><br><span class=\"line\">    SystemPerformanceInformation = <span class=\"number\">2</span>,</span><br><span class=\"line\">    SystemTimeOfDayInformation = <span class=\"number\">3</span>,</span><br><span class=\"line\">    SystemProcessInformation = <span class=\"number\">5</span>,</span><br><span class=\"line\">    SystemProcessorPerformanceInformation = <span class=\"number\">8</span>,</span><br><span class=\"line\">    SystemInterruptInformation = <span class=\"number\">23</span>,</span><br><span class=\"line\">    SystemExceptionInformation = <span class=\"number\">33</span>,</span><br><span class=\"line\">    SystemRegistryQuotaInformation = <span class=\"number\">37</span>,</span><br><span class=\"line\">    SystemLookasideInformation = <span class=\"number\">45</span></span><br><span class=\"line\">&#125; SYSTEM_INFORMATION_CLASS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">SYSTEM_PROCESS_INFORMATION</span> &#123;</span></span><br><span class=\"line\">    ULONG NextEntryOffset;</span><br><span class=\"line\">    ULONG NumberOfThreads;</span><br><span class=\"line\">    BYTE Reserved1[<span class=\"number\">48</span>];</span><br><span class=\"line\">    PVOID Reserved2[<span class=\"number\">3</span>];</span><br><span class=\"line\">    HANDLE UniqueProcessId;</span><br><span class=\"line\">    PVOID Reserved3;</span><br><span class=\"line\">    ULONG HandleCount;</span><br><span class=\"line\">    BYTE Reserved4[<span class=\"number\">4</span>];</span><br><span class=\"line\">    PVOID Reserved5[<span class=\"number\">11</span>];</span><br><span class=\"line\">    SIZE_T PeakPagefileUsage;</span><br><span class=\"line\">    SIZE_T PrivatePageCount;</span><br><span class=\"line\">    LARGE_INTEGER Reserved6[<span class=\"number\">6</span>];</span><br><span class=\"line\">&#125; SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">NTSTATUS</span> <span class=\"params\">(WINAPI *PFZWQUERYSYSTEMINFORMATION)</span></span><br><span class=\"line\">                 <span class=\"params\">(SYSTEM_INFORMATION_CLASS SystemInformationClass, </span></span><br><span class=\"line\"><span class=\"params\">                  PVOID SystemInformation, </span></span><br><span class=\"line\"><span class=\"params\">                  ULONG SystemInformationLength, </span></span><br><span class=\"line\"><span class=\"params\">                  PULONG ReturnLength)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEF_NTDLL                       (<span class=\"string\">&quot;ntdll.dll&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEF_ZWQUERYSYSTEMINFORMATION    (<span class=\"string\">&quot;ZwQuerySystemInformation&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// global variable (in sharing memory)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(linker, <span class=\"string\">&quot;/SECTION:.SHARE,RWS&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> data_seg(<span class=\"string\">&quot;.SHARE&quot;</span>)</span></span><br><span class=\"line\">    TCHAR g_szProcName[MAX_PATH] = &#123;<span class=\"number\">0</span>,&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> data_seg()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// global variable</span></span><br><span class=\"line\">BYTE g_pOrgBytes[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0</span>,&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">hook_by_code</span><span class=\"params\">(LPCSTR szDllName, LPCSTR szFuncName, PROC pfnNew, PBYTE pOrgBytes)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FARPROC pfnOrg;</span><br><span class=\"line\">    DWORD dwOldProtect, dwAddress;</span><br><span class=\"line\">    BYTE pBuf[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0xE9</span>, <span class=\"number\">0</span>, &#125;;</span><br><span class=\"line\">    PBYTE pByte;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取要钩取的API地址</span></span><br><span class=\"line\">    pfnOrg = (FARPROC)GetProcAddress(GetModuleHandleA(szDllName), szFuncName);</span><br><span class=\"line\">    pByte = (PBYTE)pfnOrg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 若已经被钩取则return FALSE</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( pByte[<span class=\"number\">0</span>] == <span class=\"number\">0xE9</span> )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为了修改5个字节，先向内存添加写属性</span></span><br><span class=\"line\">    VirtualProtect((LPVOID)pfnOrg, <span class=\"number\">5</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//备份原有代码(5字节)</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(pOrgBytes, pfnOrg, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算JMP地址(E9 XXXXXXXX)</span></span><br><span class=\"line\">    <span class=\"comment\">// =&gt; XXXXXXXX = pfnNew - pfnOrg - 5</span></span><br><span class=\"line\">    dwAddress = (DWORD)pfnNew - (DWORD)pfnOrg - <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(&amp;pBuf[<span class=\"number\">1</span>], &amp;dwAddress, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Hook - 修改5个字节(JMP XXXXXXXX)</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(pfnOrg, pBuf, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//恢复内存属性</span></span><br><span class=\"line\">    VirtualProtect((LPVOID)pfnOrg, <span class=\"number\">5</span>, dwOldProtect, &amp;dwOldProtect);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">unhook_by_code</span><span class=\"params\">(LPCSTR szDllName, LPCSTR szFuncName, PBYTE pOrgBytes)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FARPROC pFunc;</span><br><span class=\"line\">    DWORD dwOldProtect;</span><br><span class=\"line\">    PBYTE pByte;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取API地址</span></span><br><span class=\"line\">    pFunc = GetProcAddress(GetModuleHandleA(szDllName), szFuncName);</span><br><span class=\"line\">    pByte = (PBYTE)pFunc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//若已经脱钩则return FALSE</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( pByte[<span class=\"number\">0</span>] != <span class=\"number\">0xE9</span> )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向内存添加写属性，为恢复原代码（5个字节）准备</span></span><br><span class=\"line\">    VirtualProtect((LPVOID)pFunc, <span class=\"number\">5</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Unhook</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(pFunc, pOrgBytes, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//恢复内存属性</span></span><br><span class=\"line\">    VirtualProtect((LPVOID)pFunc, <span class=\"number\">5</span>, dwOldProtect, &amp;dwOldProtect);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">NTSTATUS WINAPI <span class=\"title function_\">NewZwQuerySystemInformation</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">                SYSTEM_INFORMATION_CLASS SystemInformationClass, </span></span><br><span class=\"line\"><span class=\"params\">                PVOID SystemInformation, </span></span><br><span class=\"line\"><span class=\"params\">                ULONG SystemInformationLength, </span></span><br><span class=\"line\"><span class=\"params\">                PULONG ReturnLength)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    FARPROC pFunc;</span><br><span class=\"line\">    PSYSTEM_PROCESS_INFORMATION pCur, pPrev;</span><br><span class=\"line\">    <span class=\"type\">char</span> szProcName[MAX_PATH] = &#123;<span class=\"number\">0</span>,&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//开始前先脱钩</span></span><br><span class=\"line\">    unhook_by_code(DEF_NTDLL, DEF_ZWQUERYSYSTEMINFORMATION, g_pOrgBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调用原始API</span></span><br><span class=\"line\">    pFunc = GetProcAddress(GetModuleHandleA(DEF_NTDLL), </span><br><span class=\"line\">                           DEF_ZWQUERYSYSTEMINFORMATION);</span><br><span class=\"line\">    status = ((PFZWQUERYSYSTEMINFORMATION)pFunc)</span><br><span class=\"line\">              (SystemInformationClass, SystemInformation, </span><br><span class=\"line\">              SystemInformationLength, ReturnLength);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( status != STATUS_SUCCESS )</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> __NTQUERYSYSTEMINFORMATION_END;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//仅针对SystemProcessInformation类型操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( SystemInformationClass == SystemProcessInformation )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// SYSTEM_PROCESS_INFORMATION类型转换</span></span><br><span class=\"line\">        <span class=\"comment\">// pCur是单项链表的头</span></span><br><span class=\"line\">        pCur = (PSYSTEM_PROCESS_INFORMATION)SystemInformation;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(TRUE)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 比较进程名称</span></span><br><span class=\"line\">            <span class=\"comment\">// g_szProcName为要隐藏的进程名</span></span><br><span class=\"line\">            <span class=\"comment\">// (=&gt; 在SetProcName()中设置)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pCur-&gt;Reserved2[<span class=\"number\">1</span>] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!_tcsicmp((PWSTR)pCur-&gt;Reserved2[<span class=\"number\">1</span>], g_szProcName))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//从链表中删除隐藏进程的节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(pCur-&gt;NextEntryOffset == <span class=\"number\">0</span>)</span><br><span class=\"line\">                        pPrev-&gt;NextEntryOffset = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        pPrev-&gt;NextEntryOffset += pCur-&gt;NextEntryOffset;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>\t\t</span><br><span class=\"line\">                    pPrev = pCur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pCur-&gt;NextEntryOffset == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//链表的下一项</span></span><br><span class=\"line\">            pCur = (PSYSTEM_PROCESS_INFORMATION)</span><br><span class=\"line\">                    ((ULONG)pCur + pCur-&gt;NextEntryOffset);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">__NTQUERYSYSTEMINFORMATION_END:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//函数终止前，再次执行API钩取操作，为下次调用准备</span></span><br><span class=\"line\">    hook_by_code(DEF_NTDLL, DEF_ZWQUERYSYSTEMINFORMATION, </span><br><span class=\"line\">                 (PROC)NewZwQuerySystemInformation, g_pOrgBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL WINAPI <span class=\"title function_\">DllMain</span><span class=\"params\">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>            szCurProc[MAX_PATH] = &#123;<span class=\"number\">0</span>,&#125;;</span><br><span class=\"line\">    <span class=\"type\">char</span>            *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// #1. 异常处理</span></span><br><span class=\"line\">    <span class=\"comment\">// 若当前进程为HookProc.exe，则终止，不进行钩取操作</span></span><br><span class=\"line\">    GetModuleFileNameA(<span class=\"literal\">NULL</span>, szCurProc, MAX_PATH);</span><br><span class=\"line\">    p = <span class=\"built_in\">strrchr</span>(szCurProc, <span class=\"string\">&#x27;\\\\&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( (p != <span class=\"literal\">NULL</span>) &amp;&amp; !_stricmp(p+<span class=\"number\">1</span>, <span class=\"string\">&quot;HideProc.exe&quot;</span>) )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>( fdwReason )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// #2. API Hooking</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH : </span><br><span class=\"line\">        hook_by_code(DEF_NTDLL, DEF_ZWQUERYSYSTEMINFORMATION, </span><br><span class=\"line\">                     (PROC)NewZwQuerySystemInformation, g_pOrgBytes);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// #3. API Unhooking </span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> DLL_PROCESS_DETACH :</span><br><span class=\"line\">        unhook_by_code(DEF_NTDLL, DEF_ZWQUERYSYSTEMINFORMATION, </span><br><span class=\"line\">                       g_pOrgBytes);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">__declspec(dllexport) <span class=\"type\">void</span> <span class=\"title function_\">SetProcName</span><span class=\"params\">(LPCTSTR szProcName)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _tcscpy_s(g_szProcName, szProcName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SetProcName\"><a href=\"#SetProcName\" class=\"headerlink\" title=\"SetProcName()\"></a>SetProcName()</h3><p>首先看导出函数SetProcName()</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// global variable (in sharing memory)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(linker, <span class=\"string\">&quot;/SECTION:.SHARE,RWS&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> data_seg(<span class=\"string\">&quot;.SHARE&quot;</span>)</span></span><br><span class=\"line\">    TCHAR g_szProcName[MAX_PATH] = &#123;<span class=\"number\">0</span>,&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> data_seg()</span></span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//export function</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">__declspec(dllexport) <span class=\"type\">void</span> <span class=\"title function_\">SetProcName</span><span class=\"params\">(LPCTSTR szProcName)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _tcscpy_s(g_szProcName, szProcName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码先创建名为”.SHARE”的共享内存节区，然后创建g_szProcName缓冲区，最后再由导出函数SetProcName()将要隐藏的进程名称保存到g_szProcName中（SetProcName函数在HideProc.exe中被调用执行）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在共享内存节区创建g_szProcName缓冲区的好处在于，stealth.dll被注入所有进程时，可以彼此共享隐藏进程的名称（随着程序不断改进，甚至也可以做到动态修改隐藏进程）</p></blockquote>\n<h3 id=\"DllMain\"><a href=\"#DllMain\" class=\"headerlink\" title=\"DllMain()\"></a>DllMain()</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL WINAPI <span class=\"title function_\">DllMain</span><span class=\"params\">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>            szCurProc[MAX_PATH] = &#123;<span class=\"number\">0</span>,&#125;;</span><br><span class=\"line\">    <span class=\"type\">char</span>            *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// #1. 异常处理</span></span><br><span class=\"line\">    <span class=\"comment\">// 若当前进程为HookProc.exe，则终止，不进行钩取操作</span></span><br><span class=\"line\">    GetModuleFileNameA(<span class=\"literal\">NULL</span>, szCurProc, MAX_PATH);</span><br><span class=\"line\">    p = <span class=\"built_in\">strrchr</span>(szCurProc, <span class=\"string\">&#x27;\\\\&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( (p != <span class=\"literal\">NULL</span>) &amp;&amp; !_stricmp(p+<span class=\"number\">1</span>, <span class=\"string\">&quot;HideProc.exe&quot;</span>) )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span>( fdwReason )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// #2. API Hooking</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH : </span><br><span class=\"line\">        hook_by_code(DEF_NTDLL, DEF_ZWQUERYSYSTEMINFORMATION, </span><br><span class=\"line\">                     (PROC)NewZwQuerySystemInformation, g_pOrgBytes);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// #3. API Unhooking </span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> DLL_PROCESS_DETACH :</span><br><span class=\"line\">        unhook_by_code(DEF_NTDLL, DEF_ZWQUERYSYSTEMINFORMATION, </span><br><span class=\"line\">                       g_pOrgBytes);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DllMain函数先比较字符串，若进程名为HookProc.exe，则进行异常处理，不钩取API。发生DLL_PROCESS_ATTACH事件时，调用hook_by_code函数钩取API；发生DLL_PROCESS_DETACH事件时，调用unhook_by_code函数取消API钩取。</p>\n<h3 id=\"hook-by-code\"><a href=\"#hook-by-code\" class=\"headerlink\" title=\"hook_by_code()\"></a>hook_by_code()</h3><p>该函数通过修改代码实现API钩取</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL <span class=\"title function_\">hook_by_code</span><span class=\"params\">(LPCSTR szDllName, LPCSTR szFuncName, PROC pfnNew, PBYTE pOrgBytes)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FARPROC pfnOrg;</span><br><span class=\"line\">    DWORD dwOldProtect, dwAddress;</span><br><span class=\"line\">    BYTE pBuf[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0xE9</span>, <span class=\"number\">0</span>, &#125;;</span><br><span class=\"line\">    PBYTE pByte;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取要钩取的API地址</span></span><br><span class=\"line\">    pfnOrg = (FARPROC)GetProcAddress(GetModuleHandleA(szDllName), szFuncName);</span><br><span class=\"line\">    pByte = (PBYTE)pfnOrg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 若已经被钩取则return FALSE</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( pByte[<span class=\"number\">0</span>] == <span class=\"number\">0xE9</span> )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为了修改5个字节，先向内存添加写属性</span></span><br><span class=\"line\">    VirtualProtect((LPVOID)pfnOrg, <span class=\"number\">5</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//备份原有代码(5字节)</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(pOrgBytes, pfnOrg, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算JMP地址(E9 XXXXXXXX)</span></span><br><span class=\"line\">    <span class=\"comment\">// =&gt; XXXXXXXX = pfnNew - pfnOrg - 5</span></span><br><span class=\"line\">    dwAddress = (DWORD)pfnNew - (DWORD)pfnOrg - <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(&amp;pBuf[<span class=\"number\">1</span>], &amp;dwAddress, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Hook - 修改5个字节(JMP XXXXXXXX)</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(pfnOrg, pBuf, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//恢复内存属性</span></span><br><span class=\"line\">    VirtualProtect((LPVOID)pfnOrg, <span class=\"number\">5</span>, dwOldProtect, &amp;dwOldProtect);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>IDA反编译结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">sub_10001000</span><span class=\"params\">(LPCSTR lpModuleName, LPCSTR lpProcName, <span class=\"type\">int</span> a3, <span class=\"type\">int</span> a4)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  HMODULE ModuleHandleA; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  FARPROC ProcAddress; <span class=\"comment\">// esi</span></span><br><span class=\"line\">  DWORD flOldProtect; <span class=\"comment\">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class=\"line\">  _DWORD v8[<span class=\"number\">2</span>]; <span class=\"comment\">// [esp+Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v8[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;\\xE9&#x27;</span>;</span><br><span class=\"line\">  LOBYTE(v8[<span class=\"number\">1</span>]) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  ModuleHandleA = GetModuleHandleA(lpModuleName);</span><br><span class=\"line\">  ProcAddress = GetProcAddress(ModuleHandleA, lpProcName);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( *(_BYTE *)ProcAddress == <span class=\"number\">0xE9</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  VirtualProtect(ProcAddress, <span class=\"number\">5u</span>, <span class=\"number\">0x40u</span>, &amp;flOldProtect);</span><br><span class=\"line\">  *(_DWORD *)a4 = *(_DWORD *)ProcAddress;</span><br><span class=\"line\">  *(_BYTE *)(a4 + <span class=\"number\">4</span>) = *((_BYTE *)ProcAddress + <span class=\"number\">4</span>);</span><br><span class=\"line\">  *(_DWORD *)((<span class=\"type\">char</span> *)v8 + <span class=\"number\">1</span>) = a3 - (_DWORD)ProcAddress - <span class=\"number\">5</span>;</span><br><span class=\"line\">  *(_DWORD *)ProcAddress = v8[<span class=\"number\">0</span>];</span><br><span class=\"line\">  *((_BYTE *)ProcAddress + <span class=\"number\">4</span>) = (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(a3 - (_DWORD)ProcAddress - <span class=\"number\">5</span>) &gt;&gt; <span class=\"number\">24</span>;</span><br><span class=\"line\">  VirtualProtect(ProcAddress, <span class=\"number\">5u</span>, flOldProtect, &amp;flOldProtect);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>hook_by_code()函数参数介绍如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LPCSTR szDllName：[IN]包含要钩取的API的DLL文件的名称</span><br><span class=\"line\"></span><br><span class=\"line\">LPCSTR szFuncName：[IN]包含要钩取的API名称</span><br><span class=\"line\"></span><br><span class=\"line\">PROC pfnNew：[IN]用户提供的钩取函数地址</span><br><span class=\"line\"></span><br><span class=\"line\">PBYTE pOrgBytes：[OUT]存储原来5个字节的缓冲区，后面脱钩时使用</span><br></pre></td></tr></table></figure>\n\n<p>该函数用于将原来API代码的前5个字节更改为”JMP XXXXXXXX”。</p>\n<p>根据Intel x86（IA-32）指令格式，JMP指令对应的操作码为E9，后面跟4个字节的地址。也就是说，JMP指令的Instruction实际形式为”E9 XXXXXXXX”。需要注意的是，XXXXXXXX地址值不是要跳转的绝对地址值，而是从当前JMP命令到跳转位置的相对距离。通过下列关系式求得XXXXXXXX的地址值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XXXXXXXX=要跳转的地址-当前指令地址-当前指令长度（5）</span><br></pre></td></tr></table></figure>\n\n<p>最后又减去5个字节是因为JMP指令本身长度就是5个字节。例如，当前JMP指令的地址为402000，若想跳转到401000地址处，写成”E9 00401000”是不对的，XXXXXXXX地址值要使用上面的等式换算才行。</p>\n<p>XXXXXXXX&#x3D;401000-402000-5&#x3D;FFFFFFFB</p>\n<p>所以JMP指令的Instruction为”E9 FFFFFFFB”</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>除了JMP指令外，还有一种short JMP指令，它是用来进行短距离跳转的指令，对应的IA-32指令为”EB XX”（指令长度为2字节）。</p>\n<p>像上面这样每次使用JMP指令都要计算相对地址，显得不太方便。也可以使用其他指令直接用绝对地址跳转，但是这样的指令长度往往较为复杂。</p>\n<p>例（1）PUSH + RET</p>\n<p>68 00401000 PUSH 00401000</p>\n<p>C3 RETN</p>\n<p>例（2）MOV + JMP</p>\n<p>B8 00401000 MOV EAX,00401000</p>\n<p>FFE0 JMP EAX</p></blockquote>\n<h3 id=\"unhook-by-code\"><a href=\"#unhook-by-code\" class=\"headerlink\" title=\"unhook_by_code()\"></a>unhook_by_code()</h3><p>该函数用来取消钩取</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL <span class=\"title function_\">unhook_by_code</span><span class=\"params\">(LPCSTR szDllName, LPCSTR szFuncName, PBYTE pOrgBytes)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FARPROC pFunc;</span><br><span class=\"line\">    DWORD dwOldProtect;</span><br><span class=\"line\">    PBYTE pByte;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取API地址</span></span><br><span class=\"line\">    pFunc = GetProcAddress(GetModuleHandleA(szDllName), szFuncName);</span><br><span class=\"line\">    pByte = (PBYTE)pFunc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//若已经脱钩则return FALSE</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( pByte[<span class=\"number\">0</span>] != <span class=\"number\">0xE9</span> )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向内存添加写属性，为恢复原代码（5个字节）准备</span></span><br><span class=\"line\">    VirtualProtect((LPVOID)pFunc, <span class=\"number\">5</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Unhook</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(pFunc, pOrgBytes, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//恢复内存属性</span></span><br><span class=\"line\">    VirtualProtect((LPVOID)pFunc, <span class=\"number\">5</span>, dwOldProtect, &amp;dwOldProtect);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>脱钩的原理很简单，就是将函数代码开始的前5个字节恢复原值</p>\n<h3 id=\"NewZwQuerySystemInformation\"><a href=\"#NewZwQuerySystemInformation\" class=\"headerlink\" title=\"NewZwQuerySystemInformation()\"></a>NewZwQuerySystemInformation()</h3><p>最后，分析钩取函数NewZwQuerySystemInformation()。在此之前，先看看ntdll.ZwQuerySystemInformation API</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NTSTATUS WINAPI <span class=\"title function_\">ZwQuerySystemInformation</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">  _In_      SYSTEM_INFORMATION_CLASS SystemInformationClass,</span></span><br><span class=\"line\"><span class=\"params\">  _Inout_   PVOID                    SystemInformation,</span></span><br><span class=\"line\"><span class=\"params\">  _In_      ULONG                    SystemInformationLength,</span></span><br><span class=\"line\"><span class=\"params\">  _Out_opt_ PULONG                   ReturnLength</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">SYSTEM_PROCESS_INFORMATION</span> &#123;</span></span><br><span class=\"line\">    ULONG NextEntryOffset;</span><br><span class=\"line\">    ULONG NumberOfThreads;</span><br><span class=\"line\">    BYTE Reserved1[<span class=\"number\">48</span>];</span><br><span class=\"line\">    PVOID Reserved2[<span class=\"number\">3</span>];</span><br><span class=\"line\">    HANDLE UniqueProcessId;</span><br><span class=\"line\">    PVOID Reserved3;</span><br><span class=\"line\">    ULONG HandleCount;</span><br><span class=\"line\">    BYTE Reserved4[<span class=\"number\">4</span>];</span><br><span class=\"line\">    PVOID Reserved5[<span class=\"number\">11</span>];</span><br><span class=\"line\">    SIZE_T PeakPagefileUsage;</span><br><span class=\"line\">    SIZE_T PrivatePageCount;</span><br><span class=\"line\">    LARGE_INTEGER Reserved6[<span class=\"number\">6</span>];</span><br><span class=\"line\">&#125; SYSTEM_PROCESS_INFORMATION,*PSYSTEM_PROCESS_INFORMATION;</span><br></pre></td></tr></table></figure>\n\n<p>将SystemInformationClass设置为5（<strong>SystemProcessInformation</strong>）后调用ZwQuerySystemInformation() API，SystemInformation参数中存储的是SYSTEM_PROCESS_INFORMATION结构体单项链表的起始地址。该结构体链表中存储着运行中的所有进程信息。所以隐藏进程前，先要查找与之对应的链表成员，然后断开其与链表的链接。</p>\n<p>下面是NewZwQuerySystemInformation()函数的实现</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NTSTATUS WINAPI <span class=\"title function_\">NewZwQuerySystemInformation</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">                SYSTEM_INFORMATION_CLASS SystemInformationClass, </span></span><br><span class=\"line\"><span class=\"params\">                PVOID SystemInformation, </span></span><br><span class=\"line\"><span class=\"params\">                ULONG SystemInformationLength, </span></span><br><span class=\"line\"><span class=\"params\">                PULONG ReturnLength)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    NTSTATUS status;</span><br><span class=\"line\">    FARPROC pFunc;</span><br><span class=\"line\">    PSYSTEM_PROCESS_INFORMATION pCur, pPrev;</span><br><span class=\"line\">    <span class=\"type\">char</span> szProcName[MAX_PATH] = &#123;<span class=\"number\">0</span>,&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//开始前先脱钩</span></span><br><span class=\"line\">    unhook_by_code(DEF_NTDLL, DEF_ZWQUERYSYSTEMINFORMATION, g_pOrgBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调用原始API</span></span><br><span class=\"line\">    pFunc = GetProcAddress(GetModuleHandleA(DEF_NTDLL), </span><br><span class=\"line\">                           DEF_ZWQUERYSYSTEMINFORMATION);</span><br><span class=\"line\">    status = ((PFZWQUERYSYSTEMINFORMATION)pFunc)</span><br><span class=\"line\">              (SystemInformationClass, SystemInformation, </span><br><span class=\"line\">              SystemInformationLength, ReturnLength);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( status != STATUS_SUCCESS )</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> __NTQUERYSYSTEMINFORMATION_END;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//仅针对SystemProcessInformation类型操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( SystemInformationClass == SystemProcessInformation )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// SYSTEM_PROCESS_INFORMATION类型转换</span></span><br><span class=\"line\">        <span class=\"comment\">// pCur是单项链表的头</span></span><br><span class=\"line\">        pCur = (PSYSTEM_PROCESS_INFORMATION)SystemInformation;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(TRUE)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 比较进程名称</span></span><br><span class=\"line\">            <span class=\"comment\">// g_szProcName为要隐藏的进程名</span></span><br><span class=\"line\">            <span class=\"comment\">// (=&gt; 在SetProcName()中设置)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pCur-&gt;Reserved2[<span class=\"number\">1</span>] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!_tcsicmp((PWSTR)pCur-&gt;Reserved2[<span class=\"number\">1</span>], g_szProcName))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//从链表中删除隐藏进程的节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(pCur-&gt;NextEntryOffset == <span class=\"number\">0</span>)</span><br><span class=\"line\">                        pPrev-&gt;NextEntryOffset = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        pPrev-&gt;NextEntryOffset += pCur-&gt;NextEntryOffset;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>\t\t</span><br><span class=\"line\">                    pPrev = pCur;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pCur-&gt;NextEntryOffset == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//链表的下一项</span></span><br><span class=\"line\">            pCur = (PSYSTEM_PROCESS_INFORMATION)</span><br><span class=\"line\">                    ((ULONG)pCur + pCur-&gt;NextEntryOffset);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">__NTQUERYSYSTEMINFORMATION_END:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//函数终止前，再次执行API钩取操作，为下次调用准备</span></span><br><span class=\"line\">    hook_by_code(DEF_NTDLL, DEF_ZWQUERYSYSTEMINFORMATION, </span><br><span class=\"line\">                 (PROC)NewZwQuerySystemInformation, g_pOrgBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>IDA反编译结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __stdcall <span class=\"title function_\">sub_10001120</span><span class=\"params\">(<span class=\"type\">int</span> a1, <span class=\"type\">int</span> a2, <span class=\"type\">int</span> a3, <span class=\"type\">int</span> a4)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> v4; <span class=\"comment\">// esi</span></span><br><span class=\"line\">  HMODULE ModuleHandleA; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  FARPROC ZwQuerySystemInformation; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v7; <span class=\"comment\">// ebp</span></span><br><span class=\"line\">  _DWORD *v8; <span class=\"comment\">// edi</span></span><br><span class=\"line\">  _DWORD *v10; <span class=\"comment\">// [esp+10h] [ebp-10Ch]</span></span><br><span class=\"line\">  CHAR MultiByteStr[<span class=\"number\">260</span>]; <span class=\"comment\">// [esp+14h] [ebp-108h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v4 = a2;</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(MultiByteStr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(MultiByteStr));</span><br><span class=\"line\">  sub_100010C0(<span class=\"string\">&quot;ntdll.dll&quot;</span>, <span class=\"string\">&quot;ZwQuerySystemInformation&quot;</span>, (<span class=\"type\">int</span>)&amp;unk_1000AC60);</span><br><span class=\"line\">  ModuleHandleA = GetModuleHandleA(<span class=\"string\">&quot;ntdll.dll&quot;</span>);</span><br><span class=\"line\">  ZwQuerySystemInformation = GetProcAddress(ModuleHandleA, <span class=\"string\">&quot;ZwQuerySystemInformation&quot;</span>);</span><br><span class=\"line\">  v7 = ((<span class=\"type\">int</span> (__stdcall *)(<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>))ZwQuerySystemInformation)(a1, a2, a3, a4);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !v7 &amp;&amp; a1 == <span class=\"number\">5</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v8 = v10;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      WideCharToMultiByte(<span class=\"number\">0</span>, <span class=\"number\">0</span>, *(LPCWCH *)(v4 + <span class=\"number\">60</span>), <span class=\"number\">-1</span>, MultiByteStr, <span class=\"number\">260</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( !_stricmp(MultiByteStr, Destination) )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( *(_DWORD *)v4 )</span><br><span class=\"line\">          *v8 += *(_DWORD *)v4;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">          *v8 = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v8 = (_DWORD *)v4;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( !*(_DWORD *)v4 )</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      v4 += *(_DWORD *)v4;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sub_10001000(<span class=\"string\">&quot;ntdll.dll&quot;</span>, <span class=\"string\">&quot;ZwQuerySystemInformation&quot;</span>, (<span class=\"type\">int</span>)sub_10001120, (<span class=\"type\">int</span>)&amp;unk_1000AC60);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对NewZwQuerySystemInformation函数的结构说明如下：</p>\n<ul>\n<li>脱钩ZwQuerySystemInformation函数</li>\n<li>调用ZwQuerySystemInformation函数</li>\n<li>检查SYSTEM_PROCESS_INFORMATION结构体链表，查找要隐藏的进程</li>\n<li>查找到要隐藏的进程后，从链表中删除</li>\n<li>再次钩取ZwQuerySystemInformation</li>\n</ul>\n<p>NewZwQuerySystemInformation函数代码中有一个while语句，它用来检查SYSTEM_PROCESS_INFORMATION结构体链表，比较进程名称（pCur-&gt;Reserved2[1]）。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://blog.csdn.net/junbopengpeng/article/details/28142669\">https://blog.csdn.net/junbopengpeng/article/details/28142669</a></p>\n","text":"原理程序在编译链接后成了二进制代码，我们可以找到需要Hook的函数的地址，然后把这个函数在内存中的二进制代码改为一个JMP指令，令其跳转到执行我们自己构造的函数...","permalink":"/post/inline-Hook","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"24 mins."},"categories":[],"tags":[{"name":"hook技术","slug":"hook技术","count":7,"path":"api/tags/hook技术.json"},{"name":"逆向工程核心原理","slug":"逆向工程核心原理","count":7,"path":"api/tags/逆向工程核心原理.json"},{"name":"API hook","slug":"API-hook","count":5,"path":"api/tags/API-hook.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F\"><span class=\"toc-text\">进程隐藏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E9%9A%90%E8%97%8F%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">进程隐藏工作原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%85%B3API\"><span class=\"toc-text\">相关API</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EWin10%E7%9A%84%E9%9A%90%E8%97%8Fnotepad-exe%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">基于Win10的隐藏notepad.exe练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HideProc-cpp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">HideProc.cpp源码分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#stealth-cpp%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">stealth.cpp源码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SetProcName\"><span class=\"toc-text\">SetProcName()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DllMain\"><span class=\"toc-text\">DllMain()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hook-by-code\"><span class=\"toc-text\">hook_by_code()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#unhook-by-code\"><span class=\"toc-text\">unhook_by_code()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NewZwQuerySystemInformation\"><span class=\"toc-text\">NewZwQuerySystemInformation()</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"IAT Hook","uid":"0f25dc3ea7a3ffec9ce07cef8295e4e2","slug":"IAT Hook","date":"2022-03-25T02:23:09.000Z","updated":"2025-06-05T12:20:03.574Z","comments":true,"path":"api/articles/IAT Hook.json","keywords":null,"cover":[],"text":"IAT Hook前置知识通过注入DLL文件来钩取某个API，DLL文件注入目标进程后，修改IAT来更改进程中调用的特定API功能。 API功能 kernel32...","permalink":"/post/IAT Hook","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"hook技术","slug":"hook技术","count":7,"path":"api/tags/hook技术.json"},{"name":"逆向工程核心原理","slug":"逆向工程核心原理","count":7,"path":"api/tags/逆向工程核心原理.json"},{"name":"API hook","slug":"API-hook","count":5,"path":"api/tags/API-hook.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"消息Hook","uid":"f1607dee380ae8a16588d94dd0edba33","slug":"消息Hook","date":"2022-03-20T05:39:13.000Z","updated":"2025-06-05T12:25:59.568Z","comments":true,"path":"api/articles/消息Hook.json","keywords":null,"cover":[],"text":"概念Windows操作系统向用户提供GUI，它以事件驱动方式工作。在操作系统中借助键盘、鼠标，选择菜单、按钮，以及移动鼠标、改变窗口大小与位置等都是事件。发生这...","permalink":"/post/消息Hook","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"hook技术","slug":"hook技术","count":7,"path":"api/tags/hook技术.json"},{"name":"逆向工程核心原理","slug":"逆向工程核心原理","count":7,"path":"api/tags/逆向工程核心原理.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}