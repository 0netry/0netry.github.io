{"title":"认识PEB","uid":"716452a8f7139876fcd7d9fc7c5bbc0e","slug":"认识PEB","date":"2022-04-09T14:10:54.000Z","updated":"2025-06-08T15:18:01.815Z","comments":true,"path":"api/articles/认识PEB.json","keywords":null,"cover":[],"content":"<p>PEB（Process Environment Block，进程环境块）</p>\n<p>PEB存放进程信息的结构体。</p>\n<h3 id=\"PEB-结构体的定义\"><a href=\"#PEB-结构体的定义\" class=\"headerlink\" title=\"PEB 结构体的定义\"></a>PEB 结构体的定义</h3><h4 id=\"PEB结构体成员\"><a href=\"#PEB结构体成员\" class=\"headerlink\" title=\"PEB结构体成员\"></a>PEB结构体成员</h4><p>使用Windbg调试器命令<code>dt _PEB</code>或<code>dt ntdll!_PEB</code>获取PEB结构体的组成成员如下所示：</p>\n<h5 id=\"Win7-x86中：\"><a href=\"#Win7-x86中：\" class=\"headerlink\" title=\"Win7 x86中：\"></a>Win7 x86中：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; dt _PEB</span><br><span class=\"line\">ntdll!_PEB</span><br><span class=\"line\">   +0x000 InheritedAddressSpace : UChar</span><br><span class=\"line\">   +0x001 ReadImageFileExecOptions : UChar</span><br><span class=\"line\">   +0x002 BeingDebugged    : UChar</span><br><span class=\"line\">   +0x003 BitField         : UChar</span><br><span class=\"line\">   +0x003 ImageUsesLargePages : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x003 IsProtectedProcess : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x003 IsLegacyProcess  : Pos 2, 1 Bit</span><br><span class=\"line\">   +0x003 IsImageDynamicallyRelocated : Pos 3, 1 Bit</span><br><span class=\"line\">   +0x003 SkipPatchingUser32Forwarders : Pos 4, 1 Bit</span><br><span class=\"line\">   +0x003 SpareBits        : Pos 5, 3 Bits</span><br><span class=\"line\">   +0x004 Mutant           : Ptr32 Void</span><br><span class=\"line\">   +0x008 ImageBaseAddress : Ptr32 Void</span><br><span class=\"line\">   +0x00c Ldr              : Ptr32 _PEB_LDR_DATA</span><br><span class=\"line\">   +0x010 ProcessParameters : Ptr32 _RTL_USER_PROCESS_PARAMETERS</span><br><span class=\"line\">   +0x014 SubSystemData    : Ptr32 Void</span><br><span class=\"line\">   +0x018 ProcessHeap      : Ptr32 Void</span><br><span class=\"line\">   +0x01c FastPebLock      : Ptr32 _RTL_CRITICAL_SECTION</span><br><span class=\"line\">   +0x020 AtlThunkSListPtr : Ptr32 Void</span><br><span class=\"line\">   +0x024 IFEOKey          : Ptr32 Void</span><br><span class=\"line\">   +0x028 CrossProcessFlags : Uint4B</span><br><span class=\"line\">   +0x028 ProcessInJob     : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x028 ProcessInitializing : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x028 ProcessUsingVEH  : Pos 2, 1 Bit</span><br><span class=\"line\">   +0x028 ProcessUsingVCH  : Pos 3, 1 Bit</span><br><span class=\"line\">   +0x028 ProcessUsingFTH  : Pos 4, 1 Bit</span><br><span class=\"line\">   +0x028 ReservedBits0    : Pos 5, 27 Bits</span><br><span class=\"line\">   +0x02c KernelCallbackTable : Ptr32 Void</span><br><span class=\"line\">   +0x02c UserSharedInfoPtr : Ptr32 Void</span><br><span class=\"line\">   +0x030 SystemReserved   : [1] Uint4B</span><br><span class=\"line\">   +0x034 AtlThunkSListPtr32 : Uint4B</span><br><span class=\"line\">   +0x038 ApiSetMap        : Ptr32 Void</span><br><span class=\"line\">   +0x03c TlsExpansionCounter : Uint4B</span><br><span class=\"line\">   +0x040 TlsBitmap        : Ptr32 Void</span><br><span class=\"line\">   +0x044 TlsBitmapBits    : [2] Uint4B</span><br><span class=\"line\">   +0x04c ReadOnlySharedMemoryBase : Ptr32 Void</span><br><span class=\"line\">   +0x050 HotpatchInformation : Ptr32 Void</span><br><span class=\"line\">   +0x054 ReadOnlyStaticServerData : Ptr32 Ptr32 Void</span><br><span class=\"line\">   +0x058 AnsiCodePageData : Ptr32 Void</span><br><span class=\"line\">   +0x05c OemCodePageData  : Ptr32 Void</span><br><span class=\"line\">   +0x060 UnicodeCaseTableData : Ptr32 Void</span><br><span class=\"line\">   +0x064 NumberOfProcessors : Uint4B</span><br><span class=\"line\">   +0x068 NtGlobalFlag     : Uint4B</span><br><span class=\"line\">   +0x070 CriticalSectionTimeout : _LARGE_INTEGER</span><br><span class=\"line\">   +0x078 HeapSegmentReserve : Uint4B</span><br><span class=\"line\">   +0x07c HeapSegmentCommit : Uint4B</span><br><span class=\"line\">   +0x080 HeapDeCommitTotalFreeThreshold : Uint4B</span><br><span class=\"line\">   +0x084 HeapDeCommitFreeBlockThreshold : Uint4B</span><br><span class=\"line\">   +0x088 NumberOfHeaps    : Uint4B</span><br><span class=\"line\">   +0x08c MaximumNumberOfHeaps : Uint4B</span><br><span class=\"line\">   +0x090 ProcessHeaps     : Ptr32 Ptr32 Void</span><br><span class=\"line\">   +0x094 GdiSharedHandleTable : Ptr32 Void</span><br><span class=\"line\">   +0x098 ProcessStarterHelper : Ptr32 Void</span><br><span class=\"line\">   +0x09c GdiDCAttributeList : Uint4B</span><br><span class=\"line\">   +0x0a0 LoaderLock       : Ptr32 _RTL_CRITICAL_SECTION</span><br><span class=\"line\">   +0x0a4 OSMajorVersion   : Uint4B</span><br><span class=\"line\">   +0x0a8 OSMinorVersion   : Uint4B</span><br><span class=\"line\">   +0x0ac OSBuildNumber    : Uint2B</span><br><span class=\"line\">   +0x0ae OSCSDVersion     : Uint2B</span><br><span class=\"line\">   +0x0b0 OSPlatformId     : Uint4B</span><br><span class=\"line\">   +0x0b4 ImageSubsystem   : Uint4B</span><br><span class=\"line\">   +0x0b8 ImageSubsystemMajorVersion : Uint4B</span><br><span class=\"line\">   +0x0bc ImageSubsystemMinorVersion : Uint4B</span><br><span class=\"line\">   +0x0c0 ActiveProcessAffinityMask : Uint4B</span><br><span class=\"line\">   +0x0c4 GdiHandleBuffer  : [34] Uint4B</span><br><span class=\"line\">   +0x14c PostProcessInitRoutine : Ptr32     void </span><br><span class=\"line\">   +0x150 TlsExpansionBitmap : Ptr32 Void</span><br><span class=\"line\">   +0x154 TlsExpansionBitmapBits : [32] Uint4B</span><br><span class=\"line\">   +0x1d4 SessionId        : Uint4B</span><br><span class=\"line\">   +0x1d8 AppCompatFlags   : _ULARGE_INTEGER</span><br><span class=\"line\">   +0x1e0 AppCompatFlagsUser : _ULARGE_INTEGER</span><br><span class=\"line\">   +0x1e8 pShimData        : Ptr32 Void</span><br><span class=\"line\">   +0x1ec AppCompatInfo    : Ptr32 Void</span><br><span class=\"line\">   +0x1f0 CSDVersion       : _UNICODE_STRING</span><br><span class=\"line\">   +0x1f8 ActivationContextData : Ptr32 _ACTIVATION_CONTEXT_DATA</span><br><span class=\"line\">   +0x1fc ProcessAssemblyStorageMap : Ptr32 _ASSEMBLY_STORAGE_MAP</span><br><span class=\"line\">   +0x200 SystemDefaultActivationContextData : Ptr32 _ACTIVATION_CONTEXT_DATA</span><br><span class=\"line\">   +0x204 SystemAssemblyStorageMap : Ptr32 _ASSEMBLY_STORAGE_MAP</span><br><span class=\"line\">   +0x208 MinimumStackCommit : Uint4B</span><br><span class=\"line\">   +0x20c FlsCallback      : Ptr32 _FLS_CALLBACK_INFO</span><br><span class=\"line\">   +0x210 FlsListHead      : _LIST_ENTRY</span><br><span class=\"line\">   +0x218 FlsBitmap        : Ptr32 Void</span><br><span class=\"line\">   +0x21c FlsBitmapBits    : [4] Uint4B</span><br><span class=\"line\">   +0x22c FlsHighIndex     : Uint4B</span><br><span class=\"line\">   +0x230 WerRegistrationData : Ptr32 Void</span><br><span class=\"line\">   +0x234 WerShipAssertPtr : Ptr32 Void</span><br><span class=\"line\">   +0x238 pContextData     : Ptr32 Void</span><br><span class=\"line\">   +0x23c pImageHeaderHash : Ptr32 Void</span><br><span class=\"line\">   +0x240 TracingFlags     : Uint4B</span><br><span class=\"line\">   +0x240 HeapTracingEnabled : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x240 CritSecTracingEnabled : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x240 SpareTracingBits : Pos 2, 30 Bits</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Win10-x64中：\"><a href=\"#Win10-x64中：\" class=\"headerlink\" title=\"Win10 x64中：\"></a>Win10 x64中：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kd&gt; dt ntdll!_PEB</span><br><span class=\"line\">   +0x000 InheritedAddressSpace : UChar</span><br><span class=\"line\">   +0x001 ReadImageFileExecOptions : UChar</span><br><span class=\"line\">   +0x002 BeingDebugged    : UChar</span><br><span class=\"line\">   +0x003 BitField         : UChar</span><br><span class=\"line\">   +0x003 ImageUsesLargePages : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x003 IsProtectedProcess : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x003 IsImageDynamicallyRelocated : Pos 2, 1 Bit</span><br><span class=\"line\">   +0x003 SkipPatchingUser32Forwarders : Pos 3, 1 Bit</span><br><span class=\"line\">   +0x003 IsPackagedProcess : Pos 4, 1 Bit</span><br><span class=\"line\">   +0x003 IsAppContainer   : Pos 5, 1 Bit</span><br><span class=\"line\">   +0x003 IsProtectedProcessLight : Pos 6, 1 Bit</span><br><span class=\"line\">   +0x003 IsLongPathAwareProcess : Pos 7, 1 Bit</span><br><span class=\"line\">   +0x004 Padding0         : [4] UChar</span><br><span class=\"line\">   +0x008 Mutant           : Ptr64 Void</span><br><span class=\"line\">   +0x010 ImageBaseAddress : Ptr64 Void</span><br><span class=\"line\">   +0x018 Ldr              : Ptr64 _PEB_LDR_DATA</span><br><span class=\"line\">   +0x020 ProcessParameters : Ptr64 _RTL_USER_PROCESS_PARAMETERS</span><br><span class=\"line\">   +0x028 SubSystemData    : Ptr64 Void</span><br><span class=\"line\">   +0x030 ProcessHeap      : Ptr64 Void</span><br><span class=\"line\">   +0x038 FastPebLock      : Ptr64 _RTL_CRITICAL_SECTION</span><br><span class=\"line\">   +0x040 AtlThunkSListPtr : Ptr64 _SLIST_HEADER</span><br><span class=\"line\">   +0x048 IFEOKey          : Ptr64 Void</span><br><span class=\"line\">   +0x050 CrossProcessFlags : Uint4B</span><br><span class=\"line\">   +0x050 ProcessInJob     : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessInitializing : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessUsingVEH  : Pos 2, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessUsingVCH  : Pos 3, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessUsingFTH  : Pos 4, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessPreviouslyThrottled : Pos 5, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessCurrentlyThrottled : Pos 6, 1 Bit</span><br><span class=\"line\">   +0x050 ProcessImagesHotPatched : Pos 7, 1 Bit</span><br><span class=\"line\">   +0x050 ReservedBits0    : Pos 8, 24 Bits</span><br><span class=\"line\">   +0x054 Padding1         : [4] UChar</span><br><span class=\"line\">   +0x058 KernelCallbackTable : Ptr64 Void</span><br><span class=\"line\">   +0x058 UserSharedInfoPtr : Ptr64 Void</span><br><span class=\"line\">   +0x060 SystemReserved   : Uint4B</span><br><span class=\"line\">   +0x064 AtlThunkSListPtr32 : Uint4B</span><br><span class=\"line\">   +0x068 ApiSetMap        : Ptr64 Void</span><br><span class=\"line\">   +0x070 TlsExpansionCounter : Uint4B</span><br><span class=\"line\">   +0x074 Padding2         : [4] UChar</span><br><span class=\"line\">   +0x078 TlsBitmap        : Ptr64 Void</span><br><span class=\"line\">   +0x080 TlsBitmapBits    : [2] Uint4B</span><br><span class=\"line\">   +0x088 ReadOnlySharedMemoryBase : Ptr64 Void</span><br><span class=\"line\">   +0x090 SharedData       : Ptr64 Void</span><br><span class=\"line\">   +0x098 ReadOnlyStaticServerData : Ptr64 Ptr64 Void</span><br><span class=\"line\">   +0x0a0 AnsiCodePageData : Ptr64 Void</span><br><span class=\"line\">   +0x0a8 OemCodePageData  : Ptr64 Void</span><br><span class=\"line\">   +0x0b0 UnicodeCaseTableData : Ptr64 Void</span><br><span class=\"line\">   +0x0b8 NumberOfProcessors : Uint4B</span><br><span class=\"line\">   +0x0bc NtGlobalFlag     : Uint4B</span><br><span class=\"line\">   +0x0c0 CriticalSectionTimeout : _LARGE_INTEGER</span><br><span class=\"line\">   +0x0c8 HeapSegmentReserve : Uint8B</span><br><span class=\"line\">   +0x0d0 HeapSegmentCommit : Uint8B</span><br><span class=\"line\">   +0x0d8 HeapDeCommitTotalFreeThreshold : Uint8B</span><br><span class=\"line\">   +0x0e0 HeapDeCommitFreeBlockThreshold : Uint8B</span><br><span class=\"line\">   +0x0e8 NumberOfHeaps    : Uint4B</span><br><span class=\"line\">   +0x0ec MaximumNumberOfHeaps : Uint4B</span><br><span class=\"line\">   +0x0f0 ProcessHeaps     : Ptr64 Ptr64 Void</span><br><span class=\"line\">   +0x0f8 GdiSharedHandleTable : Ptr64 Void</span><br><span class=\"line\">   +0x100 ProcessStarterHelper : Ptr64 Void</span><br><span class=\"line\">   +0x108 GdiDCAttributeList : Uint4B</span><br><span class=\"line\">   +0x10c Padding3         : [4] UChar</span><br><span class=\"line\">   +0x110 LoaderLock       : Ptr64 _RTL_CRITICAL_SECTION</span><br><span class=\"line\">   +0x118 OSMajorVersion   : Uint4B</span><br><span class=\"line\">   +0x11c OSMinorVersion   : Uint4B</span><br><span class=\"line\">   +0x120 OSBuildNumber    : Uint2B</span><br><span class=\"line\">   +0x122 OSCSDVersion     : Uint2B</span><br><span class=\"line\">   +0x124 OSPlatformId     : Uint4B</span><br><span class=\"line\">   +0x128 ImageSubsystem   : Uint4B</span><br><span class=\"line\">   +0x12c ImageSubsystemMajorVersion : Uint4B</span><br><span class=\"line\">   +0x130 ImageSubsystemMinorVersion : Uint4B</span><br><span class=\"line\">   +0x134 Padding4         : [4] UChar</span><br><span class=\"line\">   +0x138 ActiveProcessAffinityMask : Uint8B</span><br><span class=\"line\">   +0x140 GdiHandleBuffer  : [60] Uint4B</span><br><span class=\"line\">   +0x230 PostProcessInitRoutine : Ptr64     void </span><br><span class=\"line\">   +0x238 TlsExpansionBitmap : Ptr64 Void</span><br><span class=\"line\">   +0x240 TlsExpansionBitmapBits : [32] Uint4B</span><br><span class=\"line\">   +0x2c0 SessionId        : Uint4B</span><br><span class=\"line\">   +0x2c4 Padding5         : [4] UChar</span><br><span class=\"line\">   +0x2c8 AppCompatFlags   : _ULARGE_INTEGER</span><br><span class=\"line\">   +0x2d0 AppCompatFlagsUser : _ULARGE_INTEGER</span><br><span class=\"line\">   +0x2d8 pShimData        : Ptr64 Void</span><br><span class=\"line\">   +0x2e0 AppCompatInfo    : Ptr64 Void</span><br><span class=\"line\">   +0x2e8 CSDVersion       : _UNICODE_STRING</span><br><span class=\"line\">   +0x2f8 ActivationContextData : Ptr64 _ACTIVATION_CONTEXT_DATA</span><br><span class=\"line\">   +0x300 ProcessAssemblyStorageMap : Ptr64 _ASSEMBLY_STORAGE_MAP</span><br><span class=\"line\">   +0x308 SystemDefaultActivationContextData : Ptr64 _ACTIVATION_CONTEXT_DATA</span><br><span class=\"line\">   +0x310 SystemAssemblyStorageMap : Ptr64 _ASSEMBLY_STORAGE_MAP</span><br><span class=\"line\">   +0x318 MinimumStackCommit : Uint8B</span><br><span class=\"line\">   +0x320 SparePointers    : [4] Ptr64 Void</span><br><span class=\"line\">   +0x340 SpareUlongs      : [5] Uint4B</span><br><span class=\"line\">   +0x358 WerRegistrationData : Ptr64 Void</span><br><span class=\"line\">   +0x360 WerShipAssertPtr : Ptr64 Void</span><br><span class=\"line\">   +0x368 pUnused          : Ptr64 Void</span><br><span class=\"line\">   +0x370 pImageHeaderHash : Ptr64 Void</span><br><span class=\"line\">   +0x378 TracingFlags     : Uint4B</span><br><span class=\"line\">   +0x378 HeapTracingEnabled : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x378 CritSecTracingEnabled : Pos 1, 1 Bit</span><br><span class=\"line\">   +0x378 LibLoaderTracingEnabled : Pos 2, 1 Bit</span><br><span class=\"line\">   +0x378 SpareTracingBits : Pos 3, 29 Bits</span><br><span class=\"line\">   +0x37c Padding6         : [4] UChar</span><br><span class=\"line\">   +0x380 CsrServerReadOnlySharedMemoryBase : Uint8B</span><br><span class=\"line\">   +0x388 TppWorkerpListLock : Uint8B</span><br><span class=\"line\">   +0x390 TppWorkerpList   : _LIST_ENTRY</span><br><span class=\"line\">   +0x3a0 WaitOnAddressHashTable : [128] Ptr64 Void</span><br><span class=\"line\">   +0x7a0 TelemetryCoverageHeader : Ptr64 Void</span><br><span class=\"line\">   +0x7a8 CloudFileFlags   : Uint4B</span><br><span class=\"line\">   +0x7ac CloudFileDiagFlags : Uint4B</span><br><span class=\"line\">   +0x7b0 PlaceholderCompatibilityMode : Char</span><br><span class=\"line\">   +0x7b1 PlaceholderCompatibilityModeReserved : [7] Char</span><br><span class=\"line\">   +0x7b8 LeapSecondData   : Ptr64 _LEAP_SECOND_DATA</span><br><span class=\"line\">   +0x7c0 LeapSecondFlags  : Uint4B</span><br><span class=\"line\">   +0x7c0 SixtySecondEnabled : Pos 0, 1 Bit</span><br><span class=\"line\">   +0x7c0 Reserved         : Pos 1, 31 Bits</span><br><span class=\"line\">   +0x7c4 NtGlobalFlag2    : Uint4B</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"PEB的重要成员\"><a href=\"#PEB的重要成员\" class=\"headerlink\" title=\"PEB的重要成员\"></a>PEB的重要成员</h4><p>以下基于Win7 x86介绍 PEB的重要成员</p>\n<p>PEB结构体非常庞大，下面是与代码逆向分析相关的几个重要成员：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+0x002 BeingDebugged    : UChar</span><br><span class=\"line\"></span><br><span class=\"line\">+0x008 ImageBaseAddress : Ptr32 Void</span><br><span class=\"line\"></span><br><span class=\"line\">+0x00c Ldr              : Ptr32 _PEB_LDR_DATA</span><br><span class=\"line\"></span><br><span class=\"line\">+0x018 ProcessHeap      : Ptr32 Void</span><br><span class=\"line\"></span><br><span class=\"line\">+0x068 NtGlobalFlag     : Uint4B</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"PEB-BeingDebugged（-0x2）\"><a href=\"#PEB-BeingDebugged（-0x2）\" class=\"headerlink\" title=\"PEB.BeingDebugged（+0x2）\"></a>PEB.BeingDebugged（+0x2）</h5><p>Kernel32.dll中有个名为Kernel32!IsDebuggerPresent()的API：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL WINAPI IsDebuggerPresent(void)</span><br></pre></td></tr></table></figure>\n\n<p>顾名思义，该API函数用于判断当前进程是否处于调试状态，并返回判断结果。该API通过检测PEB.BeingDebugged成员来确定是否正在调试进程（是，则返回1；否，则返回0）。下面通过x32dbg查看其实现。</p>\n<p>①首先点击菜单栏的符号，然后在左边的模块选择kernelbase.dll，接着在右边搜索框输入关键词查找，看到IsDebuggerPresent() 函数后，双击即可进入函数内部</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Windows 7中，IsDebuggerPresent() API是在Kernelbase.dll中实现的。而在Windows XP及以前版本的操作系统中，它是在Kernel32.dll中实现的。</p></blockquote>\n<p><img src=\"/./PEB.BeingDebugged/%E6%9F%A5%E6%89%BEkernelbase!IsDebuggerPresent().png\" alt=\"查找kernelbase!IsDebuggerPresent()\"></p>\n<p>②IsDebuggerPresent() 函数内部首先使用FS:[30]获取PEB结构体地址，图中为003B1000，然后再获取PEB.BeingDebugged成员的值（即003B1000+0x2&#x3D;003B1002地址处的值），图中为1（TRUE），表示当前进程处于调试状态。</p>\n<p><img src=\"/./PEB.BeingDebugged/kernelbase!IsDebuggerPresent(\" alt=\"kernelbase!IsDebuggerPresent() API函数内部\"> API函数内部.png)</p>\n<h5 id=\"PEB-ImageBaseAddress（-0x8）\"><a href=\"#PEB-ImageBaseAddress（-0x8）\" class=\"headerlink\" title=\"PEB.ImageBaseAddress（+0x8）\"></a>PEB.ImageBaseAddress（+0x8）</h5><p>PEB.ImageBaseAddress成员用来表示进程的ImageBase，GetModuleHandle() API用来获取ImageBase。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HMODULE WINAPI <span class=\"title function_\">GetModuleHandle</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t__in_opt LPCTSTR lpModuleName</span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>向lpModuleName参数赋值为NULL，调用GetModuleHandle() 函数将返回进程被加载的ImageBase。<br>如下图所示，GetModuleHandle() 函数内部首先判断传入的参数（[ebp+8]）是否为0（NULL），若是，则跳转到75DE8E56处；跟踪到75DE8E56处可以看到，首先使用FS:[18]获取TEB的地址并赋值给eax，然后再通过[eax+30]获取PEB结构体的地址并赋值给eax，最后听过[eax+8]获取PEB.ImageBaseAddress成员的值并赋值给eax（函数的返回值）。</p>\n<p><img src=\"/./PEB.ImageBaseAddress/GetModuleHandle(\" alt=\"GetModuleHandle() API函数内部\"> API函数内部.png)</p>\n<h5 id=\"PEB-Ldr（-0xC）\"><a href=\"#PEB-Ldr（-0xC）\" class=\"headerlink\" title=\"PEB.Ldr（+0xC）\"></a>PEB.Ldr（+0xC）</h5><p>PEB.Ldr成员是指向_PEB_LDR_DATA结构体的指针，使用Windbg调试器命令<code>dt _PEB_LDR_DATA</code>查看<code>_PEB_LDR_DATA</code>结构体成员如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; dt _PEB_LDR_DATA</span><br><span class=\"line\">ntdll!_PEB_LDR_DATA</span><br><span class=\"line\">   +0x000 Length           : Uint4B</span><br><span class=\"line\">   +0x004 Initialized      : UChar</span><br><span class=\"line\">   +0x008 SsHandle         : Ptr32 Void</span><br><span class=\"line\">   +0x00c InLoadOrderModuleList : _LIST_ENTRY</span><br><span class=\"line\">   +0x014 InMemoryOrderModuleList : _LIST_ENTRY</span><br><span class=\"line\">   +0x01c InInitializationOrderModuleList : _LIST_ENTRY</span><br><span class=\"line\">   +0x024 EntryInProgress  : Ptr32 Void</span><br><span class=\"line\">   +0x028 ShutdownInProgress : UChar</span><br><span class=\"line\">   +0x02c ShutdownThreadId : Ptr32 Void</span><br></pre></td></tr></table></figure>\n\n<p>当模块（DLL）加载到进程后，通过PEB.Ldr成员可以直接获取该模块的加载基地址，所以PEB.Ldr是非常重要的成员。</p>\n<p><code>_PEB_LDR_DATA</code>结构体成员中有3个<code>_LIST_ENTRY</code>类型的成员（InLoadOrderModuleList 、InMemoryOrderModuleList、InInitializationOrderModuleList），<code>_LIST_ENTRY</code>结构体的定义如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct _LIST_ENTRY&#123;</span><br><span class=\"line\">\tstruct _LIST_ENTRY *Flink;</span><br><span class=\"line\">    struct _LIST_ENTRY *Blink;</span><br><span class=\"line\">&#125;LIST_ENTRY,*PLIST_ENTRY;</span><br></pre></td></tr></table></figure>\n\n<p>由定义可知，<code>_LIST_ENTRY</code>结构体提供了双向链表机制，链表中保存<code>_LDR_DATA_TABLE_ENTRY</code>结构体的信息，该结构体的定义如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: kd&gt; dt _LDR_DATA_TABLE_ENTRY</span><br><span class=\"line\">ntdll!_LDR_DATA_TABLE_ENTRY</span><br><span class=\"line\">   +0x000 InLoadOrderLinks : _LIST_ENTRY</span><br><span class=\"line\">   +0x008 InMemoryOrderLinks : _LIST_ENTRY</span><br><span class=\"line\">   +0x010 InInitializationOrderLinks : _LIST_ENTRY</span><br><span class=\"line\">   +0x018 DllBase          : Ptr32 Void</span><br><span class=\"line\">   +0x01c EntryPoint       : Ptr32 Void</span><br><span class=\"line\">   +0x020 SizeOfImage      : Uint4B</span><br><span class=\"line\">   +0x024 FullDllName      : _UNICODE_STRING</span><br><span class=\"line\">   +0x02c BaseDllName      : _UNICODE_STRING</span><br><span class=\"line\">   +0x034 Flags            : Uint4B</span><br><span class=\"line\">   +0x038 LoadCount        : Uint2B</span><br><span class=\"line\">   +0x03a TlsIndex         : Uint2B</span><br><span class=\"line\">   +0x03c HashLinks        : _LIST_ENTRY</span><br><span class=\"line\">   +0x03c SectionPointer   : Ptr32 Void</span><br><span class=\"line\">   +0x040 CheckSum         : Uint4B</span><br><span class=\"line\">   +0x044 TimeDateStamp    : Uint4B</span><br><span class=\"line\">   +0x044 LoadedImports    : Ptr32 Void</span><br><span class=\"line\">   +0x048 EntryPointActivationContext : Ptr32 _ACTIVATION_CONTEXT</span><br><span class=\"line\">   +0x04c PatchInformation : Ptr32 Void</span><br><span class=\"line\">   +0x050 ForwarderLinks   : _LIST_ENTRY</span><br><span class=\"line\">   +0x058 ServiceTagLinks  : _LIST_ENTRY</span><br><span class=\"line\">   +0x060 StaticLinks      : _LIST_ENTRY</span><br><span class=\"line\">   +0x068 ContextInformation : Ptr32 Void</span><br><span class=\"line\">   +0x06c OriginalBase     : Uint4B</span><br><span class=\"line\">   +0x070 LoadTime         : _LARGE_INTEGER</span><br></pre></td></tr></table></figure>\n\n<p>每个加载到进程中的DLL模块都有与之对应的<code>_LDR_DATA_TABLE_ENTRY</code>结构体，这些结构体相互链接，最终形成<code>_LIST_ENTRY</code>双向链表。需要注意的是，<code>_PEB_LDR_DATA</code>结构体中存在三种链表，也就是说，存在多个<code>_LDR_DATA_TABLE_ENTRY</code>结构体，并且有3种链接方法可以将它们链接起来。</p>\n<h5 id=\"PEB-ProcessHeap（-0x18）与PEB-NtGlobalFlag（-0x68）\"><a href=\"#PEB-ProcessHeap（-0x18）与PEB-NtGlobalFlag（-0x68）\" class=\"headerlink\" title=\"PEB.ProcessHeap（+0x18）与PEB.NtGlobalFlag（+0x68）\"></a>PEB.ProcessHeap（+0x18）与PEB.NtGlobalFlag（+0x68）</h5><p>PEB.ProcessHeap与PEB.NtGlobalFlag成员应用于反调试技术。若进程处于调试状态，则ProcessHeap与NtGlobalFlag成员就持有特定的值。后面将详细说明。</p>\n","text":"PEB（Process Environment Block，进程环境块） PEB存放进程信息的结构体。 PEB 结构体的定义PEB结构体成员使用Windbg调试...","permalink":"/post/认识PEB","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":9,"path":"api/tags/逆向.json"},{"name":"PEB","slug":"PEB","count":1,"path":"api/tags/PEB.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PEB-%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">PEB 结构体的定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#PEB%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98\"><span class=\"toc-text\">PEB结构体成员</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Win7-x86%E4%B8%AD%EF%BC%9A\"><span class=\"toc-text\">Win7 x86中：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Win10-x64%E4%B8%AD%EF%BC%9A\"><span class=\"toc-text\">Win10 x64中：</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#PEB%E7%9A%84%E9%87%8D%E8%A6%81%E6%88%90%E5%91%98\"><span class=\"toc-text\">PEB的重要成员</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PEB-BeingDebugged%EF%BC%88-0x2%EF%BC%89\"><span class=\"toc-text\">PEB.BeingDebugged（+0x2）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PEB-ImageBaseAddress%EF%BC%88-0x8%EF%BC%89\"><span class=\"toc-text\">PEB.ImageBaseAddress（+0x8）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PEB-Ldr%EF%BC%88-0xC%EF%BC%89\"><span class=\"toc-text\">PEB.Ldr（+0xC）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PEB-ProcessHeap%EF%BC%88-0x18%EF%BC%89%E4%B8%8EPEB-NtGlobalFlag%EF%BC%88-0x68%EF%BC%89\"><span class=\"toc-text\">PEB.ProcessHeap（+0x18）与PEB.NtGlobalFlag（+0x68）</span></a></li></ol></li></ol></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"TLS回调函数","uid":"66da80b7dfd28e13d279b8154dbcb5eb","slug":"TLS回调函数","date":"2022-04-15T07:23:02.000Z","updated":"2025-06-08T15:26:19.727Z","comments":true,"path":"api/articles/TLS回调函数.json","keywords":null,"cover":[],"text":"TLS回调函数TLS（Thread Local Storage，线程局部存储）回调函数常用于反调试 TLSTLS是各线程的独立的数据存储空间。使用TLS技术可在...","permalink":"/post/TLS回调函数","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":9,"path":"api/tags/逆向.json"},{"name":"TLS回调函数","slug":"TLS回调函数","count":1,"path":"api/tags/TLS回调函数.json"},{"name":"PE结构","slug":"PE结构","count":1,"path":"api/tags/PE结构.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"认识TEB","uid":"cd812a002a8157c55aad5231f6135034","slug":"认识TEB","date":"2022-04-08T11:55:04.000Z","updated":"2025-06-08T15:09:36.776Z","comments":true,"path":"api/articles/认识TEB.json","keywords":null,"cover":[],"text":"TEB（Threat Environment Block，线程环境块） TEB指线程环境块，该结构体包含进程中运行线程的各种信息，进程中的每个线程都对应一个TE...","permalink":"/post/认识TEB","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"逆向","slug":"逆向","count":9,"path":"api/tags/逆向.json"},{"name":"TEB","slug":"TEB","count":1,"path":"api/tags/TEB.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}