{"title":"C++逆向——全局类对象","uid":"1329f4c6c2b96d3a354509a097c90b2b","slug":"C++逆向——全局类对象","date":"2023-03-09T13:44:59.000Z","updated":"2025-06-07T18:51:53.810Z","comments":true,"path":"api/articles/C++逆向——全局类对象.json","keywords":null,"cover":[],"content":"<h1 id=\"全局对象\"><a href=\"#全局对象\" class=\"headerlink\" title=\"全局对象\"></a>全局对象</h1><ol>\n<li>生命周期: main 开始之前构造 ,main结束之后析构</li>\n<li>因此在main函数之前初始化,构造属于初始化,因此在<strong>Inititem（c++)</strong> 中构造</li>\n<li>先调用构造函数，然后再通过<strong>atexit</strong>函数注册析构函数，在软件退出的时候调用析构函数。</li>\n<li>在调用析构以前，该全局变量都是有效的。</li>\n</ol>\n<h1 id=\"全局对象构造函数和析构函数的识别\"><a href=\"#全局对象构造函数和析构函数的识别\" class=\"headerlink\" title=\"全局对象构造函数和析构函数的识别\"></a>全局对象构造函数和析构函数的识别</h1><p>源代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">class CPerson</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    CPerson()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = new char[100];</span><br><span class=\"line\">        strcpy_s(m_pszName, 99, &quot;HELLO&quot;);</span><br><span class=\"line\">        m_nAge = 0;</span><br><span class=\"line\">        printf(&quot;%s\\n&quot;, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    CPerson(int nSize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = new char[nSize];</span><br><span class=\"line\">        strcpy_s(m_pszName, nSize - 1, &quot;HELLO&quot;);</span><br><span class=\"line\">        m_nAge = 0;</span><br><span class=\"line\">        printf(&quot;%s\\n&quot;, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~CPerson()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (m_pszName != nullptr) &#123;</span><br><span class=\"line\">            delete[] m_pszName;</span><br><span class=\"line\">            m_pszName = nullptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;%s\\n&quot;, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int  GetAge() const &#123;</span><br><span class=\"line\">        return m_nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void  SetAge(int nAge) &#123;</span><br><span class=\"line\">        m_nAge = nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    char* m_pszName;</span><br><span class=\"line\">    int m_nAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CPerson  g_pObj;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    printf(&quot;main end\\n&quot;);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>ida汇编及伪代码视图：</p>\n<p>1.首先通过Ctrl+E键定位到mainCRTStartup函数，然后再进入<code>__scrt_common_main_seh</code>函数</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/mainCRTStartup%E5%87%BD%E6%95%B0.png\" alt=\"mainCRTStartup函数\"></p>\n<p>2.在<code>__scrt_common_main_seh</code>函数有两个函数用于全局数据的初始化</p>\n<p><code>_initterm_e</code>函数用于对C语言进行初始化</p>\n<p><img src=\"/post/C++%E9%80%86%E5%90%91%E2%80%94%E2%80%94%E5%85%A8%E5%B1%80%E7%B1%BB%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/_initterm_e%E5%87%BD%E6%95%B0.png\" alt=\"_initterm_e函数\"></p>\n<p><code>_initterm</code>函数用于对C++语言进行初始化</p>\n<p><img src=\"/post/C++%E9%80%86%E5%90%91%E2%80%94%E2%80%94%E5%85%A8%E5%B1%80%E7%B1%BB%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/_initterm%E5%87%BD%E6%95%B0.png\" alt=\"_initterm函数\"></p>\n<p>3.全局类对象的<strong>构造代理函数数组</strong>就位于<code>_initterm</code>函数的两个参数之间</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0%E6%95%B0%E7%BB%84.png\" alt=\"构造代理函数\"></p>\n<p>4.构造代理函数数组中保存了全局类的构造代理函数，点击进入其中一个构造代理函数，可以看到其主要就是调用构造函数以及注册析构函数</p>\n<ul>\n<li>构造代理函数</li>\n</ul>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0%E6%95%B0.png\" alt=\"构造代理函数数\"></p>\n<ul>\n<li>析构代理函数</li>\n</ul>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/%E6%9E%90%E6%9E%84%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0.png\" alt=\"析构代理函数\"></p>\n<h2 id=\"传递构造函数的参数\"><a href=\"#传递构造函数的参数\" class=\"headerlink\" title=\"传递构造函数的参数\"></a>传递构造函数的参数</h2><p>构造函数本身是不可以传参数的,所以得生成一个函数,然后靠这个函数传值,这也是全局对象一定会产生构造代理的原因,就算内联还是得产生构造代理。</p>\n<h2 id=\"查找全局对象\"><a href=\"#查找全局对象\" class=\"headerlink\" title=\"查找全局对象\"></a>查找全局对象</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(disable : 4996)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CPerson</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CPerson</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy_s</span>(m_pszName, <span class=\"number\">99</span>, <span class=\"string\">&quot;HELLO&quot;</span>);</span><br><span class=\"line\">        m_nAge = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">CPerson</span>(<span class=\"type\">int</span> nSize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[nSize];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy_s</span>(m_pszName, nSize - <span class=\"number\">1</span>, <span class=\"string\">&quot;HELLO&quot;</span>);</span><br><span class=\"line\">        m_nAge = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">CPerson</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pszName != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span>[] m_pszName;</span><br><span class=\"line\">            m_pszName = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">GetAge</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">SetAge</span><span class=\"params\">(<span class=\"type\">int</span> nAge)</span> </span>&#123;</span><br><span class=\"line\">        m_nAge = nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">char</span>* m_pszName;</span><br><span class=\"line\">    <span class=\"type\">int</span> m_nAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CPerson  g_pObj;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Age:%d\\r\\n&quot;</span>, g_pObj.<span class=\"built_in\">GetAge</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;main end\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/%E6%9F%A5%E6%89%BE%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1_main%E5%87%BD%E6%95%B0.png\" alt=\"查找全局对象_main函数\"></p>\n<p>使用快捷键x<br>查看指定对象 被哪些函数所调用 快速定位全局对象</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB/%E6%9F%A5%E6%89%BE%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1_%E5%AE%9A%E4%BD%8D%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1.png\" alt=\"查找全局对象_定位全局对象\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>因此识别全局对象只需要看main之前有没有构造代理，构造代理里面可以同时初始化多个全局对象,即多个全局对象可以共用一个全局代理函数，如果类本身没有 构造 和析构函数,可以还原成结构体,因为没有区别</p>\n<h1 id=\"全局对象数组\"><a href=\"#全局对象数组\" class=\"headerlink\" title=\"全局对象数组\"></a>全局对象数组</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(disable : 4996)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CPerson</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CPerson</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy_s</span>(m_pszName, <span class=\"number\">99</span>, <span class=\"string\">&quot;HELLO&quot;</span>);</span><br><span class=\"line\">        m_nAge = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">CPerson</span>(<span class=\"type\">int</span> nSize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[nSize];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy_s</span>(m_pszName, nSize - <span class=\"number\">1</span>, <span class=\"string\">&quot;HELLO&quot;</span>);</span><br><span class=\"line\">        m_nAge = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">CPerson</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pszName != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span>[] m_pszName;</span><br><span class=\"line\">            m_pszName = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">GetAge</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">SetAge</span><span class=\"params\">(<span class=\"type\">int</span> nAge)</span> </span>&#123;</span><br><span class=\"line\">        m_nAge = nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">char</span>* m_pszName;</span><br><span class=\"line\">    <span class=\"type\">int</span> m_nAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CPerson  g_pObj;</span><br><span class=\"line\">CPerson  g_pObj2[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Age:%d\\r\\n&quot;</span>, g_pObj.<span class=\"built_in\">GetAge</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;main end\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造代理函数数组\"><a href=\"#构造代理函数数组\" class=\"headerlink\" title=\"构造代理函数数组\"></a>构造代理函数数组</h2><p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84_%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0%E6%95%B0%E7%BB%84.png\" alt=\"全局对象数组_构造代理函数数组\"></p>\n<h2 id=\"对象构造代理函数\"><a href=\"#对象构造代理函数\" class=\"headerlink\" title=\"对象构造代理函数\"></a>对象构造代理函数</h2><p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84_%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0.png\" alt=\"全局对象数组_对象构造代理函数\"></p>\n<h2 id=\"对象析构代理函数\"><a href=\"#对象析构代理函数\" class=\"headerlink\" title=\"对象析构代理函数\"></a>对象析构代理函数</h2><p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84_%E5%AF%B9%E8%B1%A1%E6%9E%90%E6%9E%84%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0.png\" alt=\"全局对象数组_对象析构代理函数\"></p>\n<h2 id=\"对象数组构造代理函数\"><a href=\"#对象数组构造代理函数\" class=\"headerlink\" title=\"对象数组构造代理函数\"></a>对象数组构造代理函数</h2><p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84_%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0.png\" alt=\"全局对象数组_对象数组构造代理函数\"></p>\n<h2 id=\"对象数组析构代理函数\"><a href=\"#对象数组析构代理函数\" class=\"headerlink\" title=\"对象数组析构代理函数\"></a>对象数组析构代理函数</h2><p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84_%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9E%90%E6%9E%84%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0.png\" alt=\"全局对象数组_对象数组析构代理函数\"></p>\n<h1 id=\"全局new对象\"><a href=\"#全局new对象\" class=\"headerlink\" title=\"全局new对象\"></a>全局new对象</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(disable : 4996)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CPerson</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CPerson</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy_s</span>(m_pszName, <span class=\"number\">99</span>, <span class=\"string\">&quot;HELLO&quot;</span>);</span><br><span class=\"line\">        m_nAge = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">CPerson</span>(<span class=\"type\">int</span> nSize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[nSize];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy_s</span>(m_pszName, nSize - <span class=\"number\">1</span>, <span class=\"string\">&quot;HELLO&quot;</span>);</span><br><span class=\"line\">        m_nAge = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">CPerson</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pszName != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span>[] m_pszName;</span><br><span class=\"line\">            m_pszName = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">GetAge</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">SetAge</span><span class=\"params\">(<span class=\"type\">int</span> nAge)</span> </span>&#123;</span><br><span class=\"line\">        m_nAge = nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">char</span>* m_pszName;</span><br><span class=\"line\">    <span class=\"type\">int</span> m_nAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CPerson  g_pObj;</span><br><span class=\"line\">CPerson  g_pObj2[<span class=\"number\">10</span>];</span><br><span class=\"line\">CPerson* g_pObj3 = <span class=\"keyword\">new</span> <span class=\"built_in\">CPerson</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Age:%d\\r\\n&quot;</span>, g_pObj.<span class=\"built_in\">GetAge</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;main end\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造代理函数数组-1\"><a href=\"#构造代理函数数组-1\" class=\"headerlink\" title=\"构造代理函数数组\"></a>构造代理函数数组</h2><p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80new%E5%AF%B9%E8%B1%A1/%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0%E6%95%B0%E7%BB%84.png\" alt=\"构造代理函数数组\"></p>\n<h2 id=\"对象构造代理函数-1\"><a href=\"#对象构造代理函数-1\" class=\"headerlink\" title=\"对象构造代理函数\"></a>对象构造代理函数</h2><p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80new%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0.png\" alt=\"对象构造代理函数\"></p>\n<h2 id=\"对象析构代理函数-1\"><a href=\"#对象析构代理函数-1\" class=\"headerlink\" title=\"对象析构代理函数\"></a>对象析构代理函数</h2><p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80new%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A1%E6%9E%90%E6%9E%84%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0.png\" alt=\"对象析构代理函数\"></p>\n<h2 id=\"对象数组构造代理函数-1\"><a href=\"#对象数组构造代理函数-1\" class=\"headerlink\" title=\"对象数组构造代理函数\"></a>对象数组构造代理函数</h2><p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80new%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0.png\" alt=\"对象数组构造代理函数\"></p>\n<h2 id=\"对象数组析构代理函数-1\"><a href=\"#对象数组析构代理函数-1\" class=\"headerlink\" title=\"对象数组析构代理函数\"></a>对象数组析构代理函数</h2><p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80new%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9E%90%E6%9E%84%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0.png\" alt=\"对象数组析构代理函数\"></p>\n<h2 id=\"new对象构造代理函数\"><a href=\"#new对象构造代理函数\" class=\"headerlink\" title=\"new对象构造代理函数\"></a>new对象构造代理函数</h2><p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%B1%80new%E5%AF%B9%E8%B1%A1/new%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0.png\" alt=\"new对象构造代理函数\"></p>\n<h1 id=\"静态全局对象\"><a href=\"#静态全局对象\" class=\"headerlink\" title=\"静态全局对象\"></a>静态全局对象</h1><p>静态全局对象和普通全局对象没有区别,只是作用域不同 ,因此静态是无法还原的,他只是在编译的时候做检查。<br>对于编译器来说,跟普通全局对象是一样的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#pragma warning(disable : 4996)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class CPerson</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    CPerson()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = new char[100];</span><br><span class=\"line\">        strcpy_s(m_pszName, 99, &quot;HELLO&quot;);</span><br><span class=\"line\">        m_nAge = 0;</span><br><span class=\"line\">        printf(&quot;%s\\n&quot;, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    CPerson(int nSize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = new char[nSize];</span><br><span class=\"line\">        strcpy_s(m_pszName, nSize - 1, &quot;HELLO&quot;);</span><br><span class=\"line\">        m_nAge = 0;</span><br><span class=\"line\">        printf(&quot;%s\\n&quot;, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~CPerson()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (m_pszName != nullptr) &#123;</span><br><span class=\"line\">            delete[] m_pszName;</span><br><span class=\"line\">            m_pszName = nullptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;%s\\n&quot;, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    int  GetAge() const &#123;</span><br><span class=\"line\">        return m_nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void  SetAge(int nAge) &#123;</span><br><span class=\"line\">        m_nAge = nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    char* m_pszName;</span><br><span class=\"line\">    int m_nAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">static CPerson  g_pObj;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    printf(&quot;Age:%d\\r\\n&quot;, g_pObj.GetAge());</span><br><span class=\"line\">    printf(&quot;main end\\n&quot;);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>main函数</li>\n</ul>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E6%80%81%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1/main%E5%87%BD%E6%95%B0.png\" alt=\"main函数\"></p>\n<ul>\n<li>构造代理函数数组</li>\n</ul>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E6%80%81%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1/%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0%E6%95%B0%E7%BB%84.png\" alt=\"构造代理函数数组\"></p>\n<ul>\n<li>构造代理函数</li>\n</ul>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E6%80%81%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1/%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0.png\" alt=\"构造代理函数\"></p>\n<ul>\n<li>析构代理函数</li>\n</ul>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E6%80%81%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1/%E6%9E%90%E6%9E%84%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0.png\" alt=\"析构代理函数\"></p>\n<h1 id=\"静态局部对象\"><a href=\"#静态局部对象\" class=\"headerlink\" title=\"静态局部对象\"></a>静态局部对象</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#pragma warning(disable : 4996)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class CPerson</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    CPerson()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = new char[100];</span><br><span class=\"line\">        strcpy_s(m_pszName, 99, &quot;HELLO&quot;);</span><br><span class=\"line\">        m_nAge = 0;</span><br><span class=\"line\">        printf(&quot;%s\\n&quot;, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    CPerson(int nSize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = new char[nSize];</span><br><span class=\"line\">        strcpy_s(m_pszName, nSize - 1, &quot;HELLO&quot;);</span><br><span class=\"line\">        m_nAge = 0;</span><br><span class=\"line\">        printf(&quot;%s\\n&quot;, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~CPerson()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (m_pszName != nullptr) &#123;</span><br><span class=\"line\">            delete[] m_pszName;</span><br><span class=\"line\">            m_pszName = nullptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;%s\\n&quot;, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    int  GetAge() const &#123;</span><br><span class=\"line\">        return m_nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void  SetAge(int nAge) &#123;</span><br><span class=\"line\">        m_nAge = nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    char* m_pszName;</span><br><span class=\"line\">    int m_nAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    static CPerson  g_pObj;</span><br><span class=\"line\">    printf(&quot;Age:%d\\r\\n&quot;, g_pObj.GetAge());</span><br><span class=\"line\">    printf(&quot;main end\\n&quot;);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h2><p>会<strong>在main函数入口 调用构造代理</strong>,放全局也没问题(老版本就是),前提是不能有变参</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E6%80%81%E5%B1%80%E9%83%A8%E5%AF%B9%E8%B1%A1/main%E5%87%BD%E6%95%B0.png\" alt=\"main函数\"></p>\n<h1 id=\"静态局部变量传变参\"><a href=\"#静态局部变量传变参\" class=\"headerlink\" title=\"静态局部变量传变参\"></a>静态局部变量传变参</h1><p>此时,构造代理只能放main(),不能放全局,通过标志 $TSS0 来判断是否初始化 ,如果&lt;&#x3D; 0 就代表已经初始化,如果没初始化,就会调构造代理,如果已经初始化,就不会调用 不会这个</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(disable : 4996)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CPerson</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CPerson</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy_s</span>(m_pszName, <span class=\"number\">99</span>, <span class=\"string\">&quot;HELLO&quot;</span>);</span><br><span class=\"line\">        m_nAge = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">CPerson</span>(<span class=\"type\">int</span> nSize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_pszName = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[nSize];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy_s</span>(m_pszName, nSize - <span class=\"number\">1</span>, <span class=\"string\">&quot;HELLO&quot;</span>);</span><br><span class=\"line\">        m_nAge = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">CPerson</span>()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_pszName != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span>[] m_pszName;</span><br><span class=\"line\">            m_pszName = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">GetAge</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span>  <span class=\"title\">SetAge</span><span class=\"params\">(<span class=\"type\">int</span> nAge)</span> </span>&#123;</span><br><span class=\"line\">        m_nAge = nAge;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">char</span>* m_pszName;</span><br><span class=\"line\">    <span class=\"type\">int</span> m_nAge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> CPerson <span class=\"title\">g_pObj</span><span class=\"params\">(argc)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Age:%d\\r\\n&quot;</span>, g_pObj.<span class=\"built_in\">GetAge</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;main end\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>main函数</li>\n</ul>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E6%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%BC%A0%E5%8F%98%E5%8F%82/main%E5%87%BD%E6%95%B0.png\" alt=\"main函数\"></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://blog.csdn.net/weixin_50606278/article/details/131650676\">C++RE02-全局类对象</a></p>\n","text":"全局对象 生命周期: main 开始之前构造 ,main结束之后析构 因此在main函数之前初始化,构造属于初始化,因此在Inititem（c++) 中构造 先...","permalink":"/post/C++逆向——全局类对象","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"c++逆向","slug":"c-逆向","count":9,"path":"api/tags/c-逆向.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">全局对象</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%86%E5%88%AB\"><span class=\"toc-text\">全局对象构造函数和析构函数的识别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E9%80%92%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">传递构造函数的参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">查找全局对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">全局对象数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">构造代理函数数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">对象构造代理函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E6%9E%90%E6%9E%84%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">对象析构代理函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">对象数组构造代理函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9E%90%E6%9E%84%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">对象数组析构代理函数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80new%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">全局new对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0%E6%95%B0%E7%BB%84-1\"><span class=\"toc-text\">构造代理函数数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0-1\"><span class=\"toc-text\">对象构造代理函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E6%9E%90%E6%9E%84%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0-1\"><span class=\"toc-text\">对象析构代理函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0-1\"><span class=\"toc-text\">对象数组构造代理函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%9E%90%E6%9E%84%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0-1\"><span class=\"toc-text\">对象数组析构代理函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#new%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">new对象构造代理函数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">静态全局对象</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%B1%80%E9%83%A8%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">静态局部对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#main%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">main函数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%BC%A0%E5%8F%98%E5%8F%82\"><span class=\"toc-text\">静态局部变量传变参</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C++逆向——虚基类指针&&虚基类表 vs 虚函数指针&&虚函数表","uid":"c3ef1bdebe04666f3d364f093474c8aa","slug":"C++逆向——虚基类指针&&虚基类表 vs 虚函数指针&&虚函数表","date":"2023-03-12T11:53:28.000Z","updated":"2025-06-07T18:59:17.248Z","comments":true,"path":"api/articles/C++逆向——虚基类指针&&虚基类表 vs 虚函数指针&&虚函数表.json","keywords":null,"cover":[],"text":"一、虚继承产生的虚基类表指针和虚基类表如下代码：写一个棱形继承，父类Father，子类Son1和Son2虚继承Base，又来一个类Grandson继承Son1和...","permalink":"/post/C++逆向——虚基类指针&&虚基类表 vs 虚函数指针&&虚函数表","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"c++逆向","slug":"c-逆向","count":9,"path":"api/tags/c-逆向.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"C++逆向——抽象类与虚继承","uid":"0eecfedfebb040c00fe24e77372fb210","slug":"C++逆向——抽象类与虚继承","date":"2023-03-03T08:12:53.000Z","updated":"2025-06-07T18:34:32.830Z","comments":true,"path":"api/articles/C++逆向——抽象类与虚继承.json","keywords":null,"cover":[],"text":"抽象类在编码过程中，抽象类的定义需要配合虚函数使用。在虚函数的声明结尾处添加“=0”，这种虚函数被称为纯虚函数。纯虚函数是一个没有实现只有声明的函数，它的存在就...","permalink":"/post/C++逆向——抽象类与虚继承","photos":[],"count_time":{"symbolsCount":"48k","symbolsTime":"44 mins."},"categories":[],"tags":[{"name":"c++逆向","slug":"c-逆向","count":9,"path":"api/tags/c-逆向.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}