{"title":"编译器扩展的SEH","uid":"aa231c03641d31bfb6874bcdc873cd1e","slug":"编译器扩展的SEH","date":"2022-04-25T13:28:03.000Z","updated":"2025-06-08T15:42:15.590Z","comments":true,"path":"api/articles/编译器扩展的SEH.json","keywords":null,"cover":[],"content":"<p>注：vc6++的异常处理函数为except_handler3，visual stdio的异常处理函数为except_handler4（具体见基于Visual Stdio2019的例子）</p>\n<h1 id=\"编译器对SEH的支持\"><a href=\"#编译器对SEH的支持\" class=\"headerlink\" title=\"编译器对SEH的支持\"></a>编译器对SEH的支持</h1><p>首先来回顾一下，原先挂一个SEH到链表上的步骤是怎样的。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/SEH%E7%9A%84%E6%94%AF%E6%8C%81/%E5%8E%9F%E5%85%88%E6%8C%82%E5%85%A5%E9%93%BE%E8%A1%A8.png\" alt=\"img\"></p>\n<p>再来看看编译器扩展SEH后是如何实现的，以Visual C++ 6.0为例</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/SEH%E7%9A%84%E6%94%AF%E6%8C%81/%E7%BC%96%E8%AF%91%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84SEH%E6%8C%82%E5%85%A5%E9%93%BE%E8%A1%A8.png\" alt=\"img\"></p>\n<p>可以看到，简化了非常多，关键字try形成了一个区块，<strong>只需要将可能出现异常的代码放入这个try块里，编译器会替我们将异常处理程序嵌入到SEH结构体中，并将其挂入局部SEH链表内</strong>。</p>\n<h1 id=\"过滤表达式\"><a href=\"#过滤表达式\" class=\"headerlink\" title=\"过滤表达式\"></a>过滤表达式</h1><p>except使用<strong>过滤表达式来判断当前异常处理程序是否可以处理该异常</strong>。</p>\n<h2 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h2><p>except里的过滤表达式，只能是以下3个值中的一个：</p>\n<ul>\n<li>EXCEPTION_EXECUTE_HANDLER(1)：执行except中的异常处理代码 。</li>\n<li>EXCEPTION_CONTINUE_SEARCH(0)：寻找下一个异常处理函数。</li>\n<li>EXCEPTION_CONTINUE_EXECUTION(-1)：返回至异常错误处并重新执行。</li>\n</ul>\n<h2 id=\"形式\"><a href=\"#形式\" class=\"headerlink\" title=\"形式\"></a>形式</h2><p>过滤表达式有3种写法：</p>\n<ul>\n<li><p>直接写常量值：这个比较好理解，就是填过滤表达式取值中的一个。</p>\n</li>\n<li><p><strong>表达式</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_try</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        xor edx,edx</span><br><span class=\"line\">        xor ecx,ecx</span><br><span class=\"line\">        mov eax,10</span><br><span class=\"line\">        idiv ecx\t\t//EDX = (EAX/ECX)取余</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//如果异常码为0xC0000094返回1否则返回0</span><br><span class=\"line\">_except(GetExceptionCode() == 0xC0000094 ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    printf(&quot;如果出现异常 此处处理\\n&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>表达式的写法相较于常量值，就是换了一种形式，它并没有做处理，但是多了逻辑判断。</p>\n</li>\n<li><p><strong>调用函数写法</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//参数根据需要来写,可以不要参数</span><br><span class=\"line\">int ExceptFilter(LPEXCEPTION_POINTERS pExceptionInfo)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpExceptionInfo-&gt;ContextRecord-&gt;Ecx = 1;\t//异常处理</span><br><span class=\"line\">\treturn EXCEPTION_CONTINUE_EXECUTION;\t//返回出错位置重新执行</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_try</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_asm</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\txor edx,edx</span><br><span class=\"line\">\t\t\txor ecx,ecx</span><br><span class=\"line\">\t\t\tmov eax,10</span><br><span class=\"line\">\t\t\tidiv ecx\t\t//EDX = (EAX/ECX)取余</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    \t//GetExceptionInformation获取异常结构指针</span><br><span class=\"line\">\t_except(ExceptFilter(GetExceptionInformation()))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;如果出现异常 此处处理\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用函数的方式，过滤表达式的值其实就是异常处理函数的返回值<strong>，因此采用调用函数的方式，就相当于编写SEH的handler。那么问题来了，在采用调用函数的写法下，</strong>已经有异常处理函数了，那么except内部的处理会执行吗**？</p>\n<p>这要<strong>取决于异常处理函数的返回值</strong>了，也就是过滤表达式的取值。以上面的代码为例，由于返回值是EXCEPTION_CONTINUE_EXECUTION，所以异常处理函数执行完后，会回到异常处执行，这时由于修改了Ecx的值，因此再次执行时不会发生异常，也就不会再跳转到except处执行了。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E5%BC%8F/%E8%BF%87%E6%BB%A4%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%A4%BA%E4%BE%8B.png\" alt=\"img\"></p>\n<p>那么问题又来了，<strong>既然异常处理函数已经实现了功能，为什么还要有except区块呢？</strong></p>\n<p>其实这里的关键在于<strong>GetExceptionInformation函数，调用它可以获取到异常结构的指针</strong>，从而获取到异常发生时记录的信息以及上下文环境，若没有异常处理函数，那么在except函数内部也可以调用GetExceptionInformation获取到相关的参数，从而对异常进行处理。同样，<strong>如果异常处理函数的返回值为EXCEPTION_CONTINUE_HANDLER，则会在异常函数处理完之后，跳转到except块中执行</strong>。大部分情况下，使用except块进行处理异常是足够的，它可以让3环程序员打印出必要的信息，起到调试的作用，并不会像异常处理函数那样，修改真正的寄存器的值，使得程序重新执行。也因此，大部分表达式的值，最终都是1，这样就直接进入except执行。</p>\n</li>\n</ul>\n<h1 id=\"try-except实现细节\"><a href=\"#try-except实现细节\" class=\"headerlink\" title=\"_try_except实现细节\"></a>_try_except实现细节</h1><h2 id=\"手动挂入\"><a href=\"#手动挂入\" class=\"headerlink\" title=\"手动挂入\"></a><strong>手动挂入</strong></h2><p>首先我们来回顾一下手动挂入链表的过程：</p>\n<p><img src=\"/./_try_except%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/%E6%89%8B%E5%8A%A8%E6%8C%82%E5%85%A5%E9%93%BE%E8%A1%A8.png\" alt=\"img\"></p>\n<p>由图，<strong>手动挂入链表需要自身SEH结构的地址赋值给FS:[0]的位置，这样相当于把自己挂到链表首位</strong>。当然，还需要将自己的next指针指向原先FS:[0]处所指向的地址，这里没有显示出。</p>\n<h2 id=\"自动挂入\"><a href=\"#自动挂入\" class=\"headerlink\" title=\"自动挂入\"></a><strong>自动挂入</strong></h2><p>以如下代码为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include </span><br><span class=\"line\"></span><br><span class=\"line\">void TestException()&#123;</span><br><span class=\"line\">\t_try&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_except(1)&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTestException();\t//下断点</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在TestException处下断点，观察反汇编。</p>\n<p><img src=\"/./_try_except%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/TestException%E5%8F%8D%E6%B1%87%E7%BC%96.png\" alt=\"img\"></p>\n<p>可以看到，**_try_except实际上的操作过程与手动挂入链表类似，同样是让FS:[0]指向新的链表头**。接下来，我们来看另一种场景。</p>\n<h2 id=\"try-except嵌套重复\"><a href=\"#try-except嵌套重复\" class=\"headerlink\" title=\"_try_except嵌套重复\"></a>_try_except嵌套重复</h2><p>修改TestException如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void TestException()&#123;</span><br><span class=\"line\">\t_try</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_try</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_except(1)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_except(1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_try</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_except(1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译，下断点，观察反汇编</p>\n<p><a href=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/MultiAndNest.png\"><img src=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/MultiAndNest.png\" alt=\"img\"></a></p>\n<p>会神奇的发现，<strong>在try_except嵌套与重复的情况下（递归不包括，因为递归属于重复调用函数，会挂入多个SEH），经过编译器汇编后，仍然只有一个异常处理函数_except_handler3</strong>（该函数不同编译器不一样，此实验环境为VC6.0），<strong>并且只挂入了一次SEH</strong>。这是什么原因呢？</p>\n<p>原来编译器扩展了SEH结构体，在原先Windows要求下，<strong>SEH结构体至少要包含2个字段（Next：指向下一个SEH块，Handler：异常处理函数）</strong>，其堆栈结构如下所示：</p>\n<p><a href=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/Original.png\"><img src=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/Original.png\" alt=\"img\"></a></p>\n<p>但是经过扩展后的SEH结构体原型如下（稍后会分析该结构体）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct _EXCEPTION_REGISTRATION&#123;</span><br><span class=\"line\">    struct _EXCEPTION_REGISTRATION *prev;</span><br><span class=\"line\">    void (*handler)(PEXCEPTION_RECORD, PEXCEPTION_REGISTRATION, PCONTEXT, PEXCEPTION_RECORD);</span><br><span class=\"line\">    struct scopetable_entry *scopetable;</span><br><span class=\"line\">    int trylevel;</span><br><span class=\"line\">    int _ebp;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这样一来，堆栈的结构也就发生了变化，也就可以对应上之前分析的汇编代码。</p>\n<p><a href=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/Modern.png\"><img src=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/Modern.png\" alt=\"img\"></a></p>\n<p>接下来，研究该结构体的额外字段的作用，便可了解编译器是<strong>如何通过只挂一个SEH实现所有嵌套重复try_except块的功能</strong>。</p>\n<h1 id=\"扩展的-EXCEPTION-REGISTRATION结构体\"><a href=\"#扩展的-EXCEPTION-REGISTRATION结构体\" class=\"headerlink\" title=\"扩展的_EXCEPTION_REGISTRATION结构体\"></a>扩展的_EXCEPTION_REGISTRATION结构体</h1><p>再来看_EXCEPTION_REGISTRATION这个结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct _EXCEPTION_REGISTRATION&#123;</span><br><span class=\"line\">    struct _EXCEPTION_REGISTRATION *prev;</span><br><span class=\"line\">    void (*handler)(PEXCEPTION_RECORD, PEXCEPTION_REGISTRATION, PCONTEXT, PEXCEPTION_RECORD);</span><br><span class=\"line\">    struct scopetable_entry *scopetable;</span><br><span class=\"line\">    int trylevel;</span><br><span class=\"line\">    int _ebp;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>它多出了3个成员，其中最为重要的是scopetable和trylevel这两个字段，先来看scopetable。</p>\n<h2 id=\"ScopeTable\"><a href=\"#ScopeTable\" class=\"headerlink\" title=\"ScopeTable\"></a>ScopeTable</h2><p>scopetable是一个指针，它<strong>指向一个结构体数组</strong>，结构体如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct scopetable_entry</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDWORD previousTryLevel\t\t//上一个try&#123;&#125;结构编号\t\t </span><br><span class=\"line\">\tPDWRD lpfnFilter\t\t//过滤函数的起始地址\t\t</span><br><span class=\"line\">\tPDWRD lpfnHandler\t\t//异常处理程序的地址\t   \t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这三个成员的含义如何理解呢？根据注释，知道它是两个指针以及1个编号。下面用一个程序理清他们的作用。</p>\n<p>编译运行如下代码（环境VC++6.0），并在a函数调用处设下断点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include </span><br><span class=\"line\"></span><br><span class=\"line\">int ExceptionFilter()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn EXCEPTION_CONTINUE_EXECUTION;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void a()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_try</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t//异常点A</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_except(EXCEPTION_EXECUTE_HANDLER)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;异常处理函数A\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_try</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t//异常点B</span><br><span class=\"line\">\t\t_try</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t//异常点C\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_except(GetExceptionCode() == 0xC0000094 ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t\tprintf(&quot;异常处理函数C \\n&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_except(ExceptionFilter())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;异常处理函数B\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ta();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>进入反汇编，根据_EXCEPTION_REGISTRATION结构的位置，找到scopetable的值，并在内存中定位到scopetable指向的结构体数组地址，如下图所示：</p>\n<p><img src=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/scopetable_1.png\" alt=\"img\"></p>\n</li>\n<li><p>将数组中各结构体的成员标出后如下图：</p>\n<p><img src=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/scopetable_2.png\" alt=\"img\"></p>\n<p>这样来看，lpfnFilter与lpfnHandler的作用就清晰了很多：</p>\n<ul>\n<li>lpfnFilter：<strong>指向except括号内的内容</strong>，在<a href=\"https://cataloc.gitee.io/blog/2020/08/24/%E7%BC%96%E8%AF%91%E5%99%A8%E6%89%A9%E5%B1%95SEH/#%E8%BF%87%E6%BB%A4%E8%A1%A8%E8%BE%BE%E5%BC%8F\">前一篇文章</a>中提到过滤表达式，也就是<strong>except括号内常量值</strong>，这里<strong>编译器将其优化成了一段可以返回的代码</strong>（注意ret指令），所以当异常发生时，代码已经不是顺序执行的了，而是会经过多次跳转和返回。</li>\n<li>lpfnHandler：<strong>指向异常处理函数</strong>，这就相当于默认SEH结构的Handler的值。</li>\n</ul>\n<p>综上，可以看出，<strong>之所以经过编译器扩展后仅有一个SEH块，原因是编译器通过对SEH块进行扩展，将每一个try_except块对应的过滤表达式与异常处理函数放到了scopetable指向的结构体数组中</strong>。这样就能在一个SEH块中容纳下多个try_except。</p>\n</li>\n<li><p>前面提到了scopetable中的两个指针成员lpfnFilter与lpfnHandler，还有一个成员previousTryLevel还未提。这个成员有什么用呢？再回顾一下，这3个try_except块对应的previousTryLevel的值</p>\n<p><img src=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/scopetable_3.png\" alt=\"img\"></p>\n<p>结合之前的一张图，可以看出两个值为-1的previousTryLevel对应两个外层的try_except块，值为1的previousTryLevel则对应内嵌在第二个try_except中的try_except块。这样就能理解了，<strong>previousTryLevel指的是当前try_except块所在的外层try_except块的下标是多少</strong>。例如前两个try_except块，它们的外层已经没有try_except块了，因此值为-1。<strong>内嵌的try_except块，位于第二个try_except块中，这里说的第二个的意思就是在scopetable指向的结构体数组中位于第二个，也就是下标为1。因此内嵌的try_except的previousTryLevel的值为1</strong>。</p>\n</li>\n</ol>\n<h2 id=\"TryLevel\"><a href=\"#TryLevel\" class=\"headerlink\" title=\"TryLevel\"></a>TryLevel</h2><p>理解了scopetable及其指向的结构体内的字段后，trylevel也就好理解了。它<strong>指的是当前代码执行到哪个try_except块了</strong>。如何理解呢？来看下面代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include </span><br><span class=\"line\"></span><br><span class=\"line\">int ExceptionFilter()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void a()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_try</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_try</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_except(EXCEPTION_EXECUTE_HANDLER)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tprintf(&quot;异常处理函数\\n&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_except(EXCEPTION_EXECUTE_HANDLER)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;异常处理函数\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t_try</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_try</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_except(GetExceptionCode() == 0xC0000094 ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t\tprintf(&quot;异常处理函数\\n&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_except(ExceptionFilter())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;异常处理函数\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ta();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样在调用函数a处下断点，并进入反汇编。</p>\n<p><a href=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/trylevel_1.png\"><img src=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/trylevel_1.png\" alt=\"img\"></a></p>\n<p>可以看到，在初始化SEH结构体时，trylevel的值被设置为-1，位于[ebp-4]的位置。</p>\n<p><a href=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/trylevel_2.png\"><img src=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/trylevel_2.png\" alt=\"img\"></a></p>\n<p>观察这几处trylevel值的变化，<strong>它在进入第一个try_except块时，被设置为0（该try_except块对应的结构体位于scopetable[0]）</strong>，在进入第二个try_except块时，又被设置成了1，一旦离开第二个try_except块，回到第一个try_except块所在空间时，又被设置成了0，等到了离开第一个try_except块时，被设置成了-1。</p>\n<p><a href=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/trylevel_3.png\"><img src=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/trylevel_3.png\" alt=\"img\"></a></p>\n<p>同样，在执行到另外几个try_except块时，<strong>trylevel也会被设置成该try_except块位于scopetable指向的结构体数组中的下标。</strong>所以可以看出，<strong>trylevel的作用，就是用来表明，当前程序位于哪个try_except块中</strong>，若不位于try_except块中，则设置为-1。</p>\n<h2 id=\"ebp\"><a href=\"#ebp\" class=\"headerlink\" title=\"ebp\"></a>ebp</h2><p>ebp就是ebp，可以认为是寻址用的，例如[ebp-4]就是trylevel的值。</p>\n<h1 id=\"except-handler3执行过程\"><a href=\"#except-handler3执行过程\" class=\"headerlink\" title=\"_except_handler3执行过程\"></a>_except_handler3执行过程</h1><p>至此，已经基本上了解一个异常处理的完整流程，这里就简单的回顾一遍这个过程。这里<strong>以用户触发除零异常为例</strong>：</p>\n<ol>\n<li>CPU检测到异常</li>\n<li>查询IDT表，执行中断处理函数</li>\n<li>CommonDispatchException</li>\n<li>KiDispatchException</li>\n<li>KiDebugRoutine（判断内核调试器）</li>\n<li>DbgkForwardException（判断用户调试器）</li>\n<li>KiUserExceptionDispatcher</li>\n<li>RtlDispatchException（3环）</li>\n<li>VEH</li>\n<li>SEH</li>\n<li>执行_except_handler3函数<ul>\n<li>根据trylevel选择scopetable数组中的结构体</li>\n<li>调用scopetable数组中对应结构体的lpfnFilter<ul>\n<li>EXCEPTION_EXECUTE_HANDLER(1) 执行except代码</li>\n<li>EXCEPTION_CONTINUE_SEARCH(0) 寻找下一个</li>\n<li>EXCEPTION_CONTINUE_EXECUTION(-1) 重新执行</li>\n</ul>\n</li>\n<li><strong>如果lpfnFilter函数返回0，则向上遍历，直到previousTryLevel为-1</strong></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"try-finally\"><a href=\"#try-finally\" class=\"headerlink\" title=\"_try_finally\"></a>_try_finally</h1><h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_try&#123;</span><br><span class=\"line\">\t//可能出错的代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_finally&#123;</span><br><span class=\"line\">\t//一定要执行的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>正如注释所示，<strong>try_finally块的特点就是在finally块里的代码一定会得到执行</strong>。</p>\n<p><a href=\"https://cata1oc.github.io/2020/08/27/%E5%B1%80%E9%83%A8%E5%B1%95%E5%BC%80%E4%B8%8E%E5%85%A8%E5%B1%80%E5%B1%95%E5%BC%80/tryfinally.png\"><img src=\"https://cata1oc.github.io/2020/08/27/%E5%B1%80%E9%83%A8%E5%B1%95%E5%BC%80%E4%B8%8E%E5%85%A8%E5%B1%80%E5%B1%95%E5%BC%80/tryfinally.png\" alt=\"img\"></a></p>\n<p>观察上图，无论使用continue，break这样的控制语句，还是return这样的返回语句，亦或是触发异常，<strong>finally块内的语句始终会被执行</strong>。正如同前一篇分析讨论try_except的实现细节一样，本篇也将从反汇编的角度，分析try_finally的实现细节。</p>\n<h1 id=\"局部展开函数——-local-unwind2\"><a href=\"#局部展开函数——-local-unwind2\" class=\"headerlink\" title=\"局部展开函数——_local_unwind2\"></a>局部展开函数——_local_unwind2</h1><h2 id=\"scopetable\"><a href=\"#scopetable\" class=\"headerlink\" title=\"scopetable\"></a>scopetable</h2><p>以return为例，观察反汇编，看程序是如何在return执行语句的控制下，仍然执行了finally语句块的内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include </span><br><span class=\"line\"></span><br><span class=\"line\">void test()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_try&#123;</span><br><span class=\"line\">\t\treturn;</span><br><span class=\"line\">\t\tprintf(&quot;其它代码\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_finally&#123;</span><br><span class=\"line\">\t\tprintf(&quot;一定会执行的代码\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ttest();</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在test()函数处下断点，编译并执行函数（环境Visual C++6.0）</p>\n<p><a href=\"https://cata1oc.github.io/2020/08/27/%E5%B1%80%E9%83%A8%E5%B1%95%E5%BC%80%E4%B8%8E%E5%85%A8%E5%B1%80%E5%B1%95%E5%BC%80/scopetable.png\"><img src=\"https://cata1oc.github.io/2020/08/27/%E5%B1%80%E9%83%A8%E5%B1%95%E5%BC%80%E4%B8%8E%E5%85%A8%E5%B1%80%E5%B1%95%E5%BC%80/scopetable.png\" alt=\"img\"></a></p>\n<p>由图，根据scopetable指向的地址，会发现它指向的结构体与try_except时不太一样。<strong>因为try_finally没有过滤表达式，因此第二个成员的值是空的</strong>。再看<strong>第三个成员，指向finally块内程序的地址</strong>。这下我们就知道finally块内的语句从哪里可以找到。那么问题来了，编译器是如何保证在return掉程序之前，执行finally块内的语句的呢？</p>\n<h2 id=\"local-unwind2\"><a href=\"#local-unwind2\" class=\"headerlink\" title=\"_local_unwind2\"></a>_local_unwind2</h2><p>继续观察反汇编，注意到，<strong>在执行return语句之前，调用了一个名为_local_unwind2的函数</strong>。这里需要说明一点，<strong>为什么这个过程被称作局部展开，原因就是在于这个函数翻译成中文就是局部展开的意思，没有别的含义</strong>。这地方很容易产生误解，局部展开不是一种技术，就是一个函数名而已。</p>\n<p>进入_local_unwind2函数，继续分析</p>\n<p><a href=\"https://cata1oc.github.io/2020/08/27/%E5%B1%80%E9%83%A8%E5%B1%95%E5%BC%80%E4%B8%8E%E5%85%A8%E5%B1%80%E5%B1%95%E5%BC%80/localunwind_2.png\"><img src=\"https://cata1oc.github.io/2020/08/27/%E5%B1%80%E9%83%A8%E5%B1%95%E5%BC%80%E4%B8%8E%E5%85%A8%E5%B1%80%E5%B1%95%E5%BC%80/localunwind_2.png\" alt=\"img\"></a></p>\n<p>注意最后一行，_local_unwind2调用了一个地址，单步到这条指令，根据寄存器内的值，可以很容易的算出，这个地址（看前一张图），刚好就是finally块内语句的地址。也就是说，<strong>local_unwind2函数的作用就是执行finally块内的语句</strong>。又因为这个local_unwind2会在return执行前被调用（break, continue, 异常同理），因此finally块内的语句一定会被执行。</p>\n<h1 id=\"全局展开\"><a href=\"#全局展开\" class=\"headerlink\" title=\"全局展开\"></a>全局展开</h1><p>有局部，就会有全局，就像SEH与VEH一样。那什么是全局展开呢？查看下面一种情况：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include </span><br><span class=\"line\"></span><br><span class=\"line\">void test()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t_try</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_try</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t_try</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t*(int*)0 = 10;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t_finally</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tprintf(&quot;一定会执行的代码A\\n&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_finally</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tprintf(&quot;一定会执行的代码B\\n&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t_except(1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;异常处理函数\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ttest();</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在前面学习了并了解了try_except的本质后，以_except_handler3执行的角度来看这段代码：<strong>异常发生在最内层的try块中，此时except_handler3函数会根据当前trylevel的值找到对应的结构体并寻找异常处理函数，这时发现，结构体的第二个成员的值为空，说明这是一个finally块，不会处理异常，因此它将根据当前结构体的previousTryLevel的值，去找中间一层的try块对应的结构体。</strong>同样，在中间一层的try块中也没找到异常处理函数，这时它就会去最外层的try块中找，这时，找到了。</p>\n<p>按照之前了解的_except_handler3的执行流程，<strong>由于过滤表达式的值为1，因此会执行except内的代码，那么一旦执行完except的代码，程序将退出try块，那么问题来了，内层try块的语句，不就得不到执行了吗？</strong></p>\n<p><a href=\"https://cata1oc.github.io/2020/08/27/%E5%B1%80%E9%83%A8%E5%B1%95%E5%BC%80%E4%B8%8E%E5%85%A8%E5%B1%80%E5%B1%95%E5%BC%80/globalunwind_1.png\"><img src=\"https://cata1oc.github.io/2020/08/27/%E5%B1%80%E9%83%A8%E5%B1%95%E5%BC%80%E4%B8%8E%E5%85%A8%E5%B1%80%E5%B1%95%E5%BC%80/globalunwind_1.png\" alt=\"img\"></a></p>\n<p>可以看到，finally块内的语句都得到了执行，接下来，跟进汇编，看看编译器的如何做到的。在_except(1)处下断，运行程序：</p>\n<p><a href=\"https://cata1oc.github.io/2020/08/27/%E5%B1%80%E9%83%A8%E5%B1%95%E5%BC%80%E4%B8%8E%E5%85%A8%E5%B1%80%E5%B1%95%E5%BC%80/globalunwind_2.png\"><img src=\"https://cata1oc.github.io/2020/08/27/%E5%B1%80%E9%83%A8%E5%B1%95%E5%BC%80%E4%B8%8E%E5%85%A8%E5%B1%80%E5%B1%95%E5%BC%80/globalunwind_2.png\" alt=\"img\"></a></p>\n<p>在执行完过滤表达式的语句后，可以单步到这里。发现，在这里调用了一个global_unwind2（全局展开）函数，并且接下来也调用了2次local_unwind2，这些都发生在执行except块的代码之前。这样就好理解了，<strong>当_except_handler3函数发现except内的过滤表达式值为1时，它会先执行global_unwind2，global_unwind2会从触发异常的那个try开始，依次调用局部展开</strong>，这样就可以保证finally块语句一定会得到执行。</p>\n<h1 id=\"基于Visual-Stdio-2019的例子\"><a href=\"#基于Visual-Stdio-2019的例子\" class=\"headerlink\" title=\"基于Visual Stdio 2019的例子\"></a>基于Visual Stdio 2019的例子</h1><h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><p>咱们先看看增强版的数据结构，跟之前的原始版本有很多相似之处：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">EXCEPTION_REGISTRATION</span> <span class=\"title\">PEXCEPTION_REGISTRATION</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">EXCEPTION_REGISTRATION</span>&#123;</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">EXCEPTION_REGISTRATION</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\">   <span class=\"type\">void</span> (*handler)(PEXCEPTION_RECORD, PEXCEPTION_REGISTRATION, PCONTEXT, PEXCEPTION_RECORD);</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">scopetable_entry</span> *<span class=\"title\">scopetable</span>;</span></span><br><span class=\"line\">   <span class=\"type\">int</span> trylevel;</span><br><span class=\"line\">   <span class=\"type\">int</span> _ebp;</span><br><span class=\"line\">   PEXCEPTION_POINTERS xpointers;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这个 EXCEPTION_REGISTRATION 在增强版中就相当于原始版本中的 EXCEPTION_REGISTRATION_RECORD。可以这么理解它：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">EXCEPTION_REGISTRATION</span>&#123;</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">EXCEPTION_REGISTRATION_RECORD</span> <span class=\"title\">ExceptionRegistrationRecord</span>;</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">scopetable_entry</span> *<span class=\"title\">scopetable</span>;</span></span><br><span class=\"line\">   <span class=\"type\">int</span> trylevel;</span><br><span class=\"line\">   <span class=\"type\">int</span> _ebp;</span><br><span class=\"line\">   PEXCEPTION_POINTERS xpointers;</span><br><span class=\"line\">&#125;; <span class=\"comment\">// 注：本结构体只用于理解原始版和增强版的区别，实际代码中并没有这种形式的定义        </span></span><br></pre></td></tr></table></figure>\n\n<p>也就是说它沿用了老版本的注册信息结构，只是在域成员名称上做了些改动，把 Next 改名为 prev，把 Handler 改为 handler。除此之外，在原始版本基础上增加了4个域成员（scopetable、trylevel、_ebp、xpointers），用来支持它的增强功能。</p>\n<p>需要说明的是，这结构体来源于 MSC 的 crt 源码里的 exsup.inc，这个文件使用的是汇编语法，该结构体定义是从该文件的注释中提取出来。在实际的分析过程中，发现它的定义有一些问题：最后一个域成员 xpointers 实际上存放在 prev 之前，也就是说，实际中 __try 增强版用的结构体是这样的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">EXCEPTION_REGISTRATION</span> <span class=\"title\">PEXCEPTION_REGISTRATION</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">EXCEPTION_REGISTRATION</span>&#123;</span></span><br><span class=\"line\">   PEXCEPTION_POINTERS xpointers;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">EXCEPTION_REGISTRATION</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\">   <span class=\"type\">void</span> (*handler)(PEXCEPTION_RECORD, PEXCEPTION_REGISTRATION, PCONTEXT, PEXCEPTION_RECORD);</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">scopetable_entry</span> *<span class=\"title\">scopetable</span>;</span></span><br><span class=\"line\">   <span class=\"type\">int</span> trylevel;</span><br><span class=\"line\">   <span class=\"type\">int</span> _ebp;</span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SEH-scopetable\"><a href=\"#SEH-scopetable\" class=\"headerlink\" title=\"SEH scopetable\"></a>SEH scopetable</h2><p>scopetable指向了一个用于描述函数中所有__try代码块的数组。在SEH4中，scopetable是一个被加密过后的scopetable的地址（xor cookie）</p>\n<p><strong>filterfunc指向异常过滤函数（__except中的表达式），handlerfunc指向except代码块。</strong></p>\n<p><strong>如果filterdunc是NULL，那么Handlerfunc就指向__finally代码块。</strong></p>\n<p>具体有多少个try，体现在trylevel中。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">EH4_SCOPETABLE</span> &#123;</span></span><br><span class=\"line\">        DWORD GSCookieOffset;</span><br><span class=\"line\">        DWORD GSCookieXOROffset;</span><br><span class=\"line\">        DWORD EHCookieOffset;</span><br><span class=\"line\">        DWORD EHCookieXOROffset;</span><br><span class=\"line\">        _EH4_SCOPETABLE_RECORD ScopeRecord[n];   <span class=\"comment\">//ScopeRecord数组</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">EH4_SCOPETABLE_RECORD</span> &#123;</span></span><br><span class=\"line\">        DWORD EnclosingLevel;</span><br><span class=\"line\">        <span class=\"type\">long</span> (*FilterFunc)();</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">            <span class=\"type\">void</span> (*HandlerAddress)();</span><br><span class=\"line\">            <span class=\"type\">void</span> (*FinallyFunc)(); </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>\t<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"number\">2</span>\t<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;windows.h&quot;</span></span></span><br><span class=\"line\"><span class=\"number\">3</span>\t<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tchar.h&quot;</span></span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span>\t<span class=\"type\">int</span> <span class=\"title function_\">ExceptionFilter</span><span class=\"params\">()</span></span><br><span class=\"line\">6\t&#123;</span><br><span class=\"line\"><span class=\"number\">7</span>\t    <span class=\"keyword\">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class=\"line\"><span class=\"number\">8</span>\t&#125;</span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">10</span>\t<span class=\"type\">void</span> <span class=\"title function_\">PEB</span><span class=\"params\">()</span></span><br><span class=\"line\">11\t&#123;</span><br><span class=\"line\"><span class=\"number\">12</span>\t\t_try                               <span class=\"comment\">//进入第一个 __try 域</span></span><br><span class=\"line\"><span class=\"number\">13</span>\t\t&#123;   </span><br><span class=\"line\"><span class=\"number\">14</span>\t\t\t<span class=\"comment\">//异常点A</span></span><br><span class=\"line\"><span class=\"number\">15</span>\t\t&#125;</span><br><span class=\"line\"><span class=\"number\">16</span>\t\t_except(EXCEPTION_EXECUTE_HANDLER)     <span class=\"comment\">// 第一个过滤表达式</span></span><br><span class=\"line\"><span class=\"number\">17</span>\t\t&#123;</span><br><span class=\"line\"><span class=\"number\">18</span>\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;异常处理函数A\\n&quot;</span>);           <span class=\"comment\">// 第一个 __except 处理域</span></span><br><span class=\"line\"><span class=\"number\">19</span>\t\t&#125;</span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">21</span>\t\t_try   <span class=\"comment\">//进入第二个 __try 域</span></span><br><span class=\"line\"><span class=\"number\">22</span>\t\t&#123;   </span><br><span class=\"line\"><span class=\"number\">23</span>\t\t\t<span class=\"comment\">//异常点B</span></span><br><span class=\"line\"><span class=\"number\">24</span>\t\t\t_try  <span class=\"comment\">//进入第三个 __try 域</span></span><br><span class=\"line\"><span class=\"number\">25</span>\t\t\t&#123;   </span><br><span class=\"line\"><span class=\"number\">26</span>\t\t\t\t<span class=\"comment\">//异常点C\t</span></span><br><span class=\"line\"><span class=\"number\">27</span>\t\t\t&#125;</span><br><span class=\"line\"><span class=\"number\">28</span>\t\t\t_except(GetExceptionCode() == <span class=\"number\">0xC0000094</span> ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)                       <span class=\"comment\">// 第三个过滤表达式</span></span><br><span class=\"line\"><span class=\"number\">29</span>\t\t\t&#123;</span><br><span class=\"line\"><span class=\"number\">30</span>\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;异常处理函数C \\n&quot;</span>);    <span class=\"comment\">// 第三个 __except 处理域</span></span><br><span class=\"line\"><span class=\"number\">31</span>\t\t\t&#125;</span><br><span class=\"line\"><span class=\"number\">32</span>\t\t&#125;</span><br><span class=\"line\"><span class=\"number\">33</span>\t\t\t_except(ExceptionFilter())           <span class=\"comment\">// 第二个过滤表达式</span></span><br><span class=\"line\"><span class=\"number\">34</span>\t\t&#123;</span><br><span class=\"line\"><span class=\"number\">35</span>\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;异常处理函数B\\n&quot;</span>);             <span class=\"comment\">// 第二个 __except 处理域</span></span><br><span class=\"line\"><span class=\"number\">36</span>\t\t&#125;</span><br><span class=\"line\"><span class=\"number\">37</span>\t&#125;</span><br><span class=\"line\"><span class=\"number\">38</span></span><br><span class=\"line\"><span class=\"number\">39</span>\t<span class=\"type\">int</span> _tmain(<span class=\"type\">int</span> argc, TCHAR* argv[])</span><br><span class=\"line\"><span class=\"number\">40</span>\t&#123;</span><br><span class=\"line\"><span class=\"number\">41</span> \t    PEB();</span><br><span class=\"line\"><span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"number\">43</span>\t    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\npress any key to quit...\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"number\">44</span>\t    _gettch();</span><br><span class=\"line\"><span class=\"number\">45</span>\t</span><br><span class=\"line\"><span class=\"number\">46</span>\t    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">47</span>\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PEB-函数汇编代码\"><a href=\"#PEB-函数汇编代码\" class=\"headerlink\" title=\"PEB()函数汇编代码\"></a>PEB()函数汇编代码</h2><p>汇编中[EBP-4]就是执向ExceptionRegistration-&gt;trylevel</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    10: void PEB()</span><br><span class=\"line\">    11: &#123;</span><br><span class=\"line\">004548E0  push        ebp  </span><br><span class=\"line\">004548E1  mov         ebp,esp </span><br><span class=\"line\">; push ExceptionRegistration-&gt;trylevel = TRYLEVEL_INVALID (-2)</span><br><span class=\"line\">004548E3  push        0FFFFFFFEh</span><br><span class=\"line\">; push ExceptionRegistration-&gt;scopetable</span><br><span class=\"line\">004548E5  push        51A090h</span><br><span class=\"line\">; push ExceptionRegistration-&gt;handler</span><br><span class=\"line\">004548EA  push        offset _except_handler4 (0459130h)  </span><br><span class=\"line\">004548EF  mov         eax,dword ptr fs:[00000000h]</span><br><span class=\"line\">; push _EXCEPTION_REGISTRATION::prev</span><br><span class=\"line\">004548F5  push        eax</span><br><span class=\"line\">; 这里分配了 0xd8 字节的栈空间，其中紧贴着ExceptionRegistration-&gt;prev</span><br><span class=\"line\">; 的4个字节存放着ExceptionRegistration-&gt;xpointers</span><br><span class=\"line\">004548F6  add         esp,0FFFFFF28h  </span><br><span class=\"line\">004548FC  push        ebx  </span><br><span class=\"line\">004548FD  push        esi  </span><br><span class=\"line\">004548FE  push        edi  </span><br><span class=\"line\">004548FF  lea         edi,[ebp-28h]  </span><br><span class=\"line\">00454902  mov         ecx,4  </span><br><span class=\"line\">00454907  mov         eax,0CCCCCCCCh  </span><br><span class=\"line\">0045490C  rep stos    dword ptr es:[edi]</span><br><span class=\"line\">0045490E  mov         eax,dword ptr [__security_cookie (051B004h)]</span><br><span class=\"line\">; 对 scopetable 进行异或加密</span><br><span class=\"line\">00454913  xor         dword ptr [ebp-8],eax</span><br><span class=\"line\">; 对 __security_cookie 进行加密</span><br><span class=\"line\">00454916  xor         eax,ebp</span><br><span class=\"line\">; 把加密了的 __security_cookie 也压入栈中，后面用来对 scopetable 进行解密</span><br><span class=\"line\">00454918  push        eax  </span><br><span class=\"line\">00454919  lea         eax,[ebp-10h]</span><br><span class=\"line\">; 将ExceptionRegistration 挂入线程异常链表中</span><br><span class=\"line\">0045491C  mov         dword ptr fs:[00000000h],eax  </span><br><span class=\"line\">00454922  mov         dword ptr [ebp-18h],esp  </span><br><span class=\"line\">00454925  mov         ecx,offset _787D2F6E_StaAD_PEB@cpp (051F01Bh)  </span><br><span class=\"line\">0045492A  call        @__CheckForDebuggerJustMyCode@4 (0450C42h)  </span><br><span class=\"line\">    12: \t_try</span><br><span class=\"line\">; 进入第一个 __try 域，ExceptionRegistration-&gt;trylevel = 0</span><br><span class=\"line\">0045492F  mov         dword ptr [ebp-4],0  </span><br><span class=\"line\">    13: \t&#123;</span><br><span class=\"line\">    14: \t\t//异常点A</span><br><span class=\"line\">    15: \t&#125;</span><br><span class=\"line\">; 离开第一个 __try 域，ExceptionRegistration-&gt;trylevel = TRYLEVEL_NONE (-2)</span><br><span class=\"line\">00454936  mov         dword ptr [ebp-4],0FFFFFFFEh  </span><br><span class=\"line\">0045493D  jmp         PEB+7Ch (045495Ch)  </span><br><span class=\"line\">    16: \t_except(EXCEPTION_EXECUTE_HANDLER)</span><br><span class=\"line\">; 第一个过滤表达式</span><br><span class=\"line\">; EXCEPTION_EXECUTE_HANDLER==1</span><br><span class=\"line\">0045493F  mov         eax,1   </span><br><span class=\"line\">00454944  ret</span><br><span class=\"line\">; 第一个 __except 处理域</span><br><span class=\"line\">00454945  mov         esp,dword ptr [ebp-18h]  </span><br><span class=\"line\">    17: \t&#123;</span><br><span class=\"line\">    18: \t\tprintf(&quot;异常处理函数A\\n&quot;);</span><br><span class=\"line\">00454948  push        offset string &quot;IsDebuggerPresent() = %d\\n&quot; (04F4E60h)  </span><br><span class=\"line\">0045494D  call        _printf (044EA5Ah)  </span><br><span class=\"line\">00454952  add         esp,4  </span><br><span class=\"line\">    13: \t&#123;</span><br><span class=\"line\">    14: \t\t//异常点A</span><br><span class=\"line\">    15: \t&#125;</span><br><span class=\"line\">; 离开第一个 __except域，ExceptionRegistration-&gt;trylevel = TRYLEVEL_NONE (-2)</span><br><span class=\"line\">00454955  mov         dword ptr [ebp-4],0FFFFFFFEh  </span><br><span class=\"line\">    19: \t&#125;</span><br><span class=\"line\">    20: </span><br><span class=\"line\">    21: \t_try</span><br><span class=\"line\">; 进入第二个 __try 域，ExceptionRegistration-&gt;trylevel = 1</span><br><span class=\"line\">0045495C  mov         dword ptr [ebp-4],1  </span><br><span class=\"line\">    22: \t&#123;</span><br><span class=\"line\">    23: \t\t//异常点B</span><br><span class=\"line\">    24: \t\t_try</span><br><span class=\"line\">; 进入第三个 __try 域，ExceptionRegistration-&gt;trylevel = 2</span><br><span class=\"line\">00454963  mov         dword ptr [ebp-4],2  </span><br><span class=\"line\">    25: \t\t&#123;</span><br><span class=\"line\">    26: \t\t\t//异常点C\t</span><br><span class=\"line\">    27: \t\t&#125;</span><br><span class=\"line\">; 离开第三个 __try 域，ExceptionRegistration-&gt;trylevel = 1</span><br><span class=\"line\">0045496A  mov         dword ptr [ebp-4],1  </span><br><span class=\"line\">00454971  jmp         PEB+0E0h (04549C0h)  </span><br><span class=\"line\">    28: \t\t_except(GetExceptionCode() == 0xC0000094 ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)</span><br><span class=\"line\">; 第三个过滤表达式</span><br><span class=\"line\">00454973  mov         eax,dword ptr [ebp-14h]  </span><br><span class=\"line\">00454976  mov         ecx,dword ptr [eax]  </span><br><span class=\"line\">00454978  mov         edx,dword ptr [ecx]  </span><br><span class=\"line\">0045497A  mov         dword ptr [ebp-0E0h],edx  </span><br><span class=\"line\">00454980  cmp         dword ptr [ebp-0E0h],0C0000094h  </span><br><span class=\"line\">0045498A  jne         PEB+0B8h (0454998h)  </span><br><span class=\"line\">0045498C  mov         dword ptr [ebp-0E8h],1  </span><br><span class=\"line\">00454996  jmp         PEB+0C2h (04549A2h)  </span><br><span class=\"line\">00454998  mov         dword ptr [ebp-0E8h],0  </span><br><span class=\"line\">004549A2  mov         eax,dword ptr [ebp-0E8h]  </span><br><span class=\"line\">004549A8  ret</span><br><span class=\"line\">; 第三个 __except 处理域</span><br><span class=\"line\">004549A9  mov         esp,dword ptr [ebp-18h]  </span><br><span class=\"line\">    29: \t\t&#123;</span><br><span class=\"line\">    30: \t\t\t\tprintf(&quot;异常处理函数C \\n&quot;);</span><br><span class=\"line\">004549AC  push        offset string &quot;\\xd2\\xec\\xb3\\xa3\\xb4\\xa6\\xc0\\xed\\xba\\xaf\\xca\\xfdC \\n&quot; (04F4E80h)  </span><br><span class=\"line\">004549B1  call        _printf (044EA5Ah)  </span><br><span class=\"line\">004549B6  add         esp,4  </span><br><span class=\"line\">    25: \t\t&#123;</span><br><span class=\"line\">    26: \t\t\t//异常点C\t</span><br><span class=\"line\">    27: \t\t&#125;</span><br><span class=\"line\">; 离开第三个__except 处理域域，ExceptionRegistration-&gt;trylevel = 1 </span><br><span class=\"line\">004549B9  mov         dword ptr [ebp-4],1  </span><br><span class=\"line\">    31: \t\t&#125;</span><br><span class=\"line\">    32: \t&#125;</span><br><span class=\"line\">; 离开第二个 __try 域，ExceptionRegistration-&gt;trylevel = TRYLEVEL_NONE (-2)</span><br><span class=\"line\">004549C0  mov         dword ptr [ebp-4],0FFFFFFFEh  </span><br><span class=\"line\">004549C7  jmp         $LN14+17h (04549E6h)  </span><br><span class=\"line\">    33: \t\t_except(ExceptionFilter())</span><br><span class=\"line\">; 第二个过滤表达式    </span><br><span class=\"line\">004549C9  call        ExceptionFilter (045144Eh)</span><br><span class=\"line\">004549CE  ret</span><br><span class=\"line\">; 第二个 __except 处理域</span><br><span class=\"line\">004549CF  mov         esp,dword ptr [ebp-18h]  </span><br><span class=\"line\">    34: \t&#123;</span><br><span class=\"line\">    35: \t\tprintf(&quot;异常处理函数B\\n&quot;);</span><br><span class=\"line\">004549D2  push        offset string &quot;  =&gt; Not debugging...\\n\\n&quot; (04F4E98h)  </span><br><span class=\"line\">004549D7  call        _printf (044EA5Ah)  </span><br><span class=\"line\">004549DC  add         esp,4  </span><br><span class=\"line\">    31: \t\t&#125;</span><br><span class=\"line\">    32: \t&#125;</span><br><span class=\"line\">; 离开第二个 __except域，ExceptionRegistration-&gt;trylevel = TRYLEVEL_NONE (-2)</span><br><span class=\"line\">004549DF  mov         dword ptr [ebp-4],0FFFFFFFEh  </span><br><span class=\"line\">    36: \t&#125;</span><br><span class=\"line\">    37: &#125;</span><br><span class=\"line\">004549E6  mov         ecx,dword ptr [ebp-10h]</span><br><span class=\"line\">; 恢复旧的 EXCEPTION_REGISTRATION。即从线程异常链表中摘除ExceptionRegistration</span><br><span class=\"line\">004549E9  mov         dword ptr fs:[0],ecx  </span><br><span class=\"line\">004549F0  pop         ecx  </span><br><span class=\"line\">004549F1  pop         edi  </span><br><span class=\"line\">004549F2  pop         esi  </span><br><span class=\"line\">004549F3  pop         ebx  </span><br><span class=\"line\">004549F4  add         esp,0E8h  </span><br><span class=\"line\">004549FA  cmp         ebp,esp  </span><br><span class=\"line\">004549FC  call        __RTC_CheckEsp (044FF09h)  </span><br><span class=\"line\">00454A01  mov         esp,ebp  </span><br><span class=\"line\">00454A03  pop         ebp  </span><br><span class=\"line\">00454A04  ret </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"ida汇编结果\"><a href=\"#ida汇编结果\" class=\"headerlink\" title=\"ida汇编结果\"></a>ida汇编结果</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:00401040 ; __unwind &#123; // __except_handler4</span><br><span class=\"line\">.text:00401040                 push    ebp</span><br><span class=\"line\">.text:00401041                 mov     ebp, esp</span><br><span class=\"line\">.text:00401043                 push    0FFFFFFFEh      ; push ExceptionRegistration-&gt;trylevel = TRYLEVEL_INVALID (-2)</span><br><span class=\"line\">.text:00401045                 push    offset stru_4172A8 ; push ExceptionRegistration-&gt;scopetable</span><br><span class=\"line\">.text:0040104A                 push    offset __except_handler4 ; push ExceptionRegistration-&gt;handler</span><br><span class=\"line\">.text:0040104F                 mov     eax, large fs:0</span><br><span class=\"line\">.text:00401055                 push    eax             ; push _EXCEPTION_REGISTRATION::prev</span><br><span class=\"line\">.text:00401056                 sub     esp, 8</span><br><span class=\"line\">.text:00401059                 push    ebx</span><br><span class=\"line\">.text:0040105A                 push    esi</span><br><span class=\"line\">.text:0040105B                 push    edi</span><br><span class=\"line\">.text:0040105C                 mov     eax, ___security_cookie</span><br><span class=\"line\">.text:00401061                 xor     [ebp+ms_exc.registration.ScopeTable], eax ; 对 scopetable([EBP-8]) 进行异或加密</span><br><span class=\"line\">.text:00401064                 xor     eax, ebp        ; 对 __security_cookie 进行加密</span><br><span class=\"line\">.text:00401066                 push    eax             ; 把加密了的 __security_cookie 也压入栈中，后面用来对 scopetable 进行解密</span><br><span class=\"line\">.text:00401067                 lea     eax, [ebp+ms_exc.registration] ; [EBP-10h]</span><br><span class=\"line\">.text:0040106A                 mov     large fs:0, eax ; 将ExceptionRegistration 挂入线程异常链表中</span><br><span class=\"line\">.text:00401070                 mov     [ebp+ms_exc.old_esp], esp</span><br><span class=\"line\">.text:00401073 ;   __try &#123; // __except at loc_401082</span><br><span class=\"line\">.text:00401073                 mov     [ebp+ms_exc.registration.TryLevel], 0 ; 进入第一个 __try 域，ExceptionRegistration-&gt;trylevel = 0</span><br><span class=\"line\">.text:0040107A                 jmp     short loc_401092 ; 未发生异常，离开第一个 __try/__except 域，ExceptionRegistration-&gt;trylevel = TRYLEVEL_NONE (-2)</span><br><span class=\"line\">.text:0040107C ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:0040107C</span><br><span class=\"line\">.text:0040107C loc_40107C:                             ; DATA XREF: .rdata:stru_4172A8↓o</span><br><span class=\"line\">.text:0040107C ;   __except filter // owned by 401073  ; EXCEPTION_EXECUTE_HANDLER==1,第一个过滤表达式</span><br><span class=\"line\">.text:0040107C                 mov     eax, 1</span><br><span class=\"line\">.text:00401081                 retn</span><br><span class=\"line\">.text:00401082 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:00401082</span><br><span class=\"line\">.text:00401082 loc_401082:                             ; DATA XREF: .rdata:stru_4172A8↓o</span><br><span class=\"line\">.text:00401082 ;   __except(loc_40107C) // owned by 401073 ; 第一个 __except 处理域</span><br><span class=\"line\">.text:00401082                 mov     esp, [ebp+ms_exc.old_esp]</span><br><span class=\"line\">.text:00401085                 push    offset aA       ; &quot;异常处理函数A\\n&quot;</span><br><span class=\"line\">.text:0040108A                 call    sub_401010</span><br><span class=\"line\">.text:0040108F                 add     esp, 4</span><br><span class=\"line\">.text:0040108F ;   &#125; // starts at 401073</span><br><span class=\"line\">.text:00401092</span><br><span class=\"line\">.text:00401092 loc_401092:                             ; CODE XREF: sub_401040+3A↑j</span><br><span class=\"line\">.text:00401092                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh ; 离开第一个 __try/__except 域，ExceptionRegistration-&gt;trylevel = TRYLEVEL_NONE (-2)</span><br><span class=\"line\">.text:00401099 ;   __try &#123; // __except at loc_4010E0</span><br><span class=\"line\">.text:00401099                 mov     [ebp+ms_exc.registration.TryLevel], 1 ; 进入第二个 __try 域，ExceptionRegistration-&gt;trylevel = 1</span><br><span class=\"line\">.text:00401099 ;   &#125; // starts at 401099</span><br><span class=\"line\">.text:004010A0 ;   __try &#123; // __except at loc_4010C3</span><br><span class=\"line\">.text:004010A0 ;     __try &#123; // __except at loc_4010E0</span><br><span class=\"line\">.text:004010A0                 mov     [ebp+ms_exc.registration.TryLevel], 2 ;  进入第三个 __try 域，ExceptionRegistration-&gt;trylevel = 2</span><br><span class=\"line\">.text:004010A0 ;     &#125; // starts at 4010A0</span><br><span class=\"line\">.text:004010A0 ;   &#125; // starts at 4010A0</span><br><span class=\"line\">.text:004010A7 ;   __try &#123; // __except at loc_4010E0</span><br><span class=\"line\">.text:004010A7                 mov     [ebp+ms_exc.registration.TryLevel], 1 ; 离开第三个 __try 域，ExceptionRegistration-&gt;trylevel = 1</span><br><span class=\"line\">.text:004010AE                 jmp     short loc_4010F0 ;  未发生异常，离开第二个 __except域，ExceptionRegistration-&gt;trylevel = TRYLEVEL_NONE (-2)</span><br><span class=\"line\">.text:004010B0 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:004010B0</span><br><span class=\"line\">.text:004010B0 loc_4010B0:                             ; DATA XREF: .rdata:stru_4172A8↓o</span><br><span class=\"line\">.text:004010B0 ;   __except filter // owned by 4010A0  ; 第三个过滤表达式</span><br><span class=\"line\">.text:004010B0                 mov     eax, [ebp+ms_exc.exc_ptr]</span><br><span class=\"line\">.text:004010B3                 mov     eax, [eax]</span><br><span class=\"line\">.text:004010B5                 xor     ecx, ecx</span><br><span class=\"line\">.text:004010B7                 cmp     dword ptr [eax], 0C0000094h</span><br><span class=\"line\">.text:004010BD                 setz    cl</span><br><span class=\"line\">.text:004010C0                 mov     eax, ecx</span><br><span class=\"line\">.text:004010C2                 retn</span><br><span class=\"line\">.text:004010C3 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:004010C3</span><br><span class=\"line\">.text:004010C3 loc_4010C3:                             ; DATA XREF: .rdata:stru_4172A8↓o</span><br><span class=\"line\">.text:004010C3 ;   __except(loc_4010B0) // owned by 4010A0 ; 第三个 __except 处理域</span><br><span class=\"line\">.text:004010C3                 mov     esp, [ebp+ms_exc.old_esp]</span><br><span class=\"line\">.text:004010C6                 push    offset aC       ; &quot;异常处理函数C \\n&quot;</span><br><span class=\"line\">.text:004010CB                 call    sub_401010</span><br><span class=\"line\">.text:004010D0                 add     esp, 4</span><br><span class=\"line\">.text:004010D0 ;   &#125; // starts at 4010A7</span><br><span class=\"line\">.text:004010D3 ;   __try &#123; // __except at loc_4010E0</span><br><span class=\"line\">.text:004010D3                 mov     [ebp+ms_exc.registration.TryLevel], 1 ; 离开第三个__except 处理域域，ExceptionRegistration-&gt;trylevel = 1</span><br><span class=\"line\">.text:004010DA                 jmp     short loc_4010F0 ;  离开第二个 __except域，ExceptionRegistration-&gt;trylevel = TRYLEVEL_NONE (-2)</span><br><span class=\"line\">.text:004010DC ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:004010DC</span><br><span class=\"line\">.text:004010DC loc_4010DC:                             ; DATA XREF: .rdata:stru_4172A8↓o</span><br><span class=\"line\">.text:004010DC ;   __except filter // owned by 401099  ; 第二个过滤表达式</span><br><span class=\"line\">.text:004010DC ;   __except filter // owned by 4010A0</span><br><span class=\"line\">.text:004010DC ;   __except filter // owned by 4010A7</span><br><span class=\"line\">.text:004010DC ;   __except filter // owned by 4010D3</span><br><span class=\"line\">.text:004010DC                 or      eax, 0FFFFFFFFh</span><br><span class=\"line\">.text:004010DF                 retn</span><br><span class=\"line\">.text:004010E0 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:004010E0</span><br><span class=\"line\">.text:004010E0 loc_4010E0:                             ; DATA XREF: .rdata:stru_4172A8↓o</span><br><span class=\"line\">.text:004010E0 ;   __except(loc_4010DC) // owned by 401099 ; 第二个 __except 处理域</span><br><span class=\"line\">.text:004010E0 ;   __except(loc_4010DC) // owned by 4010A0</span><br><span class=\"line\">.text:004010E0 ;   __except(loc_4010DC) // owned by 4010A7</span><br><span class=\"line\">.text:004010E0 ;   __except(loc_4010DC) // owned by 4010D3</span><br><span class=\"line\">.text:004010E0                 mov     esp, [ebp+ms_exc.old_esp]</span><br><span class=\"line\">.text:004010E3                 push    offset aB       ; &quot;异常处理函数B\\n&quot;</span><br><span class=\"line\">.text:004010E8                 call    sub_401010</span><br><span class=\"line\">.text:004010ED                 add     esp, 4</span><br><span class=\"line\">.text:004010ED ;   &#125; // starts at 4010D3</span><br><span class=\"line\">.text:004010F0</span><br><span class=\"line\">.text:004010F0 loc_4010F0:                             ; CODE XREF: sub_401040+6E↑j</span><br><span class=\"line\">.text:004010F0                                         ; sub_401040+9A↑j</span><br><span class=\"line\">.text:004010F0                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh ;  离开第二个 __except域，ExceptionRegistration-&gt;trylevel = TRYLEVEL_NONE (-2)</span><br><span class=\"line\">.text:004010F7                 mov     ecx, [ebp+ms_exc.registration.Next] ; 恢复旧的 EXCEPTION_REGISTRATION。即从线程异常链表中摘除ExceptionRegistration</span><br><span class=\"line\">.text:004010FA                 mov     large fs:0, ecx</span><br><span class=\"line\">.text:00401101                 pop     ecx</span><br><span class=\"line\">.text:00401102                 pop     edi</span><br><span class=\"line\">.text:00401103                 pop     esi</span><br><span class=\"line\">.text:00401104                 pop     ebx</span><br><span class=\"line\">.text:00401105                 mov     esp, ebp</span><br><span class=\"line\">.text:00401107                 pop     ebp</span><br><span class=\"line\">.text:00401108                 retn</span><br><span class=\"line\">.text:00401108 ; &#125; // starts at 401040</span><br><span class=\"line\">.text:00401108 sub_401040      endp</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ida识别的scopetable\"><a href=\"#ida识别的scopetable\" class=\"headerlink\" title=\"ida识别的scopetable\"></a>ida识别的scopetable</h2><p>![image-20240117174244779](.&#x2F;基于Visual Stdio 2019的例子&#x2F;ida识别的scopetable.png)</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.cnblogs.com/xiangtingshen/p/11143207.html\">__try __except与__try __finally的嵌套使用以及__finally的调用时机</a></p>\n<p><a href=\"https://www.cnblogs.com/lordtianqiyi/articles/16176996.html\">x64位汇编学习(三)、异常</a></p>\n<p><a href=\"https://cata1oc.github.io/2020/08/23/SEH/\">SEH</a></p>\n<p><a href=\"https://cata1oc.github.io/2020/08/24/%E7%BC%96%E8%AF%91%E5%99%A8%E6%89%A9%E5%B1%95SEH/\">编译器扩展SEH</a></p>\n<p><a href=\"https://cata1oc.github.io/2020/08/25/tryexcept%E6%9C%AC%E8%B4%A8/\">_try_except本质</a></p>\n<p><a href=\"https://cata1oc.github.io/2020/08/27/%E5%B1%80%E9%83%A8%E5%B1%95%E5%BC%80%E4%B8%8E%E5%85%A8%E5%B1%80%E5%B1%95%E5%BC%80/\">局部展开与全局展开</a></p>\n<p><a href=\"https://bbs.kanxue.com/thread-206603.htm\">15pb调试器学习总结_except_handler4以及栈展开分析</a> </p>\n<p><a href=\"https://bbs.kanxue.com/thread-140970.htm\">SEH分析笔记（X86篇）</a></p>\n","text":"注：vc6++的异常处理函数为except_handler3，visual stdio的异常处理函数为except_handler4（具体见基于Visual S...","permalink":"/post/编译器扩展的SEH","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"24 mins."},"categories":[],"tags":[{"name":"Windows异常处理机制","slug":"Windows异常处理机制","count":2,"path":"api/tags/Windows异常处理机制.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E5%99%A8%E5%AF%B9SEH%E7%9A%84%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">编译器对SEH的支持</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">过滤表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%96%E5%80%BC\"><span class=\"toc-text\">取值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">形式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#try-except%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">_try_except实现细节</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E6%8C%82%E5%85%A5\"><span class=\"toc-text\">手动挂入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E6%8C%82%E5%85%A5\"><span class=\"toc-text\">自动挂入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#try-except%E5%B5%8C%E5%A5%97%E9%87%8D%E5%A4%8D\"><span class=\"toc-text\">_try_except嵌套重复</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%B1%95%E7%9A%84-EXCEPTION-REGISTRATION%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">扩展的_EXCEPTION_REGISTRATION结构体</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ScopeTable\"><span class=\"toc-text\">ScopeTable</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TryLevel\"><span class=\"toc-text\">TryLevel</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ebp\"><span class=\"toc-text\">ebp</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#except-handler3%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">_except_handler3执行过程</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#try-finally\"><span class=\"toc-text\">_try_finally</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">特点</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%B1%95%E5%BC%80%E5%87%BD%E6%95%B0%E2%80%94%E2%80%94-local-unwind2\"><span class=\"toc-text\">局部展开函数——_local_unwind2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#scopetable\"><span class=\"toc-text\">scopetable</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#local-unwind2\"><span class=\"toc-text\">_local_unwind2</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%B1%95%E5%BC%80\"><span class=\"toc-text\">全局展开</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EVisual-Stdio-2019%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">基于Visual Stdio 2019的例子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">前置知识</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SEH-scopetable\"><span class=\"toc-text\">SEH scopetable</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">源码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PEB-%E5%87%BD%E6%95%B0%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">PEB()函数汇编代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ida%E6%B1%87%E7%BC%96%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">ida汇编结果</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ida%E8%AF%86%E5%88%AB%E7%9A%84scopetable\"><span class=\"toc-text\">ida识别的scopetable</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"UPX脱壳实战——结合逆向工程核心原理","uid":"d804751ae060ee6bddee780d4be7bc78","slug":"UPX脱壳实战——结合逆向工程核心原理","date":"2022-05-11T03:23:55.000Z","updated":"2025-06-05T15:24:37.476Z","comments":true,"path":"api/articles/UPX脱壳实战——结合逆向工程核心原理.json","keywords":null,"cover":[],"text":"用《逆向工程核心原理》这本书中的notepad_upx.exe来实验 未加壳的oep 单步跟踪法脱壳的方法有很多，先来讲脱壳方法中最基础的单步跟踪法。单步跟踪法...","permalink":"/post/UPX脱壳实战——结合逆向工程核心原理","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"逆向工程核心原理","slug":"逆向工程核心原理","count":7,"path":"api/tags/逆向工程核心原理.json"},{"name":"加壳与脱壳","slug":"加壳与脱壳","count":1,"path":"api/tags/加壳与脱壳.json"},{"name":"iat修复","slug":"iat修复","count":1,"path":"api/tags/iat修复.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SEH","uid":"b42df1b10b510ae71ca0bc4d234a8f72","slug":"SEH","date":"2022-04-20T08:19:17.000Z","updated":"2025-06-08T15:26:30.339Z","comments":true,"path":"api/articles/SEH.json","keywords":null,"cover":[],"text":"SEH是Windows操作系统提供的异常处理机制，在程序源代码中使用__try、__except、__finally关键字来具体实现。 初识SEH下面将通过一个...","permalink":"/post/SEH","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[{"name":"Windows异常处理机制","slug":"Windows异常处理机制","count":2,"path":"api/tags/Windows异常处理机制.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}