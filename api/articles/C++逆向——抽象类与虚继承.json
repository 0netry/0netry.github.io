{"title":"C++逆向——抽象类与虚继承","uid":"0eecfedfebb040c00fe24e77372fb210","slug":"C++逆向——抽象类与虚继承","date":"2023-03-03T08:12:53.000Z","updated":"2025-06-07T18:34:32.830Z","comments":true,"path":"api/articles/C++逆向——抽象类与虚继承.json","keywords":null,"cover":[],"content":"<h1 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h1><p>在编码过程中，抽象类的定义需要配合虚函数使用。在虚函数的声明结尾处添加“&#x3D;0”，这种虚函数被称为纯虚函数。纯虚函数是一个没有实现只有声明的函数，它的存在就是为了让类具有抽象类的功能，让继承自抽象类的子类都具有虚表以及虚表指针。在使用过程中，利用抽象类指针可以更好地完成多态的工作。</p>\n<h2 id=\"纯虚函数的分析\"><a href=\"#纯虚函数的分析\" class=\"headerlink\" title=\"纯虚函数的分析\"></a>纯虚函数的分析</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(disable : 4996)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AbstractBase</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">AbstractBase</span>() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;AbstractBase()&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//定义纯虚函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VirtualChild</span> : <span class=\"keyword\">public</span> AbstractBase &#123; <span class=\"comment\">//定义继承抽象类的子类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">//实现纯虚函数</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;抽象类分析\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">\tVirtualChild obj;</span><br><span class=\"line\">\tobj.<span class=\"built_in\">show</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ida汇编及伪代码视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text:004010D0 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class=\"line\">.text:004010D0 _main           proc near               ; CODE XREF: __scrt_common_main_seh(void)+F5↓p</span><br><span class=\"line\">.text:004010D0</span><br><span class=\"line\">.text:004010D0 var_8           = byte ptr -8</span><br><span class=\"line\">.text:004010D0 var_4           = dword ptr -4</span><br><span class=\"line\">.text:004010D0 argc            = dword ptr  8</span><br><span class=\"line\">.text:004010D0 argv            = dword ptr  0Ch</span><br><span class=\"line\">.text:004010D0 envp            = dword ptr  10h</span><br><span class=\"line\">.text:004010D0</span><br><span class=\"line\">.text:004010D0                 push    ebp</span><br><span class=\"line\">.text:004010D1                 mov     ebp, esp</span><br><span class=\"line\">.text:004010D3                 sub     esp, 8</span><br><span class=\"line\">.text:004010D6                 mov     eax, ___security_cookie</span><br><span class=\"line\">.text:004010DB                 xor     eax, ebp</span><br><span class=\"line\">.text:004010DD                 mov     [ebp-4], eax</span><br><span class=\"line\">.text:004010E0                 lea     ecx, [ebp-8]</span><br><span class=\"line\">.text:004010E3                 call    sub_401100      ; 构造函数</span><br><span class=\"line\">.text:004010E8                 lea     ecx, [ebp-8]    ; char</span><br><span class=\"line\">.text:004010EB                 call    sub_4010B0      ; show函数</span><br><span class=\"line\">.text:004010F0                 xor     eax, eax</span><br><span class=\"line\">.text:004010F2                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:004010F5                 xor     ecx, ebp        ; StackCookie</span><br><span class=\"line\">.text:004010F7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)</span><br><span class=\"line\">.text:004010FC                 mov     esp, ebp</span><br><span class=\"line\">.text:004010FE                 pop     ebp</span><br><span class=\"line\">.text:004010FF                 retn</span><br><span class=\"line\">.text:004010FF _main           endp</span><br><span class=\"line\"></span><br><span class=\"line\">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char v4[4]; // [esp+0h] [ebp-8h] BYREF</span><br><span class=\"line\"></span><br><span class=\"line\">  sub_401100(v4);</span><br><span class=\"line\">  sub_4010B0((char)v4);</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//构造函数</span><br><span class=\"line\">.text:00401100 ; _DWORD *__thiscall sub_401100(_DWORD *this)</span><br><span class=\"line\">.text:00401100 sub_401100      proc near               ; CODE XREF: _main+13↑p</span><br><span class=\"line\">.text:00401100</span><br><span class=\"line\">.text:00401100 var_4           = byte ptr -4</span><br><span class=\"line\">.text:00401100</span><br><span class=\"line\">.text:00401100                 push    ebp             ; 构造函数</span><br><span class=\"line\">.text:00401101                 mov     ebp, esp</span><br><span class=\"line\">.text:00401103                 push    ecx</span><br><span class=\"line\">.text:00401104                 mov     [ebp-4], ecx</span><br><span class=\"line\">.text:00401107                 mov     ecx, [ebp-4]    ; char</span><br><span class=\"line\">.text:0040110A                 call    sub_401080      ; 调用父类抽象类AbstractBase构造函数</span><br><span class=\"line\">.text:0040110F                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:00401112                 mov     dword ptr [eax], offset ??_7VirtualChild@@6B@ ; const VirtualChild::`vftable&#x27;</span><br><span class=\"line\">.text:00401118                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:0040111B                 mov     esp, ebp</span><br><span class=\"line\">.text:0040111D                 pop     ebp</span><br><span class=\"line\">.text:0040111E                 retn</span><br><span class=\"line\">.text:0040111E sub_401100      endp</span><br><span class=\"line\"></span><br><span class=\"line\">_DWORD *__thiscall sub_401100(_DWORD *this)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  sub_401080(this);</span><br><span class=\"line\">  *this = &amp;VirtualChild::`vftable&#x27;;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//抽象类AbstractBase构造函数</span><br><span class=\"line\">.text:00401080 ; int __fastcall sub_401080(_DWORD *)</span><br><span class=\"line\">.text:00401080 sub_401080      proc near               ; CODE XREF: sub_401100+A↓p</span><br><span class=\"line\">.text:00401080</span><br><span class=\"line\">.text:00401080 var_4           = dword ptr -4</span><br><span class=\"line\">.text:00401080</span><br><span class=\"line\">.text:00401080                 push    ebp             ; 抽象类AbstractBase构造函数</span><br><span class=\"line\">.text:00401081                 mov     ebp, esp</span><br><span class=\"line\">.text:00401083                 push    ecx             ; char</span><br><span class=\"line\">.text:00401084                 mov     [ebp-4], ecx</span><br><span class=\"line\">.text:00401087                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:0040108A                 mov     dword ptr [eax], offset ??_7AbstractBase@@6B@ ; const AbstractBase::`vftable&#x27;</span><br><span class=\"line\">.text:0040108A                                         ; 设置抽象类虚表指针，虚表地址在??_7AbstractBase@@6B@处</span><br><span class=\"line\">.text:00401090                 push    offset Format   ; &quot;AbstractBase()&quot;</span><br><span class=\"line\">.text:00401095                 call    printf</span><br><span class=\"line\">.text:0040109A                 add     esp, 4</span><br><span class=\"line\">.text:0040109D                 mov     eax, [ebp+var_4]</span><br><span class=\"line\">.text:004010A0                 mov     esp, ebp</span><br><span class=\"line\">.text:004010A2                 pop     ebp</span><br><span class=\"line\">.text:004010A3                 retn</span><br><span class=\"line\">.text:004010A3 sub_401080      endp</span><br><span class=\"line\"></span><br><span class=\"line\">int __fastcall sub_401080(_DWORD *a1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int v2; // [esp+0h] [ebp-4h]</span><br><span class=\"line\"></span><br><span class=\"line\">  *a1 = &amp;AbstractBase::`vftable&#x27;;</span><br><span class=\"line\">  printf(&quot;AbstractBase()&quot;, (char)a1);</span><br><span class=\"line\">  return v2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查看抽象类虚表??_7AbstractBase@@6B@处，虚表信息如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.rdata:00402130 ; const AbstractBase::`vftable&#x27;</span><br><span class=\"line\">.rdata:00402130 ??_7AbstractBase@@6B@ dd offset _purecall</span><br><span class=\"line\">.rdata:00402130                                         ; DATA XREF: sub_401080+A↑o</span><br></pre></td></tr></table></figure>\n\n<p>如上面代码所示，在抽象类AbstractBase的虚表信息中，因为纯虚函数没有实现代码，所以没有首地址。编译器为了防止误调用纯虚函数，将虚表中保存的纯虚函数的首地址项替换成函数<code>__purecall</code>，用于结束程序。</p>\n<p>根据这一特性，在分析过程中，一旦在虚表中发现函数地址为<code>__purecall（GCC编译器函数名称为___cxa_pure_virtual）</code>函数的地址时，我们可以高度怀疑此虚表对应的类是一个抽象类。当抽象类中定义了多个纯虚函数时，虚表中将保存相同的函数指针。</p>\n<p>在上面代码中，插入新的纯虚函数并在子类中予以实现。经过编译后，再次查看虚表信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#pragma warning(disable : 4996)</span><br><span class=\"line\"></span><br><span class=\"line\">class AbstractBase &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tAbstractBase() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;AbstractBase()&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual void show() = 0; //定义纯虚函数</span><br><span class=\"line\">\tvirtual void show2() = 0;</span><br><span class=\"line\">\tvirtual void show3() = 0;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class VirtualChild : public AbstractBase &#123; //定义继承抽象类的子类</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tvirtual void show() &#123; //实现纯虚函数</span><br><span class=\"line\">\t\tprintf(&quot;抽象类分析\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual void show2() &#123; //实现纯虚函数</span><br><span class=\"line\">\t\tprintf(&quot;抽象类分析2\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual void show3() &#123; //实现纯虚函数</span><br><span class=\"line\">\t\tprintf(&quot;抽象类分析3\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main(int argc, char* argv[]) &#123;</span><br><span class=\"line\">\tVirtualChild obj;</span><br><span class=\"line\">\tobj.show();</span><br><span class=\"line\">\tobj.show2();</span><br><span class=\"line\">\tobj.show3();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.rdata:00402150 ; const AbstractBase::`vftable&#x27;</span><br><span class=\"line\">.rdata:00402150 ??_7AbstractBase@@6B@      dd offset _purecall     ; DATA XREF: sub_401080+A↑o</span><br><span class=\"line\">.rdata:00402154                 dd offset _purecall</span><br><span class=\"line\">.rdata:00402158                 dd offset _purecall</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"虚继承\"><a href=\"#虚继承\" class=\"headerlink\" title=\"虚继承\"></a>虚继承</h1><h2 id=\"菱形继承\"><a href=\"#菱形继承\" class=\"headerlink\" title=\"菱形继承\"></a>菱形继承</h2><p>菱形继承是最复杂的对象结构，菱形结构将单一继承与多重继承进行组合，如下图所示。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E8%99%9A%E7%BB%A7%E6%89%BF/%E8%8F%B1%E5%BD%A2%E7%BB%A7%E6%89%BF/%E8%8F%B1%E5%BD%A2%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"菱形继承结构图\"></p>\n<p>在上图中，类D属于多重继承中的子类，其父类为类B和类C，类B和类C拥有同一个父类A。在菱形继承中，一个派生类中保留间接基类的多份同名成员，虽然可以在不同的成员变量中分别存放不同的数据，但大多数情况下这是多余的。这是因为保留多份成员变量不仅占用较多的存储空间，还容易产生命名冲突。为了解决多继承时的命名冲突和冗余数据问题，C++提出了虚继承，使得在派生类中只保留一份间接基类的成员。</p>\n<h2 id=\"虚继承的内存结构\"><a href=\"#虚继承的内存结构\" class=\"headerlink\" title=\"虚继承的内存结构\"></a>虚继承的内存结构</h2><p>因为菱形继承的内存结构与多重继承一致，所以本节主要介绍虚继承的内存结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#pragma warning(disable : 4996)</span><br><span class=\"line\"></span><br><span class=\"line\">//定义家具类，虚基类，等同于类A</span><br><span class=\"line\">class Furniture &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tFurniture() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;Furniture::Furniture()\\n&quot;);</span><br><span class=\"line\">\t\tprice = 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Furniture() &#123; //家具类的虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;Furniture::~Furniture()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getPrice() &#123; //获取家具价格</span><br><span class=\"line\">\t\tprintf(&quot;Furniture::getPrice()\\n&quot;);</span><br><span class=\"line\">\t\treturn price;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint price; //家具类的成员变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//定义沙发类，继承自类Furniture，等同于类B</span><br><span class=\"line\">class Sofa : virtual public Furniture &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSofa() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;Sofa::Sofa()\\n&quot;);</span><br><span class=\"line\">\t\tprice = 1;</span><br><span class=\"line\">\t\tcolor = 2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Sofa() &#123; //沙发类虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;Sofa::~Sofa()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getColor() &#123; //获取沙发颜色</span><br><span class=\"line\">\t\tprintf(&quot;Sofa::getColor()\\n&quot;);</span><br><span class=\"line\">\t\treturn color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sitDown() &#123; //沙发可以坐下休息</span><br><span class=\"line\">\t\treturn printf(&quot;Sofa::sitDown()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint color; // 沙发类成员变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//定义床类，继承自类Furniture，等同于类C</span><br><span class=\"line\">class Bed : virtual public Furniture &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tBed() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;Bed::Bed()\\n&quot;);</span><br><span class=\"line\">\t\tprice = 3;</span><br><span class=\"line\">\t\tlength = 4;</span><br><span class=\"line\">\t\twidth = 5;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Bed() &#123; //床类的虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;Bed::~Bed()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getArea() &#123; //获取床面积</span><br><span class=\"line\">\t\tprintf(&quot;Bed::getArea()\\n&quot;);</span><br><span class=\"line\">\t\treturn length * width;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sleep() &#123; //床可以用来睡觉</span><br><span class=\"line\">\t\treturn printf(&quot;Bed::sleep()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint length; //床类成员变量</span><br><span class=\"line\">\tint width;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//子类沙发床的定义，派生自类Sofa和类Bed，等同于类D</span><br><span class=\"line\">class SofaBed : public Sofa, public Bed &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSofaBed() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;SofaBed::SofaBed()\\n&quot;);</span><br><span class=\"line\">\t\theight = 6;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~SofaBed() &#123; //沙发床类的虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;SofaBed::~SofaBed()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sitDown() &#123; //沙发可以坐下休息</span><br><span class=\"line\">\t\treturn printf(&quot;SofaBed::sitDown()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sleep() &#123; //床可以用来睡觉</span><br><span class=\"line\">\t\treturn printf(&quot;SofaBed::sleep()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getHeight() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;SofaBed::getHeight()\\n&quot;);</span><br><span class=\"line\">\t\treturn height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint height; //沙发类的成员变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main(int argc, char* argv[]) &#123;</span><br><span class=\"line\">\tSofaBed sofabed;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中一共定义了4个类，分别为Furniture、Sofa、Bed和SofaBed。Furniture为虚基类，从Furniture类中派生了两个子类：Sofa与Bed，它们在继承时使用了virtual的方式，即虚继承。</p>\n<p>使用虚继承可以避免共同派生出的子类产生多义性错误。那么，为什么virtual要加在两个父类上而不是它们共同派生的子类呢？这个问题与现实世界中动物的繁衍很相似，例如熊猫在繁衍时要避免具有血缘关系的雄性与雌性“近亲繁殖”，因为“近亲繁殖”的结果会使繁殖出的后代出现基因重叠的问题，造成残缺现象。类Bed与类Sofa就如同是一对兄妹，它们的父亲为Furniture，如果类Bed与类Sofa“近亲结合”，生下存在基因问题的SofaBed，就会存在基因重叠问题，因此使用虚继承防止这个问题的发生。</p>\n<p>接下来，让我们看看虚继承结构中子类SofaBed的对象在内存中是如何存放的，如下图所示：</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E8%99%9A%E7%BB%A7%E6%89%BF/%E8%99%9A%E7%BB%A7%E6%89%BF%E7%9A%84%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/SofaBed%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.png\" alt=\"SofaBed内存结构\"></p>\n<p>上图显示了SofaBed内存中的信息，初步观察内存中保存的数据可知，有些数据类似地址值。下图对各个地址数据进行了注解。</p>\n<p><img src=\"/post/GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/%E8%99%9A%E7%BB%A7%E6%89%BF/%E8%99%9A%E7%BB%A7%E6%89%BF%E7%9A%84%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/SofaBed%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E6%B3%A8%E8%A7%A3.png\" alt=\"SofaBed内存结构注解\"></p>\n<p>虽然知道了地址数据的含义，但还是存在一些模糊不清的数据无法理解，如SofaBed虚表指针（新）和虚基类偏移表，它们都又代表着什么呢？下面进行分析。</p>\n<h2 id=\"关于虚表指针\"><a href=\"#关于虚表指针\" class=\"headerlink\" title=\"关于虚表指针\"></a>关于虚表指针</h2><p>在虚继承中，若存在<strong>多重继承，子类虚表指针的个数取决于继承的父类以及虚基类的个数，有几个父类和虚基类便会出现几个虚表指针。</strong>但是虚基类的虚表指针不一样。</p>\n<p>首先是以父类的虚函数（非重写虚基类的虚函数）为基础，若子类重写了父类的虚函数，则子类的虚函数表中用重写后的虚函数覆盖掉父类被重写的虚函数，若没重写，则保留父类的虚函数，最后再按顺序填写子类自有的虚函数，若有多个父类，则有多个虚函数表，但只在相对于第一个父类（左数第一个）的虚函数表填写子类自有的虚函数。</p>\n<p>若多个父类具有相同的虚函数（函数名相同、参数相同、返回类型相同）（非重写虚基类的虚函数），则只会在第一个出现该函数的父类的虚函数表填写子类重写后的虚函数，</p>\n<p>最后才是相对于虚基类，若没有子类重写虚基类的虚函数，则虚基类的虚函数表填写的是虚基类的虚函数；若只有父类重写了虚基类的虚函数，则虚基类的虚函数表填写的是父类重写后的虚函数；若子类和父类同时重写了虚基类的虚函数，则虚基类的虚函数表填写的是子类重写后的虚函数；如下面的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#pragma warning(disable : 4996)</span><br><span class=\"line\"></span><br><span class=\"line\">//定义家具类，虚基类，等同于类A</span><br><span class=\"line\">class Furniture &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tFurniture() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;Furniture::Furniture()\\n&quot;);</span><br><span class=\"line\">\t\tprice = 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Furniture() &#123; //家具类的虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;Furniture::~Furniture()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getType() &#123; //获取家具价格</span><br><span class=\"line\">\t\treturn printf(&quot;Furniture::getType()\\n&quot;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tvirtual int getPrice() &#123; //获取家具价格</span><br><span class=\"line\">\t\tprintf(&quot;Furniture::getPrice()\\n&quot;);</span><br><span class=\"line\">\t\treturn price;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint price; //家具类的成员变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//定义沙发类，继承自类Furniture，等同于类B</span><br><span class=\"line\">class Sofa : virtual public Furniture &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSofa() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;Sofa::Sofa()\\n&quot;);</span><br><span class=\"line\">\t\tprice = 1;</span><br><span class=\"line\">\t\tcolor = 2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Sofa() &#123; //沙发类虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;Sofa::~Sofa()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getColor() &#123; //获取沙发颜色</span><br><span class=\"line\">\t\tprintf(&quot;Sofa::getColor()\\n&quot;);</span><br><span class=\"line\">\t\treturn color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sitDown() &#123; //沙发可以坐下休息</span><br><span class=\"line\">\t\treturn printf(&quot;Sofa::sitDown()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getPrice() &#123; //获取家具价格</span><br><span class=\"line\">\t\tprintf(&quot;Sofa::getPrice()\\n&quot;);</span><br><span class=\"line\">\t\treturn price;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint color; // 沙发类成员变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//定义床类，继承自类Furniture，等同于类C</span><br><span class=\"line\">class Bed : virtual public Furniture &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tBed() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;Bed::Bed()\\n&quot;);</span><br><span class=\"line\">\t\tprice = 3;</span><br><span class=\"line\">\t\tlength = 4;</span><br><span class=\"line\">\t\twidth = 5;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Bed() &#123; //床类的虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;Bed::~Bed()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getArea() &#123; //获取床面积</span><br><span class=\"line\">\t\tprintf(&quot;Bed::getArea()\\n&quot;);</span><br><span class=\"line\">\t\treturn length * width;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sleep() &#123; //床可以用来睡觉</span><br><span class=\"line\">\t\treturn printf(&quot;Bed::sleep()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint length; //床类成员变量</span><br><span class=\"line\">\tint width;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//子类沙发床的定义，派生自类Sofa和类Bed，等同于类D</span><br><span class=\"line\">class SofaBed : public Sofa, public Bed &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSofaBed() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;SofaBed::SofaBed()\\n&quot;);</span><br><span class=\"line\">\t\theight = 6;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~SofaBed() &#123; //沙发床类的虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;SofaBed::~SofaBed()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sitDown() &#123; //沙发可以坐下休息</span><br><span class=\"line\">\t\treturn printf(&quot;SofaBed::sitDown()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sleep() &#123; //床可以用来睡觉</span><br><span class=\"line\">\t\treturn printf(&quot;SofaBed::sleep()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getHeight() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;SofaBed::getHeight()\\n&quot;);</span><br><span class=\"line\">\t\treturn height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getPrice() &#123; //获取家具价格</span><br><span class=\"line\">\t\tprintf(&quot;SofaBed::getPrice()\\n&quot;);</span><br><span class=\"line\">\t\treturn price;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint height; //沙发类的成员变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main(int argc, char* argv[]) &#123;</span><br><span class=\"line\">\tSofaBed sofabed;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面例子中子类SofaBed的内存结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&gt;class SofaBed\tsize(44):</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt; 0\t| +--- (base class Sofa)</span><br><span class=\"line\">1&gt; 0\t| | &#123;vfptr&#125;</span><br><span class=\"line\">1&gt; 4\t| | &#123;vbptr&#125;</span><br><span class=\"line\">1&gt; 8\t| | color</span><br><span class=\"line\">1&gt;\t| +---</span><br><span class=\"line\">1&gt;12\t| +--- (base class Bed)</span><br><span class=\"line\">1&gt;12\t| | &#123;vfptr&#125;</span><br><span class=\"line\">1&gt;16\t| | &#123;vbptr&#125;</span><br><span class=\"line\">1&gt;20\t| | length</span><br><span class=\"line\">1&gt;24\t| | width</span><br><span class=\"line\">1&gt;\t| +---</span><br><span class=\"line\">1&gt;28\t| height</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt;32\t| (vtordisp for vbase Furniture)</span><br><span class=\"line\">1&gt;\t+--- (virtual base Furniture)</span><br><span class=\"line\">1&gt;36\t| &#123;vfptr&#125;</span><br><span class=\"line\">1&gt;40\t| price</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt;SofaBed::$vftable@Sofa@:</span><br><span class=\"line\">1&gt;\t| &amp;SofaBed_meta</span><br><span class=\"line\">1&gt;\t|  0</span><br><span class=\"line\">1&gt; 0\t| &amp;Sofa::getColor</span><br><span class=\"line\">1&gt; 1\t| &amp;SofaBed::sitDown</span><br><span class=\"line\">1&gt; 2\t| &amp;SofaBed::getHeight</span><br><span class=\"line\">1&gt;SofaBed::$vftable@Bed@:</span><br><span class=\"line\">1&gt;\t| -12</span><br><span class=\"line\">1&gt; 0\t| &amp;Bed::getArea</span><br><span class=\"line\">1&gt; 1\t| &amp;SofaBed::sleep</span><br><span class=\"line\">1&gt;SofaBed::$vbtable@Sofa@:</span><br><span class=\"line\">1&gt; 0\t| -4</span><br><span class=\"line\">1&gt; 1\t| 32 (SofaBedd(Sofa+4)Furniture)</span><br><span class=\"line\">1&gt;SofaBed::$vbtable@Bed@:</span><br><span class=\"line\">1&gt; 0\t| -4</span><br><span class=\"line\">1&gt; 1\t| 20 (SofaBedd(Bed+4)Furniture)</span><br><span class=\"line\">1&gt;SofaBed::$vftable@Furniture@:</span><br><span class=\"line\">1&gt;\t| -36</span><br><span class=\"line\">1&gt; 0\t| &amp;(vtordisp) SofaBed::&#123;dtor&#125;</span><br><span class=\"line\">1&gt; 1\t| &amp;Furniture::getType</span><br><span class=\"line\">1&gt; 2\t| &amp;(vtordisp) SofaBed::getPrice</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"虚继承结构的类继承和派生\"><a href=\"#虚继承结构的类继承和派生\" class=\"headerlink\" title=\"虚继承结构的类继承和派生\"></a>虚继承结构的类继承和派生</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#pragma warning(disable : 4996)</span><br><span class=\"line\"></span><br><span class=\"line\">//定义家具类，虚基类，等同于类A</span><br><span class=\"line\">class Furniture &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tFurniture() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;Furniture::Furniture()\\n&quot;);</span><br><span class=\"line\">\t\tprice = 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Furniture() &#123; //家具类的虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;Furniture::~Furniture()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getPrice() &#123; //获取家具价格</span><br><span class=\"line\">\t\tprintf(&quot;Furniture::getPrice()\\n&quot;);</span><br><span class=\"line\">\t\treturn price;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint price; //家具类的成员变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//定义沙发类，继承自类Furniture，等同于类B</span><br><span class=\"line\">class Sofa : virtual public Furniture &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSofa() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;Sofa::Sofa()\\n&quot;);</span><br><span class=\"line\">\t\tprice = 1;</span><br><span class=\"line\">\t\tcolor = 2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Sofa() &#123; //沙发类虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;Sofa::~Sofa()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getColor() &#123; //获取沙发颜色</span><br><span class=\"line\">\t\tprintf(&quot;Sofa::getColor()\\n&quot;);</span><br><span class=\"line\">\t\treturn color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sitDown() &#123; //沙发可以坐下休息</span><br><span class=\"line\">\t\treturn printf(&quot;Sofa::sitDown()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint color; // 沙发类成员变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//定义床类，继承自类Furniture，等同于类C</span><br><span class=\"line\">class Bed : virtual public Furniture &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tBed() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;Bed::Bed()\\n&quot;);</span><br><span class=\"line\">\t\tprice = 3;</span><br><span class=\"line\">\t\tlength = 4;</span><br><span class=\"line\">\t\twidth = 5;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~Bed() &#123; //床类的虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;Bed::~Bed()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getArea() &#123; //获取床面积</span><br><span class=\"line\">\t\tprintf(&quot;Bed::getArea()\\n&quot;);</span><br><span class=\"line\">\t\treturn length * width;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sleep() &#123; //床可以用来睡觉</span><br><span class=\"line\">\t\treturn printf(&quot;Bed::sleep()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint length; //床类成员变量</span><br><span class=\"line\">\tint width;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//子类沙发床的定义，派生自类Sofa和类Bed，等同于类D</span><br><span class=\"line\">class SofaBed : public Sofa, public Bed &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSofaBed() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;SofaBed::SofaBed()\\n&quot;);</span><br><span class=\"line\">\t\theight = 6;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual ~SofaBed() &#123; //沙发床类的虚析构函数</span><br><span class=\"line\">\t\tprintf(&quot;SofaBed::~SofaBed()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sitDown() &#123; //沙发可以坐下休息</span><br><span class=\"line\">\t\treturn printf(&quot;SofaBed::sitDown()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int sleep() &#123; //床可以用来睡觉</span><br><span class=\"line\">\t\treturn printf(&quot;SofaBed::sleep()\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvirtual int getHeight() &#123;</span><br><span class=\"line\">\t\tprintf(&quot;SofaBed::getHeight()\\n&quot;);</span><br><span class=\"line\">\t\treturn height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">\tint height; //沙发类的成员变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//C++源码，加入父类指针的转换代码</span><br><span class=\"line\">int main(int argc, char* argv[]) &#123;</span><br><span class=\"line\">\tSofaBed sofabed;</span><br><span class=\"line\">\tFurniture* p1 = &amp;sofabed; //转换成虚基类指针</span><br><span class=\"line\">\tSofa* p2 = &amp;sofabed; //转换成父类指针</span><br><span class=\"line\">\tBed* p3 = &amp;sofabed; //转换成父类指针</span><br><span class=\"line\">\tprintf(&quot;%p %p %p\\n&quot;, p1, p2, p3);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ida汇编及伪代码视图</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main函数</span><br><span class=\"line\">.text:00401650 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class=\"line\">.text:00401650 _main           proc near               ; CODE XREF: __scrt_common_main_seh(void)+F5↓p</span><br><span class=\"line\">.text:00401650</span><br><span class=\"line\">.text:00401650 var_44          = dword ptr -44h</span><br><span class=\"line\">.text:00401650 var_40          = byte ptr -40h</span><br><span class=\"line\">.text:00401650 var_3C          = dword ptr -3Ch</span><br><span class=\"line\">.text:00401650 var_38          = dword ptr -38h</span><br><span class=\"line\">.text:00401650 var_34          = dword ptr -34h</span><br><span class=\"line\">.text:00401650 var_30          = dword ptr -30h</span><br><span class=\"line\">.text:00401650 var_2C          = byte ptr -2Ch</span><br><span class=\"line\">.text:00401650 var_28          = dword ptr -28h</span><br><span class=\"line\">.text:00401650 var_4           = dword ptr -4</span><br><span class=\"line\">.text:00401650 argc            = dword ptr  8</span><br><span class=\"line\">.text:00401650 argv            = dword ptr  0Ch</span><br><span class=\"line\">.text:00401650 envp            = dword ptr  10h</span><br><span class=\"line\">.text:00401650</span><br><span class=\"line\">.text:00401650                 push    ebp</span><br><span class=\"line\">.text:00401651                 mov     ebp, esp</span><br><span class=\"line\">.text:00401653                 sub     esp, 44h</span><br><span class=\"line\">.text:00401656                 mov     eax, ___security_cookie</span><br><span class=\"line\">.text:0040165B                 xor     eax, ebp</span><br><span class=\"line\">.text:0040165D                 mov     [ebp-4], eax</span><br><span class=\"line\">.text:00401660                 push    1               ; 是否构造虚基类的标志：1构造，0不构造</span><br><span class=\"line\">.text:00401662                 lea     ecx, [ebp-2Ch]  ; 传入对象的首地址作为this指针</span><br><span class=\"line\">.text:00401665                 call    sub_401440      ; 调用构造函数</span><br><span class=\"line\">.text:0040166A                 lea     eax, [ebp-2Ch]  ; 获取对象的首地址</span><br><span class=\"line\">.text:0040166D                 test    eax, eax</span><br><span class=\"line\">.text:0040166F                 jnz     short loc_40167A ; 检查代码</span><br><span class=\"line\">.text:00401671                 mov     dword ptr [ebp-30h], 0</span><br><span class=\"line\">.text:00401678                 jmp     short loc_401687</span><br><span class=\"line\">.text:0040167A ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:0040167A</span><br><span class=\"line\">.text:0040167A loc_40167A:                             ; CODE XREF: _main+1F↑j</span><br><span class=\"line\">.text:0040167A                 mov     ecx, [ebp-28h]  ; 取对象中的Sofa类虚基类偏移表指针（[ebp-28h]=[ebp-2Ch+4]）</span><br><span class=\"line\">.text:0040167D                 mov     edx, [ecx+4]    ; 取出虚基类偏移值并存入edx</span><br><span class=\"line\">.text:00401680                 lea     eax, [ebp+edx-28h] ; 根据虚基类偏移表，得到虚基类Furniture的首地址</span><br><span class=\"line\">.text:00401684                 mov     [ebp-30h], eax  ; 利用中间变量保存虚基类Furniture的首地址</span><br><span class=\"line\">.text:00401687</span><br><span class=\"line\">.text:00401687 loc_401687:                             ; CODE XREF: _main+28↑j</span><br><span class=\"line\">.text:00401687                 mov     ecx, [ebp-30h]</span><br><span class=\"line\">.text:0040168A                 mov     [ebp-40h], ecx  ; p1=&amp;sofabed</span><br><span class=\"line\">.text:0040168D                 lea     edx, [ebp-2Ch]  ; 直接转换SofaBed对象的首地址为父类Sofa的指针</span><br><span class=\"line\">.text:00401690                 mov     [ebp-3Ch], edx  ; p2=&amp;sofabed</span><br><span class=\"line\">.text:00401693                 lea     eax, [ebp-2Ch]  ; 获取对象SofaBed的首地址</span><br><span class=\"line\">.text:00401696                 test    eax, eax</span><br><span class=\"line\">.text:00401698                 jz      short loc_4016A5 ; 地址检查</span><br><span class=\"line\">.text:0040169A                 lea     ecx, [ebp-2Ch]</span><br><span class=\"line\">.text:0040169D                 add     ecx, 0Ch        ; 获取Bed类对象的首地址</span><br><span class=\"line\">.text:004016A0                 mov     [ebp-34h], ecx  ; 利用中间变量保存Bed类对象的首地址</span><br><span class=\"line\">.text:004016A3                 jmp     short loc_4016AC</span><br><span class=\"line\">.text:004016A5 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.text:004016A5</span><br><span class=\"line\">.text:004016A5 loc_4016A5:                             ; CODE XREF: _main+48↑j</span><br><span class=\"line\">.text:004016A5                 mov     dword ptr [ebp-34h], 0</span><br><span class=\"line\">.text:004016AC</span><br><span class=\"line\">.text:004016AC loc_4016AC:                             ; CODE XREF: _main+53↑j</span><br><span class=\"line\">.text:004016AC                 mov     edx, [ebp-34h]</span><br><span class=\"line\">.text:004016AF                 mov     [ebp-38h], edx  ; p3=&amp;sofabed</span><br><span class=\"line\">.text:004016B2                 mov     eax, [ebp-38h]</span><br><span class=\"line\">.text:004016B5                 push    eax             ; 参数4：p3</span><br><span class=\"line\">.text:004016B6                 mov     ecx, [ebp-3Ch]</span><br><span class=\"line\">.text:004016B9                 push    ecx             ; 参数3：p2</span><br><span class=\"line\">.text:004016BA                 mov     edx, [ebp-40h]</span><br><span class=\"line\">.text:004016BD                 push    edx             ; 参数2：p1</span><br><span class=\"line\">.text:004016BE                 push    offset aPPP     ; &quot;%p %p %p\\n&quot;</span><br><span class=\"line\">.text:004016C3                 call    printf</span><br><span class=\"line\">.text:004016C8                 add     esp, 10h</span><br><span class=\"line\">.text:004016CB                 mov     dword ptr [ebp-44h], 0</span><br><span class=\"line\">.text:004016D2                 lea     ecx, [ebp-2Ch]  ; 传递this指针</span><br><span class=\"line\">.text:004016D5                 call    ??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::iostream::`vbase destructor&#x27;(void)</span><br><span class=\"line\">.text:004016D5                                         ; 调用析构代理函数</span><br><span class=\"line\">.text:004016DA                 mov     eax, [ebp-44h]</span><br><span class=\"line\">.text:004016DD                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:004016E0                 xor     ecx, ebp        ; StackCookie</span><br><span class=\"line\">.text:004016E2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)</span><br><span class=\"line\">.text:004016E7                 mov     esp, ebp</span><br><span class=\"line\">.text:004016E9                 pop     ebp</span><br><span class=\"line\">.text:004016EA                 retn</span><br><span class=\"line\">.text:004016EA _main           endp</span><br><span class=\"line\"></span><br><span class=\"line\">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char *v4; // [esp+14h] [ebp-30h]</span><br><span class=\"line\">  char v5[4]; // [esp+18h] [ebp-2Ch] BYREF</span><br><span class=\"line\">  int v6[9]; // [esp+1Ch] [ebp-28h] BYREF</span><br><span class=\"line\"></span><br><span class=\"line\">  sub_401440(1);</span><br><span class=\"line\">  if ( v5 )</span><br><span class=\"line\">    v4 = (char *)v6 + *(_DWORD *)(v6[0] + 4);</span><br><span class=\"line\">  else</span><br><span class=\"line\">    LOBYTE(v4) = 0;</span><br><span class=\"line\">  printf(&quot;%p %p %p\\n&quot;, (char)v4);</span><br><span class=\"line\">  std::iostream::`vbase destructor&#x27;(v5);</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时各类的结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&gt;class Furniture\tsize(8):</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt; 0\t| &#123;vfptr&#125;</span><br><span class=\"line\">1&gt; 4\t| price</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt;Furniture::$vftable@:</span><br><span class=\"line\">1&gt;\t| &amp;Furniture_meta</span><br><span class=\"line\">1&gt;\t|  0</span><br><span class=\"line\">1&gt; 0\t| &amp;Furniture::&#123;dtor&#125;</span><br><span class=\"line\">1&gt; 1\t| &amp;Furniture::getPrice</span><br><span class=\"line\">1&gt;Furniture::&#123;dtor&#125; this adjustor: 0</span><br><span class=\"line\">1&gt;Furniture::getPrice this adjustor: 0</span><br><span class=\"line\">1&gt;Furniture::__delDtor this adjustor: 0</span><br><span class=\"line\">1&gt;Furniture::__vecDelDtor this adjustor: 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1&gt;class Sofa\tsize(20):</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt; 0\t| &#123;vfptr&#125;</span><br><span class=\"line\">1&gt; 4\t| &#123;vbptr&#125;</span><br><span class=\"line\">1&gt; 8\t| color</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt;\t+--- (virtual base Furniture)</span><br><span class=\"line\">1&gt;12\t| &#123;vfptr&#125;</span><br><span class=\"line\">1&gt;16\t| price</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt;Sofa::$vftable@Sofa@:</span><br><span class=\"line\">1&gt;\t| &amp;Sofa_meta</span><br><span class=\"line\">1&gt;\t|  0</span><br><span class=\"line\">1&gt; 0\t| &amp;Sofa::getColor</span><br><span class=\"line\">1&gt; 1\t| &amp;Sofa::sitDown</span><br><span class=\"line\">1&gt;Sofa::$vbtable@:</span><br><span class=\"line\">1&gt; 0\t| -4</span><br><span class=\"line\">1&gt; 1\t| 8 (Sofad(Sofa+4)Furniture)</span><br><span class=\"line\">1&gt;Sofa::$vftable@Furniture@:</span><br><span class=\"line\">1&gt;\t| -12</span><br><span class=\"line\">1&gt; 0\t| &amp;Sofa::&#123;dtor&#125;</span><br><span class=\"line\">1&gt; 1\t| &amp;Furniture::getPrice</span><br><span class=\"line\">1&gt;Sofa::&#123;dtor&#125; this adjustor: 12</span><br><span class=\"line\">1&gt;Sofa::getColor this adjustor: 0</span><br><span class=\"line\">1&gt;Sofa::sitDown this adjustor: 0</span><br><span class=\"line\">1&gt;Sofa::__delDtor this adjustor: 12</span><br><span class=\"line\">1&gt;Sofa::__vecDelDtor this adjustor: 12</span><br><span class=\"line\">1&gt;vbi:\t   class  offset o.vbptr  o.vbte fVtorDisp</span><br><span class=\"line\">1&gt;       Furniture      12       4       4 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1&gt;class Bed\tsize(24):</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt; 0\t| &#123;vfptr&#125;</span><br><span class=\"line\">1&gt; 4\t| &#123;vbptr&#125;</span><br><span class=\"line\">1&gt; 8\t| length</span><br><span class=\"line\">1&gt;12\t| width</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt;\t+--- (virtual base Furniture)</span><br><span class=\"line\">1&gt;16\t| &#123;vfptr&#125;</span><br><span class=\"line\">1&gt;20\t| price</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt;Bed::$vftable@Bed@:</span><br><span class=\"line\">1&gt;\t| &amp;Bed_meta</span><br><span class=\"line\">1&gt;\t|  0</span><br><span class=\"line\">1&gt; 0\t| &amp;Bed::getArea</span><br><span class=\"line\">1&gt; 1\t| &amp;Bed::sleep</span><br><span class=\"line\">1&gt;Bed::$vbtable@:</span><br><span class=\"line\">1&gt; 0\t| -4</span><br><span class=\"line\">1&gt; 1\t| 12 (Bedd(Bed+4)Furniture)</span><br><span class=\"line\">1&gt;Bed::$vftable@Furniture@:</span><br><span class=\"line\">1&gt;\t| -16</span><br><span class=\"line\">1&gt; 0\t| &amp;Bed::&#123;dtor&#125;</span><br><span class=\"line\">1&gt; 1\t| &amp;Furniture::getPrice</span><br><span class=\"line\">1&gt;Bed::&#123;dtor&#125; this adjustor: 16</span><br><span class=\"line\">1&gt;Bed::getArea this adjustor: 0</span><br><span class=\"line\">1&gt;Bed::sleep this adjustor: 0</span><br><span class=\"line\">1&gt;Bed::__delDtor this adjustor: 16</span><br><span class=\"line\">1&gt;Bed::__vecDelDtor this adjustor: 16</span><br><span class=\"line\">1&gt;vbi:\t   class  offset o.vbptr  o.vbte fVtorDisp</span><br><span class=\"line\">1&gt;       Furniture      16       4       4 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1&gt;class SofaBed\tsize(40):</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt; 0\t| +--- (base class Sofa)</span><br><span class=\"line\">1&gt; 0\t| | &#123;vfptr&#125;</span><br><span class=\"line\">1&gt; 4\t| | &#123;vbptr&#125;</span><br><span class=\"line\">1&gt; 8\t| | color</span><br><span class=\"line\">1&gt;\t| +---</span><br><span class=\"line\">1&gt;12\t| +--- (base class Bed)</span><br><span class=\"line\">1&gt;12\t| | &#123;vfptr&#125;</span><br><span class=\"line\">1&gt;16\t| | &#123;vbptr&#125;</span><br><span class=\"line\">1&gt;20\t| | length</span><br><span class=\"line\">1&gt;24\t| | width</span><br><span class=\"line\">1&gt;\t| +---</span><br><span class=\"line\">1&gt;28\t| height</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt;\t+--- (virtual base Furniture)</span><br><span class=\"line\">1&gt;32\t| &#123;vfptr&#125;</span><br><span class=\"line\">1&gt;36\t| price</span><br><span class=\"line\">1&gt;\t+---</span><br><span class=\"line\">1&gt;SofaBed::$vftable@Sofa@:</span><br><span class=\"line\">1&gt;\t| &amp;SofaBed_meta</span><br><span class=\"line\">1&gt;\t|  0</span><br><span class=\"line\">1&gt; 0\t| &amp;Sofa::getColor</span><br><span class=\"line\">1&gt; 1\t| &amp;SofaBed::sitDown</span><br><span class=\"line\">1&gt; 2\t| &amp;SofaBed::getHeight</span><br><span class=\"line\">1&gt;SofaBed::$vftable@Bed@:</span><br><span class=\"line\">1&gt;\t| -12</span><br><span class=\"line\">1&gt; 0\t| &amp;Bed::getArea</span><br><span class=\"line\">1&gt; 1\t| &amp;SofaBed::sleep</span><br><span class=\"line\">1&gt;SofaBed::$vbtable@Sofa@:</span><br><span class=\"line\">1&gt; 0\t| -4</span><br><span class=\"line\">1&gt; 1\t| 28 (SofaBedd(Sofa+4)Furniture)</span><br><span class=\"line\">1&gt;SofaBed::$vbtable@Bed@:</span><br><span class=\"line\">1&gt; 0\t| -4</span><br><span class=\"line\">1&gt; 1\t| 16 (SofaBedd(Bed+4)Furniture)</span><br><span class=\"line\">1&gt;SofaBed::$vftable@Furniture@:</span><br><span class=\"line\">1&gt;\t| -32</span><br><span class=\"line\">1&gt; 0\t| &amp;SofaBed::&#123;dtor&#125;</span><br><span class=\"line\">1&gt; 1\t| &amp;Furniture::getPrice</span><br><span class=\"line\">1&gt;SofaBed::&#123;dtor&#125; this adjustor: 32</span><br><span class=\"line\">1&gt;SofaBed::sitDown this adjustor: 0</span><br><span class=\"line\">1&gt;SofaBed::sleep this adjustor: 12</span><br><span class=\"line\">1&gt;SofaBed::getHeight this adjustor: 0</span><br><span class=\"line\">1&gt;SofaBed::__delDtor this adjustor: 32</span><br><span class=\"line\">1&gt;SofaBed::__vecDelDtor this adjustor: 32</span><br><span class=\"line\">1&gt;vbi:\t   class  offset o.vbptr  o.vbte fVtorDisp</span><br><span class=\"line\">1&gt;       Furniture      32       4       4 0</span><br></pre></td></tr></table></figure>\n\n<p>从汇编代码中的指针转换过程可以看出，<strong>虚基类偏移表指向的内存地址中保存的数据为偏移数据，对应的数据有两项：第一项为-4，即虚基类偏移表所属类对应的对象首地址相对于虚基类偏移表的偏移值；第二项保存的是虚基类对象首地址相对于虚基类偏移表的偏移值。</strong></p>\n<p>虚表指针（虚函数表指针）指向的虚表包含了子类SofaBed的虚函数。有了这些记录就可以随心所欲地将虚表指针转换成任意的父类指针。在利用父类指针访问虚函数时，只能调用子类与父类共有的虚函数，子类继承自其他父类的虚函数是无法调用的，虚表中也没有相关的记录。当子类存在多个虚基类时，会在虚基类偏移表中依次记录它们的偏移量。</p>\n<h2 id=\"虚继承结构的子类构造\"><a href=\"#虚继承结构的子类构造\" class=\"headerlink\" title=\"虚继承结构的子类构造\"></a>虚继承结构的子类构造</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//构造函数</span><br><span class=\"line\">.text:00401440 ; _DWORD *__thiscall sub_401440(_DWORD *this, int)</span><br><span class=\"line\">.text:00401440 sub_401440      proc near               ; CODE XREF: _main+15↓p</span><br><span class=\"line\">.text:00401440</span><br><span class=\"line\">.text:00401440 var_14          = dword ptr -14h</span><br><span class=\"line\">.text:00401440 var_10          = dword ptr -10h</span><br><span class=\"line\">.text:00401440 var_C           = dword ptr -0Ch</span><br><span class=\"line\">.text:00401440 var_4           = dword ptr -4</span><br><span class=\"line\">.text:00401440 arg_0           = dword ptr  8</span><br><span class=\"line\">.text:00401440 arg_4           = dword ptr  0Ch</span><br><span class=\"line\">.text:00401440</span><br><span class=\"line\">.text:00401440 ; FUNCTION CHUNK AT .text:004023B0 SIZE 00000027 BYTES</span><br><span class=\"line\">.text:00401440 ; FUNCTION CHUNK AT .text:004023DC SIZE 0000001D BYTES</span><br><span class=\"line\">.text:00401440</span><br><span class=\"line\">.text:00401440 ; __unwind &#123; // SEH_401440</span><br><span class=\"line\">.text:00401440                 push    ebp             ; 构造函数</span><br><span class=\"line\">.text:00401441                 mov     ebp, esp</span><br><span class=\"line\">.text:00401443                 push    0FFFFFFFFh</span><br><span class=\"line\">.text:00401445                 push    offset SEH_401440</span><br><span class=\"line\">.text:0040144A                 mov     eax, large fs:0</span><br><span class=\"line\">.text:00401450                 push    eax</span><br><span class=\"line\">.text:00401451                 sub     esp, 8</span><br><span class=\"line\">.text:00401454                 mov     eax, ___security_cookie</span><br><span class=\"line\">.text:00401459                 xor     eax, ebp</span><br><span class=\"line\">.text:0040145B                 push    eax             ; char</span><br><span class=\"line\">.text:0040145C                 lea     eax, [ebp-0Ch]</span><br><span class=\"line\">.text:0040145F                 mov     large fs:0, eax</span><br><span class=\"line\">.text:00401465                 mov     [ebp-10h], ecx</span><br><span class=\"line\">.text:00401468                 mov     dword ptr [ebp-14h], 0</span><br><span class=\"line\">.text:0040146F                 cmp     dword ptr [ebp+8], 0</span><br><span class=\"line\">.text:00401473                 jz      short loc_4014A4 ; 比较参数是否为0，为0则执行JE跳转，防止重复构造虚基类</span><br><span class=\"line\">.text:00401475                 mov     eax, [ebp-10h]</span><br><span class=\"line\">.text:00401478                 mov     dword ptr [eax+4], offset unk_4032AC ; 设置父类Sofa中的虚基类偏移表</span><br><span class=\"line\">.text:0040147F                 mov     ecx, [ebp-10h]</span><br><span class=\"line\">.text:00401482                 mov     dword ptr [ecx+10h], offset unk_403298 ; 设置父类Bed中的虚基类偏移表</span><br><span class=\"line\">.text:00401489                 mov     ecx, [ebp-10h]</span><br><span class=\"line\">.text:0040148C                 add     ecx, 20h ; &#x27; &#x27;  ; 调整this指针为虚基类Furniture的this指针</span><br><span class=\"line\">.text:0040148F                 call    sub_401080      ; 调用虚基类Furniture的构造函数，虚基类为最上级，它的构造函数和无继承关系的构造函数相同，这里不予分析</span><br><span class=\"line\">.text:00401494 ;   try &#123;</span><br><span class=\"line\">.text:00401494                 mov     dword ptr [ebp-4], 0</span><br><span class=\"line\">.text:0040149B                 mov     edx, [ebp-14h]</span><br><span class=\"line\">.text:0040149E                 or      edx, 1</span><br><span class=\"line\">.text:004014A1                 mov     [ebp-14h], edx</span><br><span class=\"line\">.text:004014A4</span><br><span class=\"line\">.text:004014A4 loc_4014A4:                             ; CODE XREF: sub_401440+33↑j</span><br><span class=\"line\">.text:004014A4                 push    0               ; 传入0作为构造标记</span><br><span class=\"line\">.text:004014A6                 mov     ecx, [ebp-10h]  ; 获取Sofa对象首地址作为this指针</span><br><span class=\"line\">.text:004014A9                 call    sub_401130      ; 调用父类Sofa构造函数</span><br><span class=\"line\">.text:004014A9 ;   &#125; // starts at 401494</span><br><span class=\"line\">.text:004014AE ;   try &#123;</span><br><span class=\"line\">.text:004014AE                 mov     dword ptr [ebp-4], 1</span><br><span class=\"line\">.text:004014B5                 push    0               ; 传入0作为构造标记</span><br><span class=\"line\">.text:004014B7                 mov     ecx, [ebp-10h]</span><br><span class=\"line\">.text:004014BA                 add     ecx, 0Ch        ; 调整this指针，获取Bed对象首地址作为this指针</span><br><span class=\"line\">.text:004014BD                 call    sub_4012B0      ; 调用父类Bed构造函数</span><br><span class=\"line\">.text:004014C2                 mov     eax, [ebp-10h]</span><br><span class=\"line\">.text:004014C5                 mov     dword ptr [eax], offset ??_7SofaBed@@6B@_1 ; const SofaBed::`vftable&#x27;</span><br><span class=\"line\">.text:004014C5                                         ; 覆盖Sofa类虚表指针(新)</span><br><span class=\"line\">.text:004014CB                 mov     ecx, [ebp-10h]</span><br><span class=\"line\">.text:004014CE                 mov     dword ptr [ecx+0Ch], offset ??_7SofaBed@@6B@_0 ; const SofaBed::`vftable&#x27;</span><br><span class=\"line\">.text:004014CE                                         ; 覆盖Bed类虚表指针(新)</span><br><span class=\"line\">.text:004014D5                 mov     edx, [ebp-10h]  ; 下面通过this指针和虚基类偏移表定位到虚基类Furniture的虚表指针</span><br><span class=\"line\">.text:004014D8                 mov     eax, [edx+4]    ; 此处获取虚基类偏移表并保存至eax</span><br><span class=\"line\">.text:004014DB                 mov     ecx, [eax+4]    ; 此处获取虚基类虚表指针（虚基类首地址）相对于虚基类偏移表的偏移并保存至ecx</span><br><span class=\"line\">.text:004014DE                 mov     edx, [ebp-10h]  ; 获取this指针</span><br><span class=\"line\">.text:004014E1                 mov     dword ptr [edx+ecx+4], offset ??_7SofaBed@@6B@ ; const SofaBed::`vftable&#x27;</span><br><span class=\"line\">.text:004014E1                                         ; 覆盖Furniture类虚表指针(新)</span><br><span class=\"line\">.text:004014E1                                         ; edx=sofa_vfptr,ecx=Furniture_vfptr-sofa_vbptr</span><br><span class=\"line\">.text:004014E1                                         ; 所以sofa_vbptr=sofa_vfptr+4=edx+4</span><br><span class=\"line\">.text:004014E1                                         ; 所以Furniture_vfptr=ecx+sofa_vbptr=ecx+edx+4</span><br><span class=\"line\">.text:004014E9                 push    offset aSofabedSofabed ; &quot;SofaBed::SofaBed()\\n&quot;   ; 下面执行SofaBed构造函数内的代码</span><br><span class=\"line\">.text:004014EE                 call    printf</span><br><span class=\"line\">.text:004014F3                 add     esp, 4</span><br><span class=\"line\">.text:004014F6                 mov     eax, [ebp-10h]</span><br><span class=\"line\">.text:004014F9                 mov     dword ptr [eax+1Ch], 6</span><br><span class=\"line\">.text:004014F9 ;   &#125; // starts at 4014AE</span><br><span class=\"line\">.text:00401500                 mov     dword ptr [ebp-4], 0FFFFFFFFh</span><br><span class=\"line\">.text:00401507                 mov     eax, [ebp-10h]</span><br><span class=\"line\">.text:0040150A                 mov     ecx, [ebp-0Ch]</span><br><span class=\"line\">.text:0040150D                 mov     large fs:0, ecx</span><br><span class=\"line\">.text:00401514                 pop     ecx</span><br><span class=\"line\">.text:00401515                 mov     esp, ebp</span><br><span class=\"line\">.text:00401517                 pop     ebp</span><br><span class=\"line\">.text:00401518                 retn    4</span><br><span class=\"line\">.text:00401518 ; &#125; // starts at 401440</span><br><span class=\"line\">.text:00401518 sub_401440      endp</span><br><span class=\"line\"></span><br><span class=\"line\">_DWORD *__thiscall sub_401440(_DWORD *this, int a2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  if ( a2 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    this[1] = &amp;unk_4032AC;</span><br><span class=\"line\">    this[4] = &amp;unk_403298;</span><br><span class=\"line\">    sub_401080((_BYTE)this + 32);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sub_401130(0);</span><br><span class=\"line\">  sub_4012B0(0);</span><br><span class=\"line\">  *this = &amp;SofaBed::`vftable&#x27;;</span><br><span class=\"line\">  this[3] = &amp;SofaBed::`vftable&#x27;;</span><br><span class=\"line\">  *(_DWORD *)((char *)this + *(_DWORD *)(this[1] + 4) + 4) = &amp;SofaBed::`vftable&#x27;;</span><br><span class=\"line\">  printf(&quot;SofaBed::SofaBed()\\n&quot;);</span><br><span class=\"line\">  this[7] = 6;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//虚基类Furniture构造函数</span><br><span class=\"line\">.text:00401080 ; _DWORD *__fastcall sub_401080(_DWORD *)</span><br><span class=\"line\">.text:00401080 sub_401080      proc near               ; CODE XREF: sub_401130+26↓p</span><br><span class=\"line\">.text:00401080                                         ; sub_4012B0+26↓p ...</span><br><span class=\"line\">.text:00401080</span><br><span class=\"line\">.text:00401080 var_4           = dword ptr -4</span><br><span class=\"line\">.text:00401080</span><br><span class=\"line\">.text:00401080                 push    ebp            ; 虚基类Furniture构造函数</span><br><span class=\"line\">.text:00401081                 mov     ebp, esp</span><br><span class=\"line\">.text:00401083                 push    ecx             ; char</span><br><span class=\"line\">.text:00401084                 mov     [ebp+var_4], ecx</span><br><span class=\"line\">.text:00401087                 mov     eax, [ebp+var_4]</span><br><span class=\"line\">.text:0040108A                 mov     dword ptr [eax], offset ??_7Furniture@@6B@ ; 设置虚表指针为Furniture虚表</span><br><span class=\"line\">.text:00401090                 push    offset Format   ; 执行Furniture构造函数内的代码</span><br><span class=\"line\">.text:00401095                 call    printf</span><br><span class=\"line\">.text:0040109A                 add     esp, 4</span><br><span class=\"line\">.text:0040109D                 mov     ecx, [ebp+var_4]</span><br><span class=\"line\">.text:004010A0                 mov     dword ptr [ecx+4], 0</span><br><span class=\"line\">.text:004010A7                 mov     eax, [ebp+var_4]</span><br><span class=\"line\">.text:004010AA                 mov     esp, ebp</span><br><span class=\"line\">.text:004010AC                 pop     ebp</span><br><span class=\"line\">.text:004010AD                 retn</span><br><span class=\"line\">.text:004010AD sub_401080      endp</span><br><span class=\"line\"></span><br><span class=\"line\">_DWORD *__fastcall sub_401080(_DWORD *a1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  *a1 = &amp;Furniture::`vftable&#x27;;</span><br><span class=\"line\">  printf(&quot;Furniture::Furniture()\\n&quot;);</span><br><span class=\"line\">  a1[1] = 0;</span><br><span class=\"line\">  return a1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//父类Sofa构造函数</span><br><span class=\"line\">.text:00401130 ; _DWORD *__thiscall sub_401130(_DWORD *this, int)</span><br><span class=\"line\">.text:00401130 sub_401130      proc near               ; CODE XREF: sub_401440+69↓p</span><br><span class=\"line\">.text:00401130</span><br><span class=\"line\">.text:00401130 var_8           = dword ptr -8</span><br><span class=\"line\">.text:00401130 var_4           = dword ptr -4</span><br><span class=\"line\">.text:00401130 arg_0           = dword ptr  8</span><br><span class=\"line\">.text:00401130</span><br><span class=\"line\">.text:00401130                 push    ebp             ; 父类Sofa构造函数</span><br><span class=\"line\">.text:00401131                 mov     ebp, esp</span><br><span class=\"line\">.text:00401133                 sub     esp, 8</span><br><span class=\"line\">.text:00401136                 mov     [ebp-4], ecx    ; 保存this指针</span><br><span class=\"line\">.text:00401139                 mov     dword ptr [ebp-8], 0</span><br><span class=\"line\">.text:00401140                 cmp     dword ptr [ebp+8], 0 ; 判断是否要构造虚基类，0为不构造</span><br><span class=\"line\">.text:00401144                 jz      short loc_401164</span><br><span class=\"line\">.text:00401146                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:00401149                 mov     dword ptr [eax+4], offset unk_403258 ; 设置父类Sofa中的虚基类偏移表</span><br><span class=\"line\">.text:00401150                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:00401153                 add     ecx, 0Ch        ; 获取虚基类Furniture对象的首地址</span><br><span class=\"line\">.text:00401156                 call    sub_401080      ; 调用虚基类Furniture的构造函数</span><br><span class=\"line\">.text:0040115B                 mov     ecx, [ebp-8]</span><br><span class=\"line\">.text:0040115E                 or      ecx, 1</span><br><span class=\"line\">.text:00401161                 mov     [ebp-8], ecx</span><br><span class=\"line\">.text:00401164</span><br><span class=\"line\">.text:00401164 loc_401164:                             ; CODE XREF: sub_401130+14↑j</span><br><span class=\"line\">.text:00401164                 mov     edx, [ebp-4]</span><br><span class=\"line\">.text:00401167                 mov     dword ptr [edx], offset ??_7Sofa@@6B@_0 ; 设置虚表指针为自身（Sofa）虚表</span><br><span class=\"line\">.text:0040116D                 mov     eax, [ebp-4]    ; 下面通过this指针和虚基类偏移表定位到虚基类Furniture的虚表指针</span><br><span class=\"line\">.text:00401170                 mov     ecx, [eax+4]    ; 此处获取虚基类偏移表并保存至ecx</span><br><span class=\"line\">.text:00401173                 mov     edx, [ecx+4]    ; 此处获取虚基类虚表指针（虚基类首地址）相对于虚基类偏移表的偏移并保存至edx</span><br><span class=\"line\">.text:00401176                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:00401179                 mov     dword ptr [eax+edx+4], offset ??_7Sofa@@6B@ ; 用Sofa虚表指针覆盖Furniture类虚表指针</span><br><span class=\"line\">.text:00401181                 push    offset aSofaSofa ; 执行Sofa构造函数内的代码</span><br><span class=\"line\">.text:00401186                 call    printf</span><br><span class=\"line\">.text:0040118B                 add     esp, 4</span><br><span class=\"line\">.text:0040118E                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:00401191                 mov     edx, [ecx+4]</span><br><span class=\"line\">.text:00401194                 mov     eax, [edx+4]</span><br><span class=\"line\">.text:00401197                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:0040119A                 mov     dword ptr [ecx+eax+8], 1</span><br><span class=\"line\">.text:004011A2                 mov     edx, [ebp-4]</span><br><span class=\"line\">.text:004011A5                 mov     dword ptr [edx+8], 2</span><br><span class=\"line\">.text:004011AC                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:004011AF                 mov     esp, ebp</span><br><span class=\"line\">.text:004011B1                 pop     ebp</span><br><span class=\"line\">.text:004011B2                 retn    4</span><br><span class=\"line\">.text:004011B2 sub_401130      endp</span><br><span class=\"line\"></span><br><span class=\"line\">_DWORD *__thiscall sub_401130(_DWORD *this, int a2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  if ( a2 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    this[1] = &amp;unk_403258;</span><br><span class=\"line\">    sub_401080(this + 3);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *this = &amp;Sofa::`vftable&#x27;;</span><br><span class=\"line\">  *(_DWORD *)((char *)this + *(_DWORD *)(this[1] + 4) + 4) = &amp;Sofa::`vftable&#x27;;</span><br><span class=\"line\">  printf(&quot;Sofa::Sofa()\\n&quot;);</span><br><span class=\"line\">  *(_DWORD *)((char *)this + *(_DWORD *)(this[1] + 4) + 8) = 1;</span><br><span class=\"line\">  this[2] = 2;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//父类Bed构造函数</span><br><span class=\"line\">.text:004012B0 ; _DWORD *__thiscall sub_4012B0(_DWORD *this, int)</span><br><span class=\"line\">.text:004012B0 sub_4012B0      proc near               ; CODE XREF: sub_401440+7D↓p</span><br><span class=\"line\">.text:004012B0</span><br><span class=\"line\">.text:004012B0 var_8           = dword ptr -8</span><br><span class=\"line\">.text:004012B0 var_4           = dword ptr -4</span><br><span class=\"line\">.text:004012B0 arg_0           = dword ptr  8</span><br><span class=\"line\">.text:004012B0</span><br><span class=\"line\">.text:004012B0                 push    ebp             ; 父类Bed构造函数</span><br><span class=\"line\">.text:004012B1                 mov     ebp, esp</span><br><span class=\"line\">.text:004012B3                 sub     esp, 8</span><br><span class=\"line\">.text:004012B6                 mov     [ebp-4], ecx    ; 保存this指针</span><br><span class=\"line\">.text:004012B9                 mov     dword ptr [ebp-8], 0</span><br><span class=\"line\">.text:004012C0                 cmp     dword ptr [ebp+8], 0 ; 判断是否要构造虚基类，0为不构造</span><br><span class=\"line\">.text:004012C4                 jz      short loc_4012E4</span><br><span class=\"line\">.text:004012C6                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:004012C9                 mov     dword ptr [eax+4], offset unk_40326C ; 设置父类Sofa中的虚基类偏移表</span><br><span class=\"line\">.text:004012D0                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:004012D3                 add     ecx, 10h        ; 获取虚基类Furniture对象的首地址</span><br><span class=\"line\">.text:004012D6                 call    sub_401080      ; 调用虚基类Furniture的构造函数</span><br><span class=\"line\">.text:004012DB                 mov     ecx, [ebp-8]</span><br><span class=\"line\">.text:004012DE                 or      ecx, 1</span><br><span class=\"line\">.text:004012E1                 mov     [ebp-8], ecx</span><br><span class=\"line\">.text:004012E4</span><br><span class=\"line\">.text:004012E4 loc_4012E4:                             ; CODE XREF: sub_4012B0+14↑j</span><br><span class=\"line\">.text:004012E4                 mov     edx, [ebp-4]</span><br><span class=\"line\">.text:004012E7                 mov     dword ptr [edx], offset ??_7Bed@@6B@ ; 设置虚表指针为自身（Bed）虚表</span><br><span class=\"line\">.text:004012ED                 mov     eax, [ebp-4]    ; 下面通过this指针和虚基类偏移表定位到虚基类Furniture的虚表指针</span><br><span class=\"line\">.text:004012F0                 mov     ecx, [eax+4]    ; 此处获取虚基类偏移表并保存至ecx</span><br><span class=\"line\">.text:004012F3                 mov     edx, [ecx+4]    ; 此处获取虚基类虚表指针（虚基类首地址）相对于虚基类偏移表的偏移并保存至edx</span><br><span class=\"line\">.text:004012F6                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:004012F9                 mov     dword ptr [eax+edx+4], offset ??_7Bed@@6B@_0 ; 用Bed虚表指针覆盖Furniture类虚表指针</span><br><span class=\"line\">.text:00401301                 push    offset aBedBed  ; 执行Bed构造函数内的代码</span><br><span class=\"line\">.text:00401306                 call    printf</span><br><span class=\"line\">.text:0040130B                 add     esp, 4</span><br><span class=\"line\">.text:0040130E                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:00401311                 mov     edx, [ecx+4]</span><br><span class=\"line\">.text:00401314                 mov     eax, [edx+4]</span><br><span class=\"line\">.text:00401317                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:0040131A                 mov     dword ptr [ecx+eax+8], 3</span><br><span class=\"line\">.text:00401322                 mov     edx, [ebp+var_4]</span><br><span class=\"line\">.text:00401325                 mov     dword ptr [edx+8], 4</span><br><span class=\"line\">.text:0040132C                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:0040132F                 mov     dword ptr [eax+0Ch], 5</span><br><span class=\"line\">.text:00401336                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:00401339                 mov     esp, ebp</span><br><span class=\"line\">.text:0040133B                 pop     ebp</span><br><span class=\"line\">.text:0040133C                 retn    4</span><br><span class=\"line\">.text:0040133C sub_4012B0      end</span><br><span class=\"line\"></span><br><span class=\"line\">_DWORD *__thiscall sub_4012B0(_DWORD *this, int a2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  if ( a2 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    this[1] = &amp;unk_40326C;</span><br><span class=\"line\">    sub_401080(this + 4);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *this = &amp;Bed::`vftable&#x27;;</span><br><span class=\"line\">  *(_DWORD *)((char *)this + *(_DWORD *)(this[1] + 4) + 4) = &amp;Bed::`vftable&#x27;;</span><br><span class=\"line\">  printf(&quot;Bed::Bed()\\n&quot;);</span><br><span class=\"line\">  *(_DWORD *)((char *)this + *(_DWORD *)(this[1] + 4) + 8) = 3;</span><br><span class=\"line\">  this[2] = 4;</span><br><span class=\"line\">  this[3] = 5;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>汇编代码5展示了子类SofaBed的构造过程，在VS和Clang编译器中，它的特别之处在于调用时要传入一个参数。这个参数是一个标志信息，构造过程中要先构造父类，然后构造自己。SofaBed的两个父类有一个共同的父类，如果没有构造标记，它们共同的父类将会被构造两次，因此需要使用构造标记防止重复构造的问题，构造顺序如下所示。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Furniture</span><br><span class=\"line\"></span><br><span class=\"line\">Sofa（根据标记跳过Furniture构造）</span><br><span class=\"line\"></span><br><span class=\"line\">Bed（根据标记跳过Furniture构造）</span><br><span class=\"line\"></span><br><span class=\"line\">SofaBed自身</span><br></pre></td></tr></table></figure>\n\n<p>SofaBed也使用了构造标记，当SofaBed是父类时，这个标记将产生作用，跳过所有父类的构造，只构造自身。当标记为1时，构造父类；当标记为0时，跳过构造函数。对于GCC编译器，并没有采用构造标记方案，编译器会生成一个父类构造代理函数，该构造函数不会调用虚基类构造函数；对于正常实例化的父类对象，GCC编译器不会调用该构造代理函数。</p>\n<h2 id=\"虚继承结构的子类析构\"><a href=\"#虚继承结构的子类析构\" class=\"headerlink\" title=\"虚继承结构的子类析构\"></a>虚继承结构的子类析构</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//析构代理函数</span><br><span class=\"line\">.text:00401620 ; int __thiscall std::iostream::`vbase destructor&#x27;(void *this)</span><br><span class=\"line\">.text:00401620 ??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ proc near</span><br><span class=\"line\">.text:00401620                                         ; CODE XREF: sub_4015E0+D↑p</span><br><span class=\"line\">.text:00401620                                         ; _main+85↓p</span><br><span class=\"line\">.text:00401620</span><br><span class=\"line\">.text:00401620 var_4           = dword ptr -4</span><br><span class=\"line\">.text:00401620</span><br><span class=\"line\">.text:00401620                 push    ebp             ; 析构代理函数</span><br><span class=\"line\">.text:00401621                 mov     ebp, esp</span><br><span class=\"line\">.text:00401623                 push    ecx</span><br><span class=\"line\">.text:00401624                 mov     [ebp-4], ecx</span><br><span class=\"line\">.text:00401627                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:0040162A                 add     ecx, 20h ; &#x27; &#x27;  ; 调整this指针为虚基类</span><br><span class=\"line\">.text:0040162D                 call    sub_401520      ; 调用SofaBed的析构函数</span><br><span class=\"line\">.text:00401632                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:00401635                 add     ecx, 20h ; &#x27; &#x27;  ; 调整this指针为虚基类</span><br><span class=\"line\">.text:00401638                 call    sub_4010B0      ; 调用虚基类Furniture的析构函数</span><br><span class=\"line\">.text:0040163D                 mov     esp, ebp</span><br><span class=\"line\">.text:0040163F                 pop     ebp</span><br><span class=\"line\">.text:00401640                 retn</span><br><span class=\"line\">.text:00401640 ??_D?$basic_iostream@DU?$char_traits@D@std@@@std@@QAEXXZ endp</span><br><span class=\"line\"></span><br><span class=\"line\">int __thiscall std::iostream::`vbase destructor&#x27;(void *this)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char v2; // [esp+0h] [ebp-4h]</span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = (char)this;</span><br><span class=\"line\">  sub_401520((int)this + 32);</span><br><span class=\"line\">  return sub_4010B0(v2 + 32);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//SofaBed的析构函数</span><br><span class=\"line\">.text:00401520 ; int __fastcall sub_401520(int)</span><br><span class=\"line\">.text:00401520 sub_401520      proc near               ; CODE XREF: std::iostream::`vbase destructor&#x27;(void)+D↓p</span><br><span class=\"line\">.text:00401520</span><br><span class=\"line\">.text:00401520 var_4           = dword ptr -4</span><br><span class=\"line\">.text:00401520</span><br><span class=\"line\">.text:00401520                 push    ebp</span><br><span class=\"line\">.text:00401521                 mov     ebp, esp</span><br><span class=\"line\">.text:00401523                 push    ecx             ; char</span><br><span class=\"line\">.text:00401524                 mov     [ebp-4], ecx    ; 保存this指针，此时this指针指向虚基类</span><br><span class=\"line\">.text:00401527                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:0040152A                 mov     dword ptr [eax-20h], offset ??_7SofaBed@@6B@_1 ; const SofaBed::`vftable&#x27;</span><br><span class=\"line\">.text:0040152A                                         ; 调整this指针为Sofa，还原虚表指针为SofaBed</span><br><span class=\"line\">.text:00401531                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:00401534                 mov     dword ptr [ecx-14h], offset ??_7SofaBed@@6B@_0 ; const SofaBed::`vftable&#x27;</span><br><span class=\"line\">.text:00401534                                         ; 调整this指针为Bed，还原虚表指针为SofaBed</span><br><span class=\"line\">.text:0040153B                 mov     edx, [ebp-4]</span><br><span class=\"line\">.text:0040153E                 mov     eax, [edx-1Ch]  ; 获取Sofa类的虚基类偏移表</span><br><span class=\"line\">.text:00401541                 mov     ecx, [eax+4]    ; 从虚基类偏移表中获取虚基类偏移</span><br><span class=\"line\">.text:00401544                 mov     edx, [ebp-4]</span><br><span class=\"line\">.text:00401547                 mov     dword ptr [edx+ecx-1Ch], offset ??_7SofaBed@@6B@ ; const SofaBed::`vftable&#x27;</span><br><span class=\"line\">.text:00401547                                         ; 调整this指针为虚基类，还原虚表指针为SofaBed，到此为止，3个虚表指针还原完毕，执行析构函数内的代码</span><br><span class=\"line\">.text:0040154F                 push    offset aSofabedSofabed_0 ; &quot;SofaBed::~SofaBed()\\n&quot;</span><br><span class=\"line\">.text:00401554                 call    printf</span><br><span class=\"line\">.text:00401559                 add     esp, 4</span><br><span class=\"line\">.text:0040155C                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:0040155F                 sub     ecx, 4          ; 调整指针到已析构的位置（即SofaBed自身内容的首地址）</span><br><span class=\"line\">.text:00401562                 call    sub_401340      ; 调用父类Bed析构函数</span><br><span class=\"line\">.text:00401567                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:0040156A                 sub     ecx, 14h        ; 调整指针到已析构的位置（即Bed自身内容的首地址）</span><br><span class=\"line\">.text:0040156D                 call    sub_4011C0      ; 调用父类Sofa析构函数</span><br><span class=\"line\">.text:00401572                 mov     esp, ebp</span><br><span class=\"line\">.text:00401574                 pop     ebp</span><br><span class=\"line\">.text:00401575                 retn</span><br><span class=\"line\">.text:00401575 sub_401520      endp</span><br><span class=\"line\"></span><br><span class=\"line\">int __fastcall sub_401520(int a1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  char v2; // [esp+0h] [ebp-4h]</span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = a1;</span><br><span class=\"line\">  *(_DWORD *)(a1 - 32) = &amp;SofaBed::`vftable&#x27;;</span><br><span class=\"line\">  *(_DWORD *)(a1 - 20) = &amp;SofaBed::`vftable&#x27;;</span><br><span class=\"line\">  *(_DWORD *)(a1 + *(_DWORD *)(*(_DWORD *)(a1 - 28) + 4) - 28) = &amp;SofaBed::`vftable&#x27;;</span><br><span class=\"line\">  printf(&quot;SofaBed::~SofaBed()\\n&quot;);</span><br><span class=\"line\">  sub_401340(v2 - 4);</span><br><span class=\"line\">  return sub_4011C0(v2 - 20);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//父类Bed析构函数</span><br><span class=\"line\">.text:00401340 ; int __fastcall sub_401340(int)</span><br><span class=\"line\">.text:00401340 sub_401340      proc near               ; CODE XREF: sub_401410+D↓p</span><br><span class=\"line\">.text:00401340                                         ; sub_401520+42↓p</span><br><span class=\"line\">.text:00401340</span><br><span class=\"line\">.text:00401340 var_4           = dword ptr -4</span><br><span class=\"line\">.text:00401340</span><br><span class=\"line\">.text:00401340                 push    ebp</span><br><span class=\"line\">.text:00401341                 mov     ebp, esp</span><br><span class=\"line\">.text:00401343                 push    ecx             ; char</span><br><span class=\"line\">.text:00401344                 mov     [ebp-4], ecx</span><br><span class=\"line\">.text:00401347                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:0040134A                 mov     dword ptr [eax-10h], offset ??_7Bed@@6B@ ; 调整this指针为Bed，还原虚表指针为Bed</span><br><span class=\"line\">.text:00401351                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:00401354                 mov     edx, [ecx-0Ch]  ; 获取Bed虚基类偏移表并保存至edx</span><br><span class=\"line\">.text:00401357                 mov     eax, [edx+4]    ; 获取虚基类对象首地址相对于虚基类偏移表的偏移并保存至eax</span><br><span class=\"line\">.text:0040135A                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:0040135D                 mov     dword ptr [ecx+eax-0Ch], offset ??_7Bed@@6B@_0 ; 调整this指针为虚基类，还原虚表指针为Bed</span><br><span class=\"line\">.text:00401365                 push    offset aBedBed_0 ; 执行析构函数内代码</span><br><span class=\"line\">.text:0040136A                 call    printf</span><br><span class=\"line\">.text:0040136F                 add     esp, 4</span><br><span class=\"line\">.text:00401372                 mov     esp, ebp</span><br><span class=\"line\">.text:00401374                 pop     ebp</span><br><span class=\"line\">.text:00401375                 retn</span><br><span class=\"line\">.text:00401375 sub_401340      endp</span><br><span class=\"line\"></span><br><span class=\"line\">int __fastcall sub_401340(int a1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  *(_DWORD *)(a1 - 16) = &amp;Bed::`vftable&#x27;;</span><br><span class=\"line\">  *(_DWORD *)(a1 + *(_DWORD *)(*(_DWORD *)(a1 - 12) + 4) - 12) = &amp;Bed::`vftable&#x27;;</span><br><span class=\"line\">  return printf(&quot;Bed::~Bed()\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//父类Sofa析构函数</span><br><span class=\"line\">.text:004011C0 ; int __fastcall sub_4011C0(int)</span><br><span class=\"line\">.text:004011C0 sub_4011C0      proc near               ; CODE XREF: sub_401280+D↓p</span><br><span class=\"line\">.text:004011C0                                         ; sub_401520+4D↓p ...</span><br><span class=\"line\">.text:004011C0</span><br><span class=\"line\">.text:004011C0 var_4           = dword ptr -4</span><br><span class=\"line\">.text:004011C0</span><br><span class=\"line\">.text:004011C0                 push    ebp</span><br><span class=\"line\">.text:004011C1                 mov     ebp, esp</span><br><span class=\"line\">.text:004011C3                 push    ecx             ; char</span><br><span class=\"line\">.text:004011C4                 mov     [ebp-4], ecx</span><br><span class=\"line\">.text:004011C7                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:004011CA                 mov     dword ptr [eax-0Ch], offset ??_7Sofa@@6B@_0 ; 调整this指针为Sofa，还原虚表指针为Sofa</span><br><span class=\"line\">.text:004011D1                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:004011D4                 mov     edx, [ecx-8]    ; 获取Sofa虚基类偏移表并保存至edx</span><br><span class=\"line\">.text:004011D7                 mov     eax, [edx+4]    ; 获取虚基类对象首地址相对于虚基类偏移表的偏移并保存至eax</span><br><span class=\"line\">.text:004011DA                 mov     ecx, [ebp-4]</span><br><span class=\"line\">.text:004011DD                 mov     dword ptr [ecx+eax-8], offset ??_7Sofa@@6B@ ; 调整this指针为虚基类，还原虚表指针为Sofa</span><br><span class=\"line\">.text:004011E5                 push    offset aSofaSofa_0 ; 执行析构函数内代码</span><br><span class=\"line\">.text:004011EA                 call    printf</span><br><span class=\"line\">.text:004011EF                 add     esp, 4</span><br><span class=\"line\">.text:004011F2                 mov     esp, ebp</span><br><span class=\"line\">.text:004011F4                 pop     ebp</span><br><span class=\"line\">.text:004011F5                 retn</span><br><span class=\"line\">.text:004011F5 sub_4011C0      endp</span><br><span class=\"line\"></span><br><span class=\"line\">int __fastcall sub_4011C0(int a1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  *(_DWORD *)(a1 - 12) = &amp;Sofa::`vftable&#x27;;</span><br><span class=\"line\">  *(_DWORD *)(a1 + *(_DWORD *)(*(_DWORD *)(a1 - 8) + 4) - 8) = &amp;Sofa::`vftable&#x27;;</span><br><span class=\"line\">  return printf(&quot;Sofa::~Sofa()\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//虚基类Furniture的析构函数</span><br><span class=\"line\">.text:004010B0 ; int __fastcall sub_4010B0(_DWORD *)</span><br><span class=\"line\">.text:004010B0 sub_4010B0      proc near               ; CODE XREF: sub_401100+A↓p</span><br><span class=\"line\">.text:004010B0                                         ; sub_401280+18↓p ...</span><br><span class=\"line\">.text:004010B0</span><br><span class=\"line\">.text:004010B0 var_4           = dword ptr -4</span><br><span class=\"line\">.text:004010B0</span><br><span class=\"line\">.text:004010B0                 push    ebp</span><br><span class=\"line\">.text:004010B1                 mov     ebp, esp</span><br><span class=\"line\">.text:004010B3                 push    ecx             ; char</span><br><span class=\"line\">.text:004010B4                 mov     [ebp-4], ecx</span><br><span class=\"line\">.text:004010B7                 mov     eax, [ebp-4]</span><br><span class=\"line\">.text:004010BA                 mov     dword ptr [eax], offset ??_7Furniture@@6B@ ; 将虚表设置为Furniture虚基类的虚表</span><br><span class=\"line\">.text:004010C0                 push    offset aFurnitureFurni_0 ; 下面执行虚基类析构函数内的代码</span><br><span class=\"line\">.text:004010C5                 call    printf</span><br><span class=\"line\">.text:004010CA                 add     esp, 4</span><br><span class=\"line\">.text:004010CD                 mov     esp, ebp</span><br><span class=\"line\">.text:004010CF                 pop     ebp</span><br><span class=\"line\">.text:004010D0                 retn</span><br><span class=\"line\">.text:004010D0 sub_4010B0      endp</span><br><span class=\"line\"></span><br><span class=\"line\">int __fastcall sub_4010B0(_DWORD *a1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  *a1 = &amp;Furniture::`vftable&#x27;;</span><br><span class=\"line\">  return printf(&quot;Furniture::~Furniture()\\n&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据上面汇编代码的分析可知，虚继承结构中子类的析构函数执行流程并没有像构造函数那样使用标记防止重复析构，而是将虚基类放在最后调用。先依次执行两个父类Bed和Sofa的析构函数，然后执行虚基类的析构函数。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><strong>为什么编译器要在子类析构函数中再次将虚表设置为子类虚表呢？</strong></p>\n<p>这个操作非常必要，因为编译器无法预知这个子类以后是否会被其他类继承，如果被继承，原来的子类就成了父类，在执行析构函数时会先执行当前对象的析构函数，然后向祖父类的方向按继承线路逐层调用各类析构函数，当前对象的析构函数开始执行时，其虚表也是当前对象的，所以执行到父类的析构函数时，虚表必须改写为父类的虚表。编译器产生的类实现代码，必须能够适应将来不可预知的对象关系，故在每个对象的析构函数内，要加入自己虚表的代码。</p>\n","text":"抽象类在编码过程中，抽象类的定义需要配合虚函数使用。在虚函数的声明结尾处添加“=0”，这种虚函数被称为纯虚函数。纯虚函数是一个没有实现只有声明的函数，它的存在就...","permalink":"/post/C++逆向——抽象类与虚继承","photos":[],"count_time":{"symbolsCount":"48k","symbolsTime":"44 mins."},"categories":[],"tags":[{"name":"c++逆向","slug":"c-逆向","count":9,"path":"api/tags/c-逆向.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB\"><span class=\"toc-text\">抽象类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%88%86%E6%9E%90\"><span class=\"toc-text\">纯虚函数的分析</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%99%9A%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">虚继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8F%B1%E5%BD%A2%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">菱形继承</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%99%9A%E7%BB%A7%E6%89%BF%E7%9A%84%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">虚继承的内存结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E8%99%9A%E8%A1%A8%E6%8C%87%E9%92%88\"><span class=\"toc-text\">关于虚表指针</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%99%9A%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E7%9A%84%E7%B1%BB%E7%BB%A7%E6%89%BF%E5%92%8C%E6%B4%BE%E7%94%9F\"><span class=\"toc-text\">虚继承结构的类继承和派生</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%99%9A%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E7%9A%84%E5%AD%90%E7%B1%BB%E6%9E%84%E9%80%A0\"><span class=\"toc-text\">虚继承结构的子类构造</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%99%9A%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E7%9A%84%E5%AD%90%E7%B1%BB%E6%9E%90%E6%9E%84\"><span class=\"toc-text\">虚继承结构的子类析构</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C++逆向——全局类对象","uid":"1329f4c6c2b96d3a354509a097c90b2b","slug":"C++逆向——全局类对象","date":"2023-03-09T13:44:59.000Z","updated":"2025-06-07T18:51:53.810Z","comments":true,"path":"api/articles/C++逆向——全局类对象.json","keywords":null,"cover":[],"text":"全局对象 生命周期: main 开始之前构造 ,main结束之后析构 因此在main函数之前初始化,构造属于初始化,因此在Inititem（c++) 中构造 先...","permalink":"/post/C++逆向——全局类对象","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"c++逆向","slug":"c-逆向","count":9,"path":"api/tags/c-逆向.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"C++逆向——多重继承","uid":"9301d0d9fdad61b6c1164e4bbd50c3da","slug":"C++逆向——多重继承","date":"2023-02-17T07:22:42.000Z","updated":"2025-06-07T18:30:39.668Z","comments":true,"path":"api/articles/C++逆向——多重继承.json","keywords":null,"cover":[],"text":"当子类拥有多个父类（如类C继承自类A同时也继承自类B）时，便构成了多重继承关系。在多重继承的情况下，子类继承的父类变为多个，但其结构与单一继承相似。 多重继承类...","permalink":"/post/C++逆向——多重继承","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[],"tags":[{"name":"c++逆向","slug":"c-逆向","count":9,"path":"api/tags/c-逆向.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}