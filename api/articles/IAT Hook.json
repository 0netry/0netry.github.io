{"title":"IAT Hook","uid":"0f25dc3ea7a3ffec9ce07cef8295e4e2","slug":"IAT Hook","date":"2022-03-25T02:23:09.000Z","updated":"2025-06-04T10:06:36.233Z","comments":true,"path":"api/articles/IAT Hook.json","keywords":null,"cover":null,"content":"<h1 id=\"IAT-Hook\"><a href=\"#IAT-Hook\" class=\"headerlink\" title=\"IAT Hook\"></a>IAT Hook</h1><h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><p>通过注入DLL文件来钩取某个API，DLL文件注入目标进程后，修改IAT来更改进程中调用的特定API功能。</p>\n<h2 id=\"API功能\"><a href=\"#API功能\" class=\"headerlink\" title=\"API功能\"></a>API功能</h2><ul>\n<li><p>kernel32!CreateFile()：创建文件</p>\n</li>\n<li><p>advapi32!RegCreateKeyEx()：创建注册表新键</p>\n</li>\n<li><p>ws2_32!connect()：网络连接</p>\n</li>\n</ul>\n<h1 id=\"IAT钩取工作原理\"><a href=\"#IAT钩取工作原理\" class=\"headerlink\" title=\"IAT钩取工作原理\"></a>IAT钩取工作原理</h1><p>这种Hook技术是通过分析目标程序PE结构，替换目标API在IAT中的地址为钩子函数的地址来实现。</p>\n<h3 id=\"IAT和PE文件结构\"><a href=\"#IAT和PE文件结构\" class=\"headerlink\" title=\"IAT和PE文件结构\"></a>IAT和PE文件结构</h3><p>要了解这种Hook技术，首先需要知道IAT和PE文件结构。</p>\n<p>PE文件是Windows下可执行文件和DLL等文件的一种规范。实际上，exe文件在磁盘中的映射就是PE格式，可以通过PE工具查看exe文件来进行研究。</p>\n<p>当程序被加载的时候，windows加载函数会定位所有的导入数据和代码，这样的实际做法就是将DLL文件映射到进程的地址空间中，实际上这个映射的过程就是通过PE文件的头部信息来实施的，因为PE文件头部中存储了所有需要导入的DLL的模块名称以及导入函数。</p>\n<p>实际上IAT存储了进程中所有的导入的DLL和其对应的导入函数的信息，要找到某个导入函数的地址，那么必须要定位到导入表。因为导入表的存储位置就在PE文件头中，所以了解PE文件是非常有必要的。</p>\n<p>PE文件的真正头部紧接Dos头，在Dos头的最后一个字段e_lfanew指向的是PE头的地址，在PE Header的结构IMAGE_NT_HEADER中，有一个结构IMAGE_OPTIONAL_HEADER，这个结构中有一个IMAGE_DATA_DIRECTORY（数据目录）类型的数组，其中第二个元素就是存储的导入表的相对虚拟地址和大小，通过这个可以定位到导入表的地址，从而找到对应的函数的地址。</p>\n<p>导入表的结构为IAMGE_IMPORT_DESCRIPTOR ，它的第一个参数OriginFirstThunk和最后一个参数FirstThunk分别指向的是同一种结构IMAGE_THUNK_DATA，但是因为这个结构体中是一个联合结构，所以根据这个DWORD类型的值的不同所表示的意义也不同。OriginFirstThunk指向的这个结构表示的是一个导入序号；而FirstThunk指向的这个结构表示的是函数的名字，这时DWORD的值表示的是一个RVA，并指向个IMAGE_IMPORT_BY_NAME结构。</p>\n<p>在装载PE文件的时候，装载器会遍历OriginFirstThunk指向的IMAGE_THUNK_DATA数组，找到每个IAMGE_THUNK_DATA结构中函数所对应的地址，然后加载器用函数真正的入口地址来代替FirstThunk指向的数组，这个地址数组我们称之为IAT（导入地址表）。</p>\n<h3 id=\"IAT-HOOK\"><a href=\"#IAT-HOOK\" class=\"headerlink\" title=\"IAT HOOK\"></a>IAT HOOK</h3><p>介绍了原理，下面就是最重要的东西了——IAT HOOK。</p>\n<p>那么我们的钩子函数从何而来呢？依然是两种方法可以获得，第一种是API函数；另一种是我们自己构造的函数，而我们构造的函数可以通过直接注入代码到目标进程或通过注入DLL而来导入我们的函数进入目标进程。</p>\n<p>实际上到这里我们的思路已经很清晰了，只要修改IAT中函数的入口点地址为我们构造的函数的地址，那么程序调用此API时实际上调用的就是我们自己构造的函数。既然要修改IAT中的内容，那么就必须要定位IAT的地址。</p>\n<p>上面的过程可以描述为:对于一个PE文件映像，从偏移位置0开始就是Dos Header,在Dos头中我们知道有一个指针e_lfanew指向真正的PE文件头，通过PE文件头可以得到数据目录，而数据目录的第二个元素就是存储的导入表的信息，通过导入表的信息我们可以定位到导入表，其结构为IMAGE_IMPORT_DESCRIPTOR，再通过遍历所有的IMAGE_IMPORT_DESCRIPTOR结构可以得到所有的DLL文件名，通过遍历每个结构的FirstThunk成员可以得到每个函数的地址，通过遍历每个结构的OriginalFirstThunk所指向的IMAGE_IMPORT_BY_NAME可以得到每个函数的导出函数名。</p>\n<h1 id=\"基于Win10的计算器显示中文数字练习\"><a href=\"#基于Win10的计算器显示中文数字练习\" class=\"headerlink\" title=\"基于Win10的计算器显示中文数字练习\"></a>基于Win10的计算器显示中文数字练习</h1><h2 id=\"1-运行过程展示\"><a href=\"#1-运行过程展示\" class=\"headerlink\" title=\"1.运行过程展示\"></a>1.运行过程展示</h2><p>将calc.exe、InjectDll.exe、hookiat.dll复制到同一个目录下，运行calc.exe，然后打开Process Explorer查看计算器的PID，接着在命令窗口输入命令<code>InjectDll.exe i PID hookiat.dll </code> ，即可将hookiat.dll注入到计算器中（可在Process Explorer查看到），接着输入数字时可以发现显示了中文</p>\n<p>![IAT Hook计算器显示中文数字结果](.&#x2F;IAT Hook&#x2F;IAT Hook计算器显示中文数字结果.png)</p>\n<h2 id=\"2-代码流程分析\"><a href=\"#2-代码流程分析\" class=\"headerlink\" title=\"2.代码流程分析\"></a>2.代码流程分析</h2><h3 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// include</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;wchar.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;windows.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// typedef</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">BOOL</span> <span class=\"params\">(WINAPI *PFSETWINDOWTEXTW)</span><span class=\"params\">(HWND hWnd, LPWSTR lpString)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// globals</span></span><br><span class=\"line\">FARPROC g_pOrgFunc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL WINAPI <span class=\"title function_\">MySetWindowTextW</span><span class=\"params\">(HWND hWnd, LPWSTR lpString)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">wchar_t</span>* pNum = <span class=\"string\">L&quot;零一二三四五六七八九&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">wchar_t</span> temp[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>,&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>, nLen = <span class=\"number\">0</span>, nIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    nLen = wcslen(lpString);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; nLen; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将阿拉伯数字转换为中文数字</span></span><br><span class=\"line\">        <span class=\"comment\">//lpString是 wide-character (宽字符，2 byte)字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( <span class=\"string\">L&#x27;0&#x27;</span> &lt;= lpString[i] &amp;&amp; lpString[i] &lt;= <span class=\"string\">L&#x27;9&#x27;</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp[<span class=\"number\">0</span>] = lpString[i];</span><br><span class=\"line\">            nIndex = _wtoi(temp);</span><br><span class=\"line\">            lpString[i] = pNum[nIndex];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用user32!SetWindowTextW() API</span></span><br><span class=\"line\">    <span class=\"comment\">// (修改lpString缓冲区中的内容)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((PFSETWINDOWTEXTW)g_pOrgFunc)(hWnd, lpString);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL <span class=\"title function_\">hook_iat</span><span class=\"params\">(LPCSTR szDllName, PROC pfnOrg, PROC pfnNew)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHMODULE hMod;</span><br><span class=\"line\">\tLPCSTR szLibName;</span><br><span class=\"line\">\tPIMAGE_IMPORT_DESCRIPTOR pImportDesc; </span><br><span class=\"line\">\tPIMAGE_THUNK_DATA pThunk;</span><br><span class=\"line\">\tDWORD dwOldProtect, dwRVA;</span><br><span class=\"line\">\tPBYTE pAddr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// hMod, pAddr = ImageBase of calc.exe</span></span><br><span class=\"line\">    <span class=\"comment\">//             = VA to MZ signature (IMAGE_DOS_HEADER)</span></span><br><span class=\"line\">\thMod = GetModuleHandle(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tpAddr = (PBYTE)hMod;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// pAddr = VA to PE signature (IMAGE_NT_HEADERS)</span></span><br><span class=\"line\">\tpAddr += *((DWORD*)&amp;pAddr[<span class=\"number\">0x3C</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// dwRVA = RVA to IMAGE_IMPORT_DESCRIPTOR Table</span></span><br><span class=\"line\">\tdwRVA = *((DWORD*)&amp;pAddr[<span class=\"number\">0x80</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// pImportDesc = VA to IMAGE_IMPORT_DESCRIPTOR Table</span></span><br><span class=\"line\">\tpImportDesc = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)hMod+dwRVA);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>( ; pImportDesc-&gt;Name; pImportDesc++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"comment\">// szLibName = VA to IMAGE_IMPORT_DESCRIPTOR.Name</span></span><br><span class=\"line\">\t\tszLibName = (LPCSTR)((DWORD)hMod + pImportDesc-&gt;Name);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( !_stricmp(szLibName, szDllName) )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            <span class=\"comment\">// pThunk = IMAGE_IMPORT_DESCRIPTOR.FirstThunk</span></span><br><span class=\"line\">            <span class=\"comment\">//        = VA to IAT(Import Address Table)</span></span><br><span class=\"line\">\t\t\tpThunk = (PIMAGE_THUNK_DATA)((DWORD)hMod + </span><br><span class=\"line\">                                         pImportDesc-&gt;FirstThunk);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// pThunk-&gt;u1.Function = VA to API</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>( ; pThunk-&gt;u1.Function; pThunk++ )</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>( pThunk-&gt;u1.Function == (DWORD)pfnOrg )</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 更改内存属性为E/R/W</span></span><br><span class=\"line\">\t\t\t\t\tVirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, </span><br><span class=\"line\">                                   <span class=\"number\">4</span>, </span><br><span class=\"line\">                                   PAGE_EXECUTE_READWRITE, </span><br><span class=\"line\">                                   &amp;dwOldProtect);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 修改IAT值（钩取）</span></span><br><span class=\"line\">                    pThunk-&gt;u1.Function = (DWORD)pfnNew;</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">                    <span class=\"comment\">// 恢复内存属性</span></span><br><span class=\"line\">                    VirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, </span><br><span class=\"line\">                                   <span class=\"number\">4</span>, </span><br><span class=\"line\">                                   dwOldProtect, </span><br><span class=\"line\">                                   &amp;dwOldProtect);\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL WINAPI <span class=\"title function_\">DllMain</span><span class=\"params\">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>( fdwReason )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> DLL_PROCESS_ATTACH : </span><br><span class=\"line\">            <span class=\"comment\">// 保存原始API地址</span></span><br><span class=\"line\">           \tg_pOrgFunc = GetProcAddress(GetModuleHandle(<span class=\"string\">L&quot;user32.dll&quot;</span>), </span><br><span class=\"line\">                                        <span class=\"string\">&quot;SetWindowTextW&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// # hook</span></span><br><span class=\"line\">            <span class=\"comment\">// 用hookiat!MySetWindowText()钩取user32!SetWindowTextW()</span></span><br><span class=\"line\">\t\t\thook_iat(<span class=\"string\">&quot;user32.dll&quot;</span>, g_pOrgFunc, (PROC)MySetWindowTextW);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> DLL_PROCESS_DETACH :</span><br><span class=\"line\">            <span class=\"comment\">// # unhook</span></span><br><span class=\"line\">            <span class=\"comment\">// 将calc.exe的IAT恢复原值</span></span><br><span class=\"line\">            hook_iat(<span class=\"string\">&quot;user32.dll&quot;</span>, (PROC)MySetWindowTextW, g_pOrgFunc);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DllMain\"><a href=\"#DllMain\" class=\"headerlink\" title=\"DllMain()\"></a>DllMain()</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL WINAPI <span class=\"title function_\">DllMain</span><span class=\"params\">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>( fdwReason )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> DLL_PROCESS_ATTACH : </span><br><span class=\"line\">            <span class=\"comment\">// 保存原始API地址</span></span><br><span class=\"line\">           \tg_pOrgFunc = GetProcAddress(GetModuleHandle(<span class=\"string\">L&quot;user32.dll&quot;</span>), </span><br><span class=\"line\">                                        <span class=\"string\">&quot;SetWindowTextW&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// # hook</span></span><br><span class=\"line\">            <span class=\"comment\">// 用hookiat!MySetWindowText()钩取user32!SetWindowTextW()</span></span><br><span class=\"line\">\t\t\thook_iat(<span class=\"string\">&quot;user32.dll&quot;</span>, g_pOrgFunc, (PROC)MySetWindowTextW);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> DLL_PROCESS_DETACH :</span><br><span class=\"line\">            <span class=\"comment\">// # unhook</span></span><br><span class=\"line\">            <span class=\"comment\">// 将calc.exe的IAT恢复原值</span></span><br><span class=\"line\">            hook_iat(<span class=\"string\">&quot;user32.dll&quot;</span>, (PROC)MySetWindowTextW, g_pOrgFunc);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>保存SetWindowTextW()地址</strong></p>\n<p>在DLL_PROCESS_ATTACH事件中先获取user32.SetWindowTextW()的地址，然后将其保存到全局变量g_pOrgFunc中后面脱钩时会用到这个地址</p>\n<p><strong>IAT钩取</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hook_iat(<span class=\"string\">&quot;user32.dll&quot;</span>, g_pOrgFunc, (PROC)MySetWindowTextW);</span><br></pre></td></tr></table></figure>\n\n<p>调用hook_iat函数钩取IAT（即将user32!SetWindowTextW()的地址更改为hookiat!MySetWindowText()的地址）。上面语句是发生DLL加载事件（DLL_PROCESS_ATTACH）时执行的所有操作。</p>\n<p><strong>IAT脱钩</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hook_iat(<span class=\"string\">&quot;user32.dll&quot;</span>, (PROC)MySetWindowTextW, g_pOrgFunc);</span><br></pre></td></tr></table></figure>\n\n<p>卸载DLL时会触发DLL_PROCESS_DETACH事件，发生该事件时，将进行IAT脱钩（即将用hookiat!MySetWindowText()的地址更改为user32!SetWindowTextW()的地址）</p>\n<h3 id=\"MySetWindowTextW-——钩取函数（钩子函数）\"><a href=\"#MySetWindowTextW-——钩取函数（钩子函数）\" class=\"headerlink\" title=\"MySetWindowTextW()——钩取函数（钩子函数）\"></a>MySetWindowTextW()——钩取函数（钩子函数）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL WINAPI <span class=\"title function_\">MySetWindowTextW</span><span class=\"params\">(HWND hWnd, LPWSTR lpString)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">wchar_t</span>* pNum = <span class=\"string\">L&quot;零一二三四五六七八九&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">wchar_t</span> temp[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>,&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>, nLen = <span class=\"number\">0</span>, nIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    nLen = wcslen(lpString);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; nLen; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将阿拉伯数字转换为中文数字</span></span><br><span class=\"line\">        <span class=\"comment\">//lpString是 wide-character (宽字符，2 byte)字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( <span class=\"string\">L&#x27;0&#x27;</span> &lt;= lpString[i] &amp;&amp; lpString[i] &lt;= <span class=\"string\">L&#x27;9&#x27;</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp[<span class=\"number\">0</span>] = lpString[i];</span><br><span class=\"line\">            nIndex = _wtoi(temp);</span><br><span class=\"line\">            lpString[i] = pNum[nIndex];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用user32!SetWindowTextW() API</span></span><br><span class=\"line\">    <span class=\"comment\">// (修改lpString缓冲区中的内容)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((PFSETWINDOWTEXTW)g_pOrgFunc)(hWnd, lpString);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>计算器进程的IAT被钩取后，每当代码中调用user32!SetWindowTextW()函数时，都会先调用hookiat!MySetWindowText()函数。</p>\n<p>接下来分析hookiat!MySetWindowText()函数的重要代码。hookiat!MySetWindowText()函数的lpString参数是一块缓冲区，该缓冲区用来存放要输出显示的字符串，所以操作lpString参数即可在计算器中显示用户指定的字符串。for循环结束，代码<code>return ((PFSETWINDOWTEXTW)g_pOrgFunc)(hWnd, lpString);</code>最后再调用函数指针g_pOrgFunc，它指向user32!SetWindowTextW()函数的起始地址（该地址在DllMain中已经获取并保存下来），也就是说，调用原来的SetWindowTextW()函数，将中文数字显示在计算器的显示框中。、</p>\n<h3 id=\"hook-iat\"><a href=\"#hook-iat\" class=\"headerlink\" title=\"hook_iat()\"></a>hook_iat()</h3><p>该函数是具体执行IAT钩取的函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOL <span class=\"title function_\">hook_iat</span><span class=\"params\">(LPCSTR szDllName, PROC pfnOrg, PROC pfnNew)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHMODULE hMod;</span><br><span class=\"line\">\tLPCSTR szLibName;</span><br><span class=\"line\">\tPIMAGE_IMPORT_DESCRIPTOR pImportDesc; </span><br><span class=\"line\">\tPIMAGE_THUNK_DATA pThunk;</span><br><span class=\"line\">\tDWORD dwOldProtect, dwRVA;</span><br><span class=\"line\">\tPBYTE pAddr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// hMod, pAddr = ImageBase of calc.exe</span></span><br><span class=\"line\">    <span class=\"comment\">//             = VA to MZ signature (IMAGE_DOS_HEADER)</span></span><br><span class=\"line\">\thMod = GetModuleHandle(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tpAddr = (PBYTE)hMod;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// pAddr = VA to PE signature (IMAGE_NT_HEADERS)</span></span><br><span class=\"line\">\tpAddr += *((DWORD*)&amp;pAddr[<span class=\"number\">0x3C</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// dwRVA = RVA to IMAGE_IMPORT_DESCRIPTOR Table</span></span><br><span class=\"line\">\tdwRVA = *((DWORD*)&amp;pAddr[<span class=\"number\">0x80</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// pImportDesc = VA to IMAGE_IMPORT_DESCRIPTOR Table</span></span><br><span class=\"line\">\tpImportDesc = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)hMod+dwRVA);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>( ; pImportDesc-&gt;Name; pImportDesc++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"comment\">// szLibName = VA to IMAGE_IMPORT_DESCRIPTOR.Name</span></span><br><span class=\"line\">\t\tszLibName = (LPCSTR)((DWORD)hMod + pImportDesc-&gt;Name);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( !_stricmp(szLibName, szDllName) )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            <span class=\"comment\">// pThunk = IMAGE_IMPORT_DESCRIPTOR.FirstThunk</span></span><br><span class=\"line\">            <span class=\"comment\">//        = VA to IAT(Import Address Table)</span></span><br><span class=\"line\">\t\t\tpThunk = (PIMAGE_THUNK_DATA)((DWORD)hMod + </span><br><span class=\"line\">                                         pImportDesc-&gt;FirstThunk);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// pThunk-&gt;u1.Function = VA to API</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>( ; pThunk-&gt;u1.Function; pThunk++ )</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>( pThunk-&gt;u1.Function == (DWORD)pfnOrg )</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 更改内存属性为E/R/W</span></span><br><span class=\"line\">\t\t\t\t\tVirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, </span><br><span class=\"line\">                                   <span class=\"number\">4</span>, </span><br><span class=\"line\">                                   PAGE_EXECUTE_READWRITE, </span><br><span class=\"line\">                                   &amp;dwOldProtect);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 修改IAT值（钩取）</span></span><br><span class=\"line\">                    pThunk-&gt;u1.Function = (DWORD)pfnNew;</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">                    <span class=\"comment\">// 恢复内存属性</span></span><br><span class=\"line\">                    VirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, </span><br><span class=\"line\">                                   <span class=\"number\">4</span>, </span><br><span class=\"line\">                                   dwOldProtect, </span><br><span class=\"line\">                                   &amp;dwOldProtect);\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int __cdecl sub_10001090(int a1, DWORD a2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  HMODULE ModuleHandleW; // edi</span><br><span class=\"line\">  int import_dll_name_rva; // ebx</span><br><span class=\"line\">  IMAGE_THUNK_DATA *first_trunk; // esi</span><br><span class=\"line\">  DWORD flOldProtect; // [esp+10h] [ebp-4h] BYREF</span><br><span class=\"line\"></span><br><span class=\"line\">  ModuleHandleW = GetModuleHandleW(0);</span><br><span class=\"line\">  import_dll_name_rva = (int)ModuleHandleW</span><br><span class=\"line\">                      + *(_DWORD *)((char *)ModuleHandleW + *((_DWORD *)ModuleHandleW + 0xF) + 0x80)</span><br><span class=\"line\">                      + 0xC;</span><br><span class=\"line\">  if ( !*(_DWORD *)import_dll_name_rva )</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">  while ( 1 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    if ( !_stricmp((const char *)ModuleHandleW + *(_DWORD *)import_dll_name_rva, &quot;user32.dll&quot;) )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      first_trunk = (IMAGE_THUNK_DATA *)((char *)ModuleHandleW + *(_DWORD *)(import_dll_name_rva + 4));</span><br><span class=\"line\">      if ( first_trunk-&gt;Function )</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">LABEL_6:</span><br><span class=\"line\">    import_dll_name_rva += 0x14;</span><br><span class=\"line\">    if ( !*(_DWORD *)import_dll_name_rva )</span><br><span class=\"line\">      return 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  while ( first_trunk-&gt;Function != a1 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    ++first_trunk;</span><br><span class=\"line\">    if ( !first_trunk-&gt;Function )</span><br><span class=\"line\">      goto LABEL_6;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  VirtualProtect(first_trunk, 4u, 0x40u, &amp;flOldProtect);</span><br><span class=\"line\">  first_trunk-&gt;Function = a2;</span><br><span class=\"line\">  VirtualProtect(first_trunk, 4u, flOldProtect, &amp;flOldProtect);</span><br><span class=\"line\">  return 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>读取PE文件头信息并查找IAT位置</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取当前的ImagBase(基址)</span><br><span class=\"line\">// hMod, pAddr = ImageBase of calc.exe</span><br><span class=\"line\">//             = VA to MZ signature (IMAGE_DOS_HEADER)</span><br><span class=\"line\">hMod = GetModuleHandle(NULL);</span><br><span class=\"line\">//获取DOS头</span><br><span class=\"line\">pAddr = (PBYTE)hMod;</span><br><span class=\"line\">//获取NT头</span><br><span class=\"line\">// pAddr = VA to PE signature (IMAGE_NT_HEADERS)</span><br><span class=\"line\">pAddr += *((DWORD*)&amp;pAddr[0x3C]);</span><br><span class=\"line\">//获取IMAGE_IMPORT_DESCRIPTOR的RVA</span><br><span class=\"line\">// dwRVA = RVA to IMAGE_IMPORT_DESCRIPTOR Table</span><br><span class=\"line\">dwRVA = *((DWORD*)&amp;pAddr[0x80]);</span><br><span class=\"line\">//获取IMAGE_IMPORT_DESCRIPTOR的VA</span><br><span class=\"line\">// pImportDesc = VA to IMAGE_IMPORT_DESCRIPTOR Table</span><br><span class=\"line\">pImportDesc = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)hMod+dwRVA);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调试被注入的DLL文件\"><a href=\"#调试被注入的DLL文件\" class=\"headerlink\" title=\"调试被注入的DLL文件\"></a>调试被注入的DLL文件</h3><p>1.首先运行calc.exe，然后打开x32dbg进行附加</p>\n<p>![x32dbg附加计算器](.&#x2F;IAT Hook&#x2F;x32dbg附加计算器.png)</p>\n<p>2.接着菜单栏选择选项-&gt;选项-&gt;事件，勾选User DLL Load然后保存</p>\n<p>这样，注入DLL文件时，控制权就会转给调试器</p>\n<p>![勾选User DLL Load](.&#x2F;IAT Hook&#x2F;勾选User DLL Load.png)</p>\n<p>3.然后在命令行首先输入命令<code>tasklist | findstr &quot;calc.exe&quot;</code>获取计算器的PID，然后输入命令<code>InjectDll.exe i 计算器PID hookiat.dll</code>将hookiat.dll注入计算器中</p>\n<p>![查看计算器PID并注入DLL](.&#x2F;IAT Hook&#x2F;查看计算器PID并注入DLL.png)</p>\n<p>4.可以看到，calc.exe进程中发生DLL加载事件时，相关事件就会被通知到调试器，设置好选项后，调试器就会在hookiat.dll的EP处暂停下来</p>\n<p>![注入DLL时调试器暂停](.&#x2F;IAT Hook&#x2F;注入DLL时调试器暂停.png)</p>\n<p>5.接下来取消勾选User DLL Load，然后查找DllMain代码（使用IDA查看），并在其起始位置下断点，然后运行，可以看到调试器在断点处暂停，接下来就可以调试注入的DLL了</p>\n<p>![查找DllMain并设置断点](.&#x2F;IAT Hook&#x2F;查找DllMain并设置断点.png)</p>\n<p>![DllMain断点暂停](.\\IAT Hook\\DllMain断点暂停.png)</p>\n<p>![DllMain断点暂停](.\\IAT Hook\\DllMain断点暂停.png)</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://blog.csdn.net/junbopengpeng/article/details/28142669\">https://blog.csdn.net/junbopengpeng/article/details/28142669</a></p>\n","text":"IAT Hook前置知识通过注入DLL文件来钩取某个API，DLL文件注入目标进程后，修改IAT来更改进程中调用的特定API功能。 API功能 kernel32...","permalink":"/post/IAT Hook","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"hook技术","slug":"hook技术","count":6,"path":"api/tags/hook技术.json"},{"name":"逆向工程核心原理","slug":"逆向工程核心原理","count":6,"path":"api/tags/逆向工程核心原理.json"},{"name":"API hook","slug":"API-hook","count":5,"path":"api/tags/API-hook.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IAT-Hook\"><span class=\"toc-text\">IAT Hook</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">前置知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#API%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">API功能</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IAT%E9%92%A9%E5%8F%96%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">IAT钩取工作原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IAT%E5%92%8CPE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">IAT和PE文件结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IAT-HOOK\"><span class=\"toc-text\">IAT HOOK</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EWin10%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E6%95%B0%E5%AD%97%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">基于Win10的计算器显示中文数字练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%B1%95%E7%A4%BA\"><span class=\"toc-text\">1.运行过程展示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BB%A3%E7%A0%81%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">2.代码流程分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%BA%90%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">源代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DllMain\"><span class=\"toc-text\">DllMain()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MySetWindowTextW-%E2%80%94%E2%80%94%E9%92%A9%E5%8F%96%E5%87%BD%E6%95%B0%EF%BC%88%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%EF%BC%89\"><span class=\"toc-text\">MySetWindowTextW()——钩取函数（钩子函数）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hook-iat\"><span class=\"toc-text\">hook_iat()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95%E8%A2%AB%E6%B3%A8%E5%85%A5%E7%9A%84DLL%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">调试被注入的DLL文件</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a></li></ol>","author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"SSDT Hook","uid":"6b2dac661e4ecb3d25144597b91ee96f","slug":"SSDT Hook","date":"2022-03-26T11:33:07.000Z","updated":"2025-06-04T09:49:19.533Z","comments":true,"path":"api/articles/SSDT Hook.json","keywords":null,"cover":null,"text":"内核态代码只能被用户态的SYSCALL、SYSENTER或INT 0x2E指令来访问 程序进入0环后，有一个保存现场的过程，会将3环的各种寄存器都保存到一个叫做...","permalink":"/post/SSDT Hook","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"26 mins."},"categories":[],"tags":[{"name":"hook技术","slug":"hook技术","count":6,"path":"api/tags/hook技术.json"},{"name":"逆向工程核心原理","slug":"逆向工程核心原理","count":6,"path":"api/tags/逆向工程核心原理.json"},{"name":"API hook","slug":"API-hook","count":5,"path":"api/tags/API-hook.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"inline Hook","uid":"ef0903e74e5233a2be57edee3f37a5dc","slug":"inline-Hook","date":"2022-03-24T09:39:13.000Z","updated":"2025-06-04T08:36:57.256Z","comments":true,"path":"api/articles/inline-Hook.json","keywords":null,"cover":null,"text":"原理程序在编译链接后成了二进制代码，我们可以找到需要Hook的函数的地址，然后把这个函数在内存中的二进制代码改为一个JMP指令，令其跳转到执行我们自己构造的函数...","permalink":"/post/inline-Hook","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"24 mins."},"categories":[],"tags":[{"name":"hook技术","slug":"hook技术","count":6,"path":"api/tags/hook技术.json"},{"name":"逆向工程核心原理","slug":"逆向工程核心原理","count":6,"path":"api/tags/逆向工程核心原理.json"},{"name":"API hook","slug":"API-hook","count":5,"path":"api/tags/API-hook.json"}],"author":{"name":"0netry","slug":"blog-author","avatar":"/img/tree.png","link":"/","description":"0与1只在一念之间","socials":{"github":"https://github.com/0netry","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}